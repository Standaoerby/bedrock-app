# app/theme_manager.py
# –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫—É—Ä—Å–∏–π

import os
import json
from app.logger import app_logger as logger


class ThemeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫—É—Ä—Å–∏–π.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–¥–∞—á—É —Ä–µ—Å—É—Ä—Å–æ–≤ —Ç–µ–º—ã:
    —Ü–≤–µ—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —à—Ä–∏—Ñ—Ç—ã, –∏–∫–æ–Ω–∫–∏, –æ–≤–µ—Ä–ª–µ–∏, –∑–≤—É–∫–∏ –∏ —Ç.–¥.
    """
    
    def __init__(self, themes_dir="themes"):
        self.themes_dir = themes_dir
        self.theme_name = None
        self.variant = None
        self.theme_data = {}
        
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        self.current_theme = None
        self.current_variant = None
        
        # üî• –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–• –†–ï–ö–£–†–°–ò–ô
        self._loading_in_progress = False
        self._notification_disabled = False
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        self.default_theme = {
            "colors": {
                "primary": "#40916c",
                "background": "#f0efeb",
                "accent": "#277da1",
                "text": "#000000",
                "text_secondary": "#666666",
                "text_inactive": "#999999",
                "text_accent": "#277da1",
                "text_accent_2": "#40916c",
                "clock_main": "#000000",
                "background_highlighted": "#e8e8e8",
                "overlay_card": "#ffffff",
                "menu_color": "#25252580",
                "menu_button_text": "#ffffff",
                "menu_button_text_active": "#40916c"
            },
            "fonts": {
                "main": "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç Kivy
                "title": ""
            },
            "images": {
                "background": "background.png",
                "button_bg": "btn_bg.png",
                "button_bg_active": "btn_bg_active.png",
                "menu_button_bg": "menu_btn.png",
                "menu_button_bg_active": "menu_btn_active.png",
                "overlay_home": "overlay_home.png",
                "overlay_alarm": "overlay_alarm.png",
                "overlay_schedule": "overlay_schedule.png",
                "overlay_weather": "overlay_weather.png",
                "overlay_pigs": "overlay_pigs.png",
                "overlay_settings": "overlay_settings.png",
                "overlay_default": "overlay_default.png"
            },
            "menu": {
                "menu_height": 64,
                "menu_button_height": 48,
                "menu_button_width": 152
            },
            "sounds": {
                "click": "click.ogg",
                "confirm": "confirm.ogg",
                "error": "error.ogg",
                "notify": "notify.ogg",
                "startup": "startup.ogg"
            }
        }

    # ================================================
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –¢–ï–ú–´
    # ================================================

    def load_theme(self, theme_name, variant="light"):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –∞–ª–∏–∞—Å –¥–ª—è load()"""
        return self.load(theme_name, variant)

    def load(self, theme_name, variant="light"):
        """üî• –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–æ–≤"""
        try:
            # üî• –ó–ê–©–ò–¢–ê –û–¢ –¶–ò–ö–õ–ò–ß–ï–°–ö–û–ô –†–ï–ö–£–†–°–ò–ò
            if self._loading_in_progress:
                logger.warning(f"Theme loading already in progress, skipping: {theme_name}/{variant}")
                return True
                
            self._loading_in_progress = True
            logger.info(f"Loading theme: {theme_name}/{variant}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç–µ–º–∞
            if (self.theme_name == theme_name and 
                self.variant == variant and 
                self.theme_data and 
                not self._notification_disabled):
                logger.debug(f"Theme {theme_name}/{variant} already loaded")
                return True
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ä–∞–∑—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            old_theme = self.theme_name
            old_variant = self.variant
            
            self.theme_name = theme_name
            self.variant = variant
            self.current_theme = theme_name  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            self.current_variant = variant   # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            success = self._load_theme_data(theme_name, variant)
            
            if success:
                logger.info(f"‚úÖ Theme loaded: {theme_name}/{variant}")
                
                # üî• –£–°–õ–û–í–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø –°–û–ë–´–¢–ò–Ø (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                if not self._notification_disabled:
                    self._notify_theme_changed()
            else:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                self.theme_name = old_theme
                self.variant = old_variant
                self.current_theme = old_theme
                self.current_variant = old_variant
            
            return success
            
        except Exception as ex:
            logger.error(f"Critical error loading theme {theme_name}/{variant}: {ex}")
            return False
        finally:
            # üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì
            self._loading_in_progress = False

    def load_silently(self, theme_name, variant="light"):
        """üî• –ù–û–í–´–ô: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –ë–ï–ó –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
        try:
            self._notification_disabled = True
            return self.load(theme_name, variant)
        finally:
            self._notification_disabled = False

    def force_reload(self, theme_name=None, variant=None):
        """üî• –ù–û–í–´–ô: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã"""
        theme_name = theme_name or self.theme_name
        variant = variant or self.variant
        
        if theme_name and variant:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._loading_in_progress = False
            self._notification_disabled = False
            self.theme_data = {}
            return self.load(theme_name, variant)
        return False

    def _load_theme_data(self, theme_name, variant):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º—ã"""
        try:
            theme_path = os.path.join(self.themes_dir, theme_name, variant, "theme.json")
            
            if not os.path.isfile(theme_path):
                logger.error(f"Theme file not found: {theme_path}")
                logger.info("Using default theme")
                self.theme_data = self.default_theme.copy()
                return False
                
            with open(theme_path, encoding="utf-8") as f:
                loaded_data = json.load(f)
                
            # –ú–µ—Ä–¥–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            self.theme_data = self._merge_with_defaults(loaded_data)
            return True
            
        except Exception as ex:
            logger.warning(f"Failed to load theme data {theme_name}/{variant}: {ex}")
            logger.info("Using default theme")
            self.theme_data = self.default_theme.copy()
            return False

    def _merge_with_defaults(self, loaded_data):
        """–ú–µ—Ä–¥–∂–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
        merged = self.default_theme.copy()
        
        for section, values in loaded_data.items():
            if section in merged and isinstance(values, dict):
                merged[section].update(values)
            else:
                merged[section] = values
                
        return merged

    def _notify_theme_changed(self):
        """üî• –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –°–ú–ï–ù–ï –¢–ï–ú–´ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–æ–≤"""
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
            if self._loading_in_progress:
                logger.debug("Skipping theme notification - loading in progress")
                return
                
            from app.event_bus import event_bus
            event_bus.publish("theme_changed", {
                "theme": self.theme_name,
                "variant": self.variant,
                "source": "theme_manager"  # üî• –£–ö–ê–ó–´–í–ê–ï–ú –ò–°–¢–û–ß–ù–ò–ö –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤
            })
            logger.debug(f"Theme change event published: {self.theme_name}/{self.variant}")
        except Exception as e:
            logger.error(f"Error notifying theme change: {e}")

    # ================================================
    # –ú–ï–¢–û–î–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –†–ï–°–£–†–°–û–í –¢–ï–ú–´
    # ================================================

    def get_color(self, name, fallback="#ffffff"):
        """–ü–æ–ª—É—á–∏—Ç—å hex-—Ü–≤–µ—Ç –ø–æ –∏–º–µ–Ω–∏"""
        try:
            color = self.theme_data.get("colors", {}).get(name)
            if color:
                return color
            return fallback
        except Exception:
            return fallback

    def get_rgba(self, name, fallback="#ffffff"):
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA –¥–ª—è Kivy (tuple 0..1)"""
        try:
            from kivy.utils import get_color_from_hex
            hex_color = self.get_color(name, fallback)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if not isinstance(hex_color, str):
                logger.warning(f"Color {name} is not a string: {hex_color}, using fallback")
                hex_color = fallback
                
            if not hex_color.startswith('#'):
                logger.warning(f"Color {name} invalid format: {hex_color}, using fallback")
                hex_color = fallback
                
            return get_color_from_hex(hex_color)
        except Exception as e:
            logger.error(f"Error getting RGBA color {name}: {e}")
            return [1, 1, 1, 1]

    def get_param(self, name, fallback=None):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ–º—ã –∏–∑ –ª—é–±–æ–π —Å–µ–∫—Ü–∏–∏"""
        try:
            # –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏—è—Ö
            for section_name, section_data in self.theme_data.items():
                if isinstance(section_data, dict) and name in section_data:
                    return section_data[name]
            return fallback
        except Exception:
            return fallback

    def get_font(self, name, fallback=""):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–∞"""
        try:
            font_file = self.theme_data.get("fonts", {}).get(name)
            
            # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç)
            if not font_file:
                return ""
            
            if not self.theme_name:
                logger.warning("Theme not loaded, using default font")
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å vs –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if os.path.sep in font_file or '/' in font_file:
                path = font_file
            else:
                # –®—Ä–∏—Ñ—Ç—ã –ª–µ–∂–∞—Ç –≤ –ø–∞–ø–∫–µ —Ç–µ–º—ã, –ù–ï –≤ –ø–∞–ø–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                path = os.path.join(self.themes_dir, self.theme_name, "fonts", font_file)
            
            path = os.path.normpath(path)
                
            if not os.path.isfile(path):
                logger.warning(f"Font not found: {path}, using default")
                return ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç Kivy
                
            return path
        except Exception as e:
            logger.error(f"Error getting font {name}: {e}")
            return ""

    def get_image(self, name):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        try:
            img_file = self.theme_data.get("images", {}).get(name)
            if not img_file:
                # –§–æ–ª–±—ç–∫: –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º
                img_file = f"{name}.png"
            
            if not self.theme_name or not self.variant:
                logger.warning("Theme not loaded, using fallback")
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å vs –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if os.path.sep in img_file or '/' in img_file:
                path = img_file
            else:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–µ–∂–∞—Ç –≤ –ø–∞–ø–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                path = os.path.join(self.themes_dir, self.theme_name, self.variant, img_file)
            
            path = os.path.normpath(path)
                
            if not os.path.isfile(path):
                logger.warning(f"Image not found: {path}, trying fallback")
                # –§–æ–ª–±—ç–∫ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ñ–æ–Ω
                fallback_path = os.path.join(
                    self.themes_dir, self.theme_name, self.variant, "background.png"
                )
                fallback_path = os.path.normpath(fallback_path)
                if os.path.isfile(fallback_path):
                    return fallback_path
                else:
                    logger.warning(f"Fallback image also not found: {fallback_path}")
                    return ""
            return path
        except Exception as e:
            logger.error(f"Error getting image {name}: {e}")
            return ""

    def get_overlay(self, page_name):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ overlay-—Ñ–∞–π–ª—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            overlay_name = f"overlay_{page_name}.png"
            if not self.theme_name or not self.variant:
                return ""
                
            path = os.path.join(self.themes_dir, self.theme_name, self.variant, overlay_name)
            path = os.path.normpath(path)
            
            if os.path.isfile(path):
                return path
            
            # –§–æ–ª–±—ç–∫: overlay_default.png
            fallback = os.path.join(
                self.themes_dir, self.theme_name, self.variant, "overlay_default.png"
            )
            fallback = os.path.normpath(fallback)
            if os.path.isfile(fallback):
                return fallback
            return ""
        except Exception as e:
            logger.error(f"Error getting overlay {page_name}: {e}")
            return ""

    def get_sound(self, name):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∑–≤—É–∫–æ–≤–æ–º—É —Ñ–∞–π–ª—É"""
        try:
            sound_file = self.theme_data.get("sounds", {}).get(name)
            if not sound_file:
                sound_file = f"{name}.ogg"
            
            if not self.theme_name:
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å vs –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            if os.path.sep in sound_file or '/' in sound_file:
                path = sound_file
            else:
                # –ó–≤—É–∫–∏ –ª–µ–∂–∞—Ç –≤ –ø–∞–ø–∫–µ —Ç–µ–º—ã, –ù–ï –≤ –ø–∞–ø–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                path = os.path.join(self.themes_dir, self.theme_name, "sounds", sound_file)
            
            path = os.path.normpath(path)
                
            if not os.path.isfile(path):
                logger.warning(f"Sound not found: {path}")
                return ""
            return path
        except Exception as e:
            logger.error(f"Error getting sound {name}: {e}")
            return ""

    # ================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ================================================

    def is_loaded(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —Ç–µ–º–∞"""
        return self.theme_name is not None and self.variant is not None

    def diagnose_state(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ThemeManager"""
        return {
            "theme_name": self.theme_name,
            "variant": self.variant,
            "current_theme": self.current_theme,
            "current_variant": self.current_variant,
            "is_loaded": self.is_loaded(),
            "loading_in_progress": self._loading_in_progress,
            "notification_disabled": self._notification_disabled,
            "themes_dir": self.themes_dir,
            "theme_data_keys": list(self.theme_data.keys()) if self.theme_data else [],
            "colors_count": len(self.theme_data.get("colors", {})),
            "fonts_count": len(self.theme_data.get("fonts", {})),
            "images_count": len(self.theme_data.get("images", {})),
            "sounds_count": len(self.theme_data.get("sounds", {}))
        }


# ================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
theme_manager = ThemeManager()


def get_theme_manager():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ThemeManager"""
    return theme_manager


def validate_theme_manager_module():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è ThemeManager –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        tm = ThemeManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            'load_theme', 'load', 'load_silently', 'force_reload',
            'get_color', 'get_rgba', 'get_param', 'get_font', 
            'get_image', 'get_overlay', 'get_sound',
            'is_loaded', 'diagnose_state'
        ]
        
        for method in required_methods:
            assert hasattr(tm, method), f"{method} method missing"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ü–∏–∫–ª–æ–≤
        assert hasattr(tm, '_loading_in_progress'), "_loading_in_progress flag missing"
        assert hasattr(tm, '_notification_disabled'), "_notification_disabled flag missing"
        
        print("‚úÖ ThemeManager module validation passed")
        return True
    except Exception as e:
        print(f"‚ùå ThemeManager module validation failed: {e}")
        return False


# –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == "__main__":
    validate_theme_manager_module()