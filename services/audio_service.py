# services/audio_service.py - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¥–ª—è thread safety —Å toggle –∫–Ω–æ–ø–∫–∞–º–∏
import os
import time
import threading
from kivy.clock import Clock, mainthread
from app.logger import app_logger as logger

try:
    from pygame import mixer
    PYGAME_AVAILABLE = True
    logger.info("üéµ Pygame mixer imported successfully")
except ImportError as e:
    PYGAME_AVAILABLE = False
    logger.error(f"‚ùå Failed to import pygame mixer: {e}")

try:
    import alsaaudio
    ALSA_AVAILABLE = True
except ImportError:
    ALSA_AVAILABLE = False

class AudioService:
    """
    Thread-safe –∞—É–¥–∏–æ —Å–µ—Ä–≤–∏—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è toggle –∫–Ω–æ–ø–æ–∫
    """
    
    def __init__(self, device_preference=None):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º thread safety
        self._init_lock = threading.RLock()  # RLock –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ
        self._state_lock = threading.Lock()   # –û—Ç–¥–µ–ª—å–Ω—ã–π lock –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (thread-safe)
        self._is_playing = False
        self._current_file = None
        self._is_long_audio = False
        self._last_play_time = 0
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Callbacks –¥–ª—è UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._ui_callbacks = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.audio_device = device_preference
        self._mixer_initialized = False
        self._initialization_attempted = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self._init_thread = threading.Thread(target=self._initialize_audio, daemon=True)
        self._init_thread.start()

    def _initialize_audio(self):
        """Thread-safe –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã"""
        with self._init_lock:
            if self._initialization_attempted:
                return
            self._initialization_attempted = True
            
            if not PYGAME_AVAILABLE:
                logger.error("‚ùå Pygame not available - audio service disabled")
                return

            try:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ALSA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if ALSA_AVAILABLE and self.audio_device:
                    self._setup_alsa_device()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame mixer
                mixer.pre_init(
                    frequency=44100,
                    size=-16,
                    channels=2,
                    buffer=1024
                )
                mixer.init()
                
                self._mixer_initialized = True
                logger.info(f"üéµ Audio service initialized successfully on {self.audio_device}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                self._notify_ui_callbacks('audio_initialized', True)
                
            except Exception as e:
                logger.error(f"‚ùå Audio service initialization failed: {e}")
                self._mixer_initialized = False
                self._notify_ui_callbacks('audio_initialized', False)

    def _setup_alsa_device(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ALSA —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            if isinstance(self.audio_device, str) and self.audio_device.startswith("hw:"):
                os.environ['SDL_AUDIODRIVER'] = 'alsa'
                os.environ['ALSA_CARD'] = self.audio_device.replace("hw:", "")
                logger.info(f"üîä ALSA device configured: {self.audio_device}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ALSA device setup failed: {e}")

    # ========================================
    # THREAD-SAFE STATE MANAGEMENT
    # ========================================

    def _get_state(self):
        """Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._state_lock:
            return {
                'is_playing': self._is_playing,
                'current_file': self._current_file,
                'is_long_audio': self._is_long_audio,
                'last_play_time': self._last_play_time
            }

    def _set_state(self, **kwargs):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._state_lock:
            if 'is_playing' in kwargs:
                self._is_playing = kwargs['is_playing']
            if 'current_file' in kwargs:
                self._current_file = kwargs['current_file']
            if 'is_long_audio' in kwargs:
                self._is_long_audio = kwargs['is_long_audio']
            if 'last_play_time' in kwargs:
                self._last_play_time = kwargs['last_play_time']

    def _reset_state(self):
        """Thread-safe —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._state_lock:
            old_playing = self._is_playing
            self._is_playing = False
            self._current_file = None
            self._is_long_audio = False
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if old_playing:
                self._notify_ui_callbacks('playback_stopped', None)

    # ========================================
    # UI CALLBACKS MANAGEMENT
    # ========================================

    def add_ui_callback(self, callback):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è UI"""
        if callback not in self._ui_callbacks:
            self._ui_callbacks.append(callback)

    def remove_ui_callback(self, callback):
        """–£–¥–∞–ª–∏—Ç—å callback"""
        if callback in self._ui_callbacks:
            self._ui_callbacks.remove(callback)

    @mainthread
    def _notify_ui_callbacks(self, event_type, data):
        """Thread-safe —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ UI callbacks"""
        for callback in self._ui_callbacks:
            try:
                callback(event_type, data)
            except Exception as e:
                logger.error(f"Error in UI callback: {e}")

    # ========================================
    # THREAD-SAFE AUDIO PLAYBACK
    # ========================================

    def play(self, filepath, fadein=0):
        """Thread-safe –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞"""
        if not self.is_mixer_initialized():
            logger.warning("üîá Audio service not initialized - skipping playback")
            return
            
        if not os.path.exists(filepath):
            logger.error(f"‚ùå Audio file not found: {filepath}")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=self._play_audio_thread,
            args=(filepath, fadein),
            daemon=True
        ).start()

    def _play_audio_thread(self, filepath, fadein):
        """–§–æ–Ω–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ (–ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç UI)"""
        with self._init_lock:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
                state = self._get_state()
                is_ringtone = not any(short_sound in os.path.basename(filepath).lower() 
                                    for short_sound in ['click', 'confirm', 'error', 'notify', 'startup'])
                
                current_time = time.time()
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if current_time - state['last_play_time'] < 0.1 and not is_ringtone:
                    logger.debug(f"Skipping audio play - too frequent")
                    return
                
                # –ï—Å–ª–∏ —É–∂–µ –∏–≥—Ä–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∑–≤—É–∫ (—Ä–∏–Ω–≥—Ç–æ–Ω), –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                if state['is_long_audio'] and self._is_pygame_busy():
                    if not is_ringtone:
                        logger.debug(f"Skipping audio play - ringtone is playing")
                        return
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if self._is_pygame_busy():
                    mixer.music.stop()
                    time.sleep(0.05)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self._set_state(
                    is_playing=True,
                    current_file=filepath,
                    is_long_audio=is_ringtone,
                    last_play_time=current_time
                )
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ñ–∞–π–ª
                mixer.music.load(filepath)
                
                if fadein > 0:
                    mixer.music.play(loops=0, fade_ms=int(fadein * 1000))
                else:
                    mixer.music.play()
                    
                mixer.music.set_volume(1.0)
                
                logger.debug(f"üéµ Playing audio: {os.path.basename(filepath)} on {self.audio_device}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                self._notify_ui_callbacks('playback_started', {
                    'file': filepath,
                    'is_ringtone': is_ringtone
                })
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∏–Ω–≥—Ç–æ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if is_ringtone:
                    self._monitor_ringtone_completion()
                    
            except Exception as e:
                logger.error(f"‚ùå AudioService play error: {e}")
                self._reset_state()

    def _monitor_ringtone_completion(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–∏–Ω–≥—Ç–æ–Ω–∞"""
        def check_completion():
            try:
                if not self._is_pygame_busy():
                    logger.debug("üéµ Ringtone playback completed")
                    self._reset_state()
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã
                    Clock.schedule_once(lambda dt: check_completion(), 0.5)
            except Exception as e:
                logger.error(f"Error monitoring ringtone: {e}")
                self._reset_state()
        
        Clock.schedule_once(lambda dt: check_completion(), 0.5)

    def play_async(self, filepath, fadein=0):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ (–∞–ª–∏–∞—Å –¥–ª—è play)"""
        self.play(filepath, fadein)

    def stop(self):
        """Thread-safe –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        logger.debug(f"üõë AudioService.stop() called")
        
        if not self.is_mixer_initialized():
            logger.debug("Mixer not initialized - clearing state only")
            self._reset_state()
            return
        
        try:
            with self._init_lock:
                if self._get_state()['is_playing'] or self._is_pygame_busy():
                    mixer.music.stop()
                    time.sleep(0.05)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            logger.error(f"‚ùå AudioService stop error: {e}")
        finally:
            self._reset_state()

    # ========================================
    # THREAD-SAFE STATE QUERIES
    # ========================================

    def is_busy(self):
        """Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if not self.is_mixer_initialized():
            # –ï—Å–ª–∏ mixer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if self._get_state()['is_playing']:
                self._reset_state()
            return False
            
        try:
            busy = self._is_pygame_busy()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å pygame
            state = self._get_state()
            if not busy and state['is_playing']:
                logger.debug(f"üîç Pygame not busy but is_playing=True - syncing state")
                self._reset_state()
                
            return busy
        except Exception as e:
            logger.error(f"‚ùå AudioService is_busy error: {e}")
            self._reset_state()
            return False

    def _is_pygame_busy(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è pygame"""
        try:
            return mixer.music.get_busy()
        except Exception:
            return False

    def is_mixer_initialized(self):
        """Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ mixer"""
        with self._init_lock:
            return self._mixer_initialized and PYGAME_AVAILABLE

    # ========================================
    # UTILITY METHODS
    # ========================================

    def get_device_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        info = {
            "device": self.audio_device,
            "device_type": "usb" if "hw:" in str(self.audio_device) else "system_default",
            "alsa_available": ALSA_AVAILABLE,
            "mixer_initialized": self.is_mixer_initialized(),
            "current_state": self._get_state()
        }
        
        if ALSA_AVAILABLE:
            try:
                info["alsa_cards"] = alsaaudio.cards()
            except:
                info["alsa_cards"] = []
                
        return info

    def cleanup(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ Cleaning up audio service...")
        
        try:
            self.stop()
            
            if self.is_mixer_initialized():
                mixer.quit()
                
            self._ui_callbacks.clear()
            
        except Exception as e:
            logger.error(f"Error during audio service cleanup: {e}")

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        try:
            self.cleanup()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å main.py
audio_service = AudioService()