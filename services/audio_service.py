import os
import time
import logging
from pygame import mixer
from app.logger import app_logger as logger

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ALSA –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
try:
    import alsaaudio
    ALSA_AVAILABLE = True
except ImportError:
    ALSA_AVAILABLE = False
    logger.warning("alsaaudio not available - using default pygame mixer")


class AudioService:
    def __init__(self):
        self.is_playing = False
        self.current_file = None
        self.is_long_audio = False
        self.last_play_time = 0
        self._is_stopped = False
        self.audio_device = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—É
        self._init_audio()
        
    def _init_audio(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Audio Bonnet"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Audio Bonnet
            bonnet_device = self._find_audio_bonnet()
            
            if bonnet_device:
                logger.info(f"Found Audio Bonnet: {bonnet_device}")
                self._init_pygame_with_device(bonnet_device)
            else:
                logger.warning("Audio Bonnet not found, using default audio")
                self._init_pygame_default()
                
        except Exception as e:
            logger.error(f"Audio initialization error: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self._init_pygame_default()

    def _find_audio_bonnet(self):
        """–ü–æ–∏—Å–∫ Audio Bonnet –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            if ALSA_AVAILABLE:
                # –ò—â–µ–º –∫–∞—Ä—Ç—ã ALSA
                cards = alsaaudio.cards()
                logger.info(f"Available ALSA cards: {cards}")
                
                # –ò—â–µ–º Audio Bonnet –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º
                bonnet_names = [
                    'audioinjectorpi', 
                    'audioinjector-pi-soundcard',
                    'AudioInjector',
                    'wm8731',
                    'wm8960soundcard',
                    'wm8960-soundcard',
                    'wm8960'
                ]
                
                for i, card in enumerate(cards):
                    for bonnet_name in bonnet_names:
                        if bonnet_name.lower() in card.lower():
                            logger.info(f"Found Audio Bonnet card: {card} (index {i})")
                            return f"hw:{i},0"
                            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ /proc/asound/cards
            try:
                with open('/proc/asound/cards', 'r') as f:
                    cards_info = f.read()
                    logger.debug(f"ALSA cards info:\n{cards_info}")
                    
                    lines = cards_info.strip().split('\n')
                    for line in lines:
                        if any(name in line.lower() for name in ['audioinjector', 'wm8731', 'wm8960']):
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                            card_num = line.split()[0]
                            return f"hw:{card_num},0"
                            
            except Exception as e:
                logger.warning(f"Could not read /proc/asound/cards: {e}")
                
        except Exception as e:
            logger.error(f"Error finding Audio Bonnet: {e}")
            
        return None

    def _init_pygame_with_device(self, device):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SDL
            os.environ['SDL_AUDIODRIVER'] = 'alsa'
            os.environ['AUDIODEV'] = device
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pygame mixer —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Audio Bonnet
            mixer.pre_init(
                frequency=44100,    # CD –∫–∞—á–µ—Å—Ç–≤–æ
                size=-16,           # 16-bit signed
                channels=2,         # –°—Ç–µ—Ä–µ–æ
                buffer=1024         # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            )
            mixer.init()
            
            # –¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if self._test_audio_output():
                logger.info(f"AudioService initialized with Audio Bonnet device: {device}")
                self.audio_device = device
                return True
            else:
                logger.warning("Audio Bonnet test failed, falling back to default")
                return False
                
        except Exception as e:
            logger.error(f"Error initializing pygame with Audio Bonnet: {e}")
            return False

    def _init_pygame_default(self):
        """–ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame mixer"""
        try:
            mixer.pre_init(frequency=22050, size=-16, channels=2, buffer=1024)
            mixer.init()
            logger.info("AudioService initialized with default audio")
            self.audio_device = "default"
        except Exception as e:
            logger.error(f"Default audio initialization error: {e}")

    def _test_audio_output(self):
        """–¢–µ—Å—Ç –∞—É–¥–∏–æ–≤—ã—Ö–æ–¥–∞"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mixer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            return mixer.get_init() is not None
        except Exception as e:
            logger.error(f"Audio test failed: {e}")
            return False

    def set_volume(self, value):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ pygame, –±–µ–∑ ALSA –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        try:
            volume = max(0.0, min(1.0, value))
            mixer.music.set_volume(volume)
            logger.debug(f"Set pygame volume to {volume}")
            
            # –£–ë–†–ê–ù–û: –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ALSA –≥—Ä–æ–º–∫–æ—Å—Ç—å—é –∏–∑ AudioService
            # –¢–µ–ø–µ—Ä—å VolumeService –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–∏—Å—Ç–µ–º–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
                    
        except Exception as e:
            logger.error(f"AudioService set_volume error: {e}")

    def play(self, filepath, fadein=0):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if not filepath or not os.path.isfile(filepath):
            logger.warning(f"Audio file not found: {filepath}")
            return
            
        try:
            is_ringtone = 'ringtones' in filepath
            is_theme_sound = any(sound_type in filepath for sound_type in 
                            ['click', 'confirm', 'error', 'notify', 'startup'])
            
            current_time = time.time()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–ª–∞–±–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            logger.debug(f"üéµ AudioService.play() called:")
            logger.debug(f"  filepath: {filepath}")
            logger.debug(f"  is_ringtone: {is_ringtone}")
            logger.debug(f"  is_theme_sound: {is_theme_sound}")
            logger.debug(f"  current state - is_playing: {self.is_playing}, current_file: {self.current_file}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å—Ç–æ—Ç—ã
            if is_theme_sound:
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∏–Ω–≥—Ç–æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–º –∑–≤—É–∫–æ–º
                if (self.is_playing and self.is_long_audio):
                    logger.debug("‚ùå Skipping theme sound - ringtone is playing")
                    return
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–≤—É–∫–∞–º–∏ —Ç–µ–º—ã –¥–æ 0.1 —Å–µ–∫—É–Ω–¥—ã
                if (self.is_playing and not self.is_long_audio and 
                    (current_time - self.last_play_time) < 0.1):
                    logger.debug("‚ùå Skipping theme sound - too frequent")
                    return
            
            # –î–ª—è —Ä–∏–Ω–≥—Ç–æ–Ω–æ–≤ –í–°–ï–ì–î–ê –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            if is_ringtone:
                logger.info("üéµ Ringtone requested - stopping any current audio")
                if self.is_playing:
                    self.stop()
                    time.sleep(0.1)
            elif self.is_playing and is_theme_sound:
                # –î–ª—è –∑–≤—É–∫–æ–≤ —Ç–µ–º—ã - –∑–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–≤—É–∫–∏
                if not self.is_long_audio:
                    self.stop()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∏–Ω–≥—Ç–æ–Ω–æ–≤
            if is_ringtone:
                try:
                    file_size = os.path.getsize(filepath)
                    if file_size == 0:
                        logger.error(f"‚ùå Ringtone file is empty: {filepath}")
                        return
                    elif file_size > 50 * 1024 * 1024:  # > 50MB
                        logger.warning(f"‚ö†Ô∏è Large ringtone file: {file_size} bytes")
                except Exception as size_error:
                    logger.error(f"‚ùå Error checking ringtone file size: {size_error}")
                    return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = True
            self.current_file = filepath
            self.is_long_audio = is_ringtone
            self.last_play_time = current_time
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ñ–∞–π–ª
            try:
                mixer.music.load(filepath)
                
                if fadein > 0:
                    mixer.music.play(loops=0, fade_ms=int(fadein * 1000))
                else:
                    mixer.music.play()
                mixer.music.set_volume(1.0)
                
                logger.debug(f"üéµ Playing audio: {os.path.basename(filepath)} on device: {self.audio_device}")
                
            except Exception as play_error:
                logger.error(f"‚ùå Error during playback: {play_error}")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.is_playing = False
                self.current_file = None
                self.is_long_audio = False
                return
            
        except Exception as e:
            logger.error(f"‚ùå AudioService play error: {e}")
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            self.is_playing = False
            self.current_file = None
            self.is_long_audio = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        logger.debug(f"üõë AudioService.stop() called")
        
        try:
            if self.is_playing or mixer.music.get_busy():
                mixer.music.stop()
        except Exception as e:
            logger.error(f"‚ùå AudioService stop error: {e}")
        finally:
            # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_playing = False
            self.current_file = None
            self.is_long_audio = False

    def is_busy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            busy = mixer.music.get_busy()
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å pygame
            if not busy and self.is_playing:
                logger.debug(f"üîç Pygame not busy but is_playing=True - syncing state")
                self.is_playing = False
                self.current_file = None
                self.is_long_audio = False
            return busy
        except Exception as e:
            logger.error(f"‚ùå AudioService is_busy error: {e}")
            return False

    def get_device_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        info = {
            "device": self.audio_device,
            "alsa_available": ALSA_AVAILABLE,
            "mixer_initialized": mixer.get_init() is not None
        }
        
        if ALSA_AVAILABLE:
            try:
                info["alsa_cards"] = alsaaudio.cards()
            except:
                info["alsa_cards"] = []
                
        return info

    def diagnose_state(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AudioService"""
        try:
            pygame_busy = mixer.music.get_busy()
            pygame_init = mixer.get_init()
            
            logger.info(f"üîß === AUDIOSERVICE DIAGNOSIS ===")
            logger.info(f"is_playing: {self.is_playing}")
            logger.info(f"current_file: {self.current_file}")
            logger.info(f"is_long_audio: {self.is_long_audio}")
            logger.info(f"last_play_time: {self.last_play_time}")
            logger.info(f"audio_device: {self.audio_device}")
            logger.info(f"pygame mixer.get_busy(): {pygame_busy}")
            logger.info(f"pygame mixer.get_init(): {pygame_init}")
            
            return {
                "is_playing": self.is_playing,
                "current_file": self.current_file,
                "is_long_audio": self.is_long_audio,
                "pygame_busy": pygame_busy,
                "pygame_init": pygame_init
            }
        except Exception as e:
            logger.error(f"Error in diagnose_state: {e}")
            return {"error": str(e)}

    def reinitialize_audio(self):
        """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã"""
        logger.info("Reinitializing audio system...")
        try:
            mixer.quit()
        except:
            pass
            
        self._init_audio()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
audio_service = AudioService()