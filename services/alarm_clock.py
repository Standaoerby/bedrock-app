"""
AlarmClock - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –∏ –µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
"""
import threading
import time
from datetime import datetime, timedelta
from app.logger import app_logger as logger


class AlarmClock:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.alarm_popup = None
        self._stop_event = threading.Event()
        self._snooze_until = None
        self._alarm_active = False
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É
        self._last_trigger_time = None
        
        logger.info("AlarmClock initialized")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        if self.running:
            logger.warning("AlarmClock already running")
            return
        
        self.running = True
        self._stop_event.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.thread = threading.Thread(target=self._check_alarm_loop, daemon=True)
        self.thread.start()
        
        logger.info("AlarmClock started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        if not self.running:
            logger.debug("AlarmClock already stopped")
            return
        
        logger.info("Stopping AlarmClock...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        self.running = False
        self._stop_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=2.0)
            if self.thread.is_alive():
                logger.warning("AlarmClock thread did not stop gracefully")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –í–°–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            if hasattr(app, 'audio_service') and app.audio_service:
                app.audio_service.stop()
            
            # –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –í–°–Å, –≤–∫–ª—é—á–∞—è –≤—Ä–µ–º—è
            self._alarm_active = False
            self._snooze_until = None
            self._last_trigger_time = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            self.alarm_popup = None
            
            logger.info("AlarmClock fully stopped and reset")
            
        except Exception as e:
            logger.error(f"Error during AlarmClock shutdown: {e}")
        
        logger.info("AlarmClock stopped")
    
    def _check_alarm_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        logger.info("AlarmClock monitoring loop started")
        
        while self.running and not self._stop_event.is_set():
            try:
                current_time = datetime.now()
                current_time_str = current_time.strftime("%H:%M")
                
                # –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∏–Ω—É—Ç—ã
                if self._last_trigger_time and self._last_trigger_time != current_time_str:
                    logger.info(f"‚è∞ Time changed from {self._last_trigger_time} to {current_time_str}, resetting last trigger")
                    self._last_trigger_time = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                if self._snooze_until:
                    if current_time >= self._snooze_until:
                        logger.info("Snooze time expired, triggering alarm")
                        self._snooze_until = None
                        self._trigger_alarm_popup()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±—É–¥–∏–ª—å–Ω–∏–∫
                elif self._should_alarm_trigger():
                    logger.info("Alarm time reached, triggering alarm")
                    self._trigger_alarm_popup()
                
                # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                self._stop_event.wait(10)
                
            except Exception as e:
                logger.error(f"Error in alarm check loop: {e}")
                self._stop_event.wait(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        logger.info("AlarmClock monitoring loop stopped")
    
    def _should_alarm_trigger(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ª–∂–µ–Ω –ª–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            current_time = datetime.now()
            current_time_str = current_time.strftime("%H:%M")
            
            # –û–¢–õ–ê–î–ö–ê: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å
            alarm_might_trigger = False
            
            if not hasattr(app, 'alarm_service') or not app.alarm_service:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            alarm = app.alarm_service.get_alarm()
            if not alarm or not alarm.get("enabled", False):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            alarm_time = alarm.get("time", "07:30")
            
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –¥–µ–ª–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            if current_time_str == alarm_time:
                alarm_might_trigger = True
                logger.info(f"üîç ALARM CHECK {current_time_str} (time matches {alarm_time})")
                logger.info(f"  _alarm_active: {self._alarm_active}")
                logger.info(f"  _last_trigger_time: {self._last_trigger_time}")
                logger.info(f"  _snooze_until: {self._snooze_until}")
            
            # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
            if current_time_str != alarm_time:
                return False
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É
            if self._last_trigger_time == current_time_str:
                logger.info(f"‚è∏Ô∏è Alarm already triggered at {current_time_str}, SKIPPING")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            repeat_days = alarm.get("repeat", [])
            if repeat_days:
                day_names = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
                current_day = day_names[current_time.weekday()]
                logger.info(f"  current_day: {current_day}, repeat_days: {repeat_days}")
                
                if current_day not in repeat_days:
                    logger.info(f"‚ùå Day {current_day} not in repeat list, SKIPPING")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É–¥–∏–ª—å–Ω–∏–∫ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            if self._alarm_active:
                logger.info(f"‚ùå Alarm already active, SKIPPING")
                return False
            
            logger.info(f"‚úÖ Alarm SHOULD trigger: {alarm_time} on {current_time.strftime('%A')}")
            return True
            
        except Exception as e:
            logger.error(f"Error checking alarm trigger: {e}")
            return False
    
    def _trigger_alarm_popup(self):
        """–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑ –ø–æ–ø–∞–ø–∞"""
        try:
            from kivy.app import App
            from kivy.clock import Clock
            
            current_time_str = datetime.now().strftime("%H:%M")
            logger.info(f"üö® TRIGGERING ALARM at {current_time_str}")
            
            app = App.get_running_app()
            
            if not hasattr(app, 'alarm_service') or not app.alarm_service:
                logger.error("AlarmService not available for alarm trigger")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            alarm = app.alarm_service.get_alarm()
            if not alarm:
                logger.error("No alarm configuration found")
                return
            
            alarm_time = alarm.get("time", "--:--")
            ringtone = alarm.get("ringtone", "robot.mp3")
            
            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –±—É–¥–∏–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            self._alarm_active = True
            self._last_trigger_time = current_time_str
            logger.info(f"üîí SET _last_trigger_time = {self._last_trigger_time}, _alarm_active = {self._alarm_active}")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def create_popup(dt):
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AlarmPopup
                    from services.alarm_popup import AlarmPopup
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø
                    self.alarm_popup = AlarmPopup(
                        alarm_time=alarm_time,
                        ringtone=ringtone
                    )
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
                    self.alarm_popup.open_alarm()
                    
                    logger.info(f"Alarm popup shown for {alarm_time}")
                    
                except Exception as e:
                    logger.error(f"Error creating alarm popup: {e}")
                    self._alarm_active = False
                    self._last_trigger_time = None
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø–∞–ø–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            Clock.schedule_once(create_popup, 0)
            
        except Exception as e:
            logger.error(f"Error triggering alarm popup: {e}")
            self._alarm_active = False
            self._last_trigger_time = None
    
    def _force_stop_alarm_internal(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –ë–ï–ó –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞"""
        try:
            logger.info(f"üõë FORCE STOPPING alarm (was active: {self._alarm_active}, last_trigger: {self._last_trigger_time})")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            from kivy.app import App
            app = App.get_running_app()
            
            if hasattr(app, 'audio_service') and app.audio_service:
                app.audio_service.stop()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏, –Ω–æ –ù–ï —Ç—Ä–æ–≥–∞–µ–º –ø–æ–ø–∞–ø
            self._alarm_active = False
            self._snooze_until = None
            # –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú _last_trigger_time! –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
            self.alarm_popup = None  # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É
            
            logger.info(f"üîì AFTER STOP: _alarm_active = {self._alarm_active}, _last_trigger_time = {self._last_trigger_time}")
            
        except Exception as e:
            logger.error(f"Error force-stopping alarm internally: {e}")
    
    def stop_alarm(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î: –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥"""
        logger.info("stop_alarm called (legacy)")
        self._force_stop_alarm_internal()
    
    def snooze_alarm(self, minutes=5):
        """–û—Ç–ª–æ–∂–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç"""
        try:
            logger.info(f"Snoozing alarm for {minutes} minutes")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É–¥–∏–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ
            self._force_stop_alarm_internal()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            self._snooze_until = datetime.now() + timedelta(minutes=minutes)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —á—Ç–æ–±—ã snooze –º–æ–≥ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
            self._last_trigger_time = None
            
            logger.info(f"Alarm snoozed until {self._snooze_until.strftime('%H:%M:%S')}")
            
        except Exception as e:
            logger.error(f"Error snoozing alarm: {e}")
    
    def trigger_alarm(self, ringtone="robot.mp3", fadein=False):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            if hasattr(app, 'audio_service') and app.audio_service:
                import os
                ringtone_path = os.path.join("media", "ringtones", ringtone)
                
                if os.path.exists(ringtone_path):
                    fadein_time = 2.0 if fadein else 0
                    app.audio_service.play(ringtone_path, fadein=fadein_time)
                    logger.info(f"Test alarm triggered with {ringtone}")
                else:
                    logger.warning(f"Ringtone file not found: {ringtone_path}")
            
        except Exception as e:
            logger.error(f"Error triggering test alarm: {e}")
    
    def is_alarm_active(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        return self._alarm_active
    
    def get_snooze_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –±—É–¥–∏–ª—å–Ω–∏–∫–µ"""
        if self._snooze_until:
            return {
                "active": True,
                "until": self._snooze_until.isoformat(),
                "remaining_minutes": int((self._snooze_until - datetime.now()).total_seconds() / 60)
            }
        return {"active": False}
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            # –ë–∞–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            status = {
                "service_running": self.running,
                "alarm_active": self._alarm_active,
                "popup_open": self.alarm_popup is not None,
                "snooze_info": self.get_snooze_info(),
                "last_trigger_time": self._last_trigger_time
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            if hasattr(app, 'alarm_service') and app.alarm_service:
                alarm = app.alarm_service.get_alarm()
                if alarm:
                    status.update({
                        "alarm_enabled": alarm.get("enabled", False),
                        "alarm_time": alarm.get("time", "--:--"),
                        "alarm_days": alarm.get("repeat", []),
                        "ringtone": alarm.get("ringtone", "")
                    })
                else:
                    status.update({
                        "alarm_enabled": False,
                        "alarm_time": "--:--", 
                        "alarm_days": [],
                        "ringtone": ""
                    })
            else:
                status.update({
                    "alarm_enabled": False,
                    "alarm_time": "--:--",
                    "alarm_days": [],
                    "ringtone": ""
                })
            
            return status
            
        except Exception as e:
            logger.error(f"Error getting alarm status: {e}")
            return {
                "service_running": False,
                "alarm_active": False,
                "popup_open": False,
                "alarm_enabled": False,
                "alarm_time": "--:--",
                "alarm_days": [],
                "ringtone": "",
                "snooze_info": {"active": False},
                "last_trigger_time": None,
                "error": str(e)
            }