"""
AlarmClock - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ –∏ –µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- ‚úÖ Thread-safe –¥–æ—Å—Ç—É–ø –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
- ‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–æ
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ popup creation
- ‚úÖ Defensive programming –ø—Ä–æ—Ç–∏–≤ race conditions
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""
import threading
import time
from datetime import datetime, timedelta
from app.logger import app_logger as logger

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
from kivy.app import App
from kivy.clock import Clock


class AlarmClock:
    def __init__(self):
        self.running = False
        self.thread = None
        self.alarm_popup = None
        self._stop_event = threading.Event()
        self._snooze_until = None
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: Thread-safe –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å Lock
        self._lock = threading.RLock()  # –†–µ–µ–Ω—Ç—Ä–∞–Ω—Ç–Ω—ã–π lock –¥–ª—è nested calls
        self._alarm_active = False
        self._last_trigger_time = None
        self._popup_creation_in_progress = False
        
        logger.info("AlarmClock initialized with thread-safe mechanisms")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        with self._lock:
            if self.running:
                logger.warning("AlarmClock already running, ignoring start request")
                return
            
            self.running = True
            self._stop_event.clear()
            self.thread = threading.Thread(target=self._check_alarm_loop, daemon=True, name="AlarmClockThread")
            self.thread.start()
            logger.info("‚úÖ AlarmClock started successfully")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º cleanup"""
        with self._lock:
            if not self.running:
                logger.warning("AlarmClock not running, ignoring stop request")
                return
            
            logger.info("Stopping AlarmClock...")
            self.running = False
            self._stop_event.set()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –í–ù–ï lock'–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å deadlock
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=3.0)
            if self.thread.is_alive():
                logger.warning("AlarmClock thread did not terminate gracefully")
        
        # Cleanup –≤ main thread
        Clock.schedule_once(self._cleanup_on_main_thread, 0)
        
        logger.info("‚úÖ AlarmClock stopped")
    
    def _cleanup_on_main_thread(self, dt):
        """Cleanup –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ main thread"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                app.audio_service.stop()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º popup –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
            if self.alarm_popup:
                try:
                    self.alarm_popup.dismiss()
                except Exception as e:
                    logger.error(f"Error dismissing popup during cleanup: {e}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            with self._lock:
                self._alarm_active = False
                self._snooze_until = None
                self._last_trigger_time = None
                self._popup_creation_in_progress = False
                self.alarm_popup = None
                
        except Exception as e:
            logger.error(f"Error during main thread cleanup: {e}")
    
    def _check_alarm_loop(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        logger.info("Alarm check loop started")
        
        while self.running and not self._stop_event.is_set():
            try:
                current_time = datetime.now()
                current_time_str = current_time.strftime("%H:%M")
                
                # Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                with self._lock:
                    if self._last_trigger_time and self._last_trigger_time != current_time_str:
                        self._last_trigger_time = None
                        logger.debug(f"Reset last trigger time on minute change: {current_time_str}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (snooze)
                snooze_triggered = False
                with self._lock:
                    if self._snooze_until and current_time >= self._snooze_until:
                        self._snooze_until = None
                        snooze_triggered = True
                        logger.info("Snooze time reached, triggering alarm")
                
                if snooze_triggered:
                    self._safe_trigger_alarm_popup()
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
                elif self._should_alarm_trigger():
                    logger.info("Regular alarm trigger condition met")
                    self._safe_trigger_alarm_popup()
                
                # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –¥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                self._stop_event.wait(10)
                
            except Exception as e:
                logger.error(f"Error in alarm loop: {e}")
                import traceback
                logger.error(f"Alarm loop traceback: {traceback.format_exc()}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                self._stop_event.wait(5)
        
        logger.info("Alarm check loop finished")
    
    def _should_alarm_trigger(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            with self._lock:
                if self._alarm_active or self._popup_creation_in_progress:
                    return False
            
            app = App.get_running_app()
            if not hasattr(app, 'alarm_service') or not app.alarm_service:
                return False
            
            alarm = app.alarm_service.get_alarm()
            if not alarm or not alarm.get("enabled", False):
                return False
            
            current_time = datetime.now()
            current_time_str = current_time.strftime("%H:%M")
            alarm_time = alarm.get("time", "07:30")
            
            if current_time_str != alarm_time:
                return False
            
            # Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            with self._lock:
                if self._last_trigger_time == current_time_str:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            repeat_days = alarm.get("repeat", [])
            if repeat_days:
                day_names = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
                current_day = day_names[current_time.weekday()]
                if current_day not in repeat_days:
                    logger.debug(f"Alarm skipped - wrong day: {current_day}, expected: {repeat_days}")
                    return False
            
            logger.info(f"‚úÖ Alarm should trigger: {alarm_time} on {current_time_str}")
            return True
            
        except Exception as e:
            logger.error(f"Error checking alarm trigger conditions: {e}")
            return False
    
    def _safe_trigger_alarm_popup(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô thread-safe –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è popup"""
        try:
            current_time_str = datetime.now().strftime("%H:%M")
            
            # Thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with self._lock:
                if self._alarm_active or self._popup_creation_in_progress:
                    logger.warning("Alarm already active or popup creation in progress")
                    return
                
                self._popup_creation_in_progress = True
                self._last_trigger_time = current_time_str
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            app = App.get_running_app()
            if not hasattr(app, 'alarm_service') or not app.alarm_service:
                logger.error("AlarmService not available")
                with self._lock:
                    self._popup_creation_in_progress = False
                return
            
            alarm = app.alarm_service.get_alarm()
            if not alarm:
                logger.error("No alarm configuration found")
                with self._lock:
                    self._popup_creation_in_progress = False
                return
            
            alarm_time = alarm.get("time", "--:--")
            ringtone = alarm.get("ringtone", "Bathtime In Clerkenwell.mp3")
            
            logger.info(f"üö® Triggering alarm popup: {alarm_time} with ringtone: {ringtone}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ popup –≤ main thread
            Clock.schedule_once(
                lambda dt: self._create_popup_on_main_thread(alarm_time, ringtone), 
                0
            )
            
        except Exception as e:
            logger.error(f"Error in safe trigger alarm popup: {e}")
            with self._lock:
                self._popup_creation_in_progress = False
    
    def _create_popup_on_main_thread(self, alarm_time, ringtone):
        """–°–æ–∑–¥–∞–Ω–∏–µ popup –≤ main thread —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"Creating alarm popup in main thread: {alarm_time}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º popup class
            from services.alarm_popup import AlarmPopup
            
            # –°–æ–∑–¥–∞–µ–º popup
            self.alarm_popup = AlarmPopup(
                alarm_time=alarm_time,
                ringtone=ringtone
            )
            
            # Thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            with self._lock:
                self._alarm_active = True
                self._popup_creation_in_progress = False
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º popup (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫)
            self.alarm_popup.open_alarm()
            
            logger.info("‚úÖ Alarm popup created and opened successfully")
            
        except ImportError as ie:
            logger.error(f"Cannot import AlarmPopup: {ie}")
            self._handle_popup_creation_error()
        except Exception as e:
            logger.error(f"Error creating popup on main thread: {e}")
            import traceback
            logger.error(f"Popup creation traceback: {traceback.format_exc()}")
            self._handle_popup_creation_error()
    
    def _handle_popup_creation_error(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è popup"""
        with self._lock:
            self._alarm_active = False
            self._popup_creation_in_progress = False
            self._last_trigger_time = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –∑–≤—É–∫
        try:
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                if hasattr(app, 'theme_manager') and app.theme_manager:
                    error_sound = app.theme_manager.get_sound("error")
                    if error_sound:
                        app.audio_service.play(error_sound)
        except Exception as sound_error:
            logger.error(f"Cannot even play error sound: {sound_error}")
    
    def _force_stop_alarm_internal(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info("Force stopping alarm...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                app.audio_service.stop()
            
            # Thread-safe —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with self._lock:
                self._alarm_active = False
                self._snooze_until = None
                self._popup_creation_in_progress = False
                
                # –û—á–∏—â–∞–µ–º popup reference
                if self.alarm_popup:
                    try:
                        # Popup –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç –≤ main thread
                        Clock.schedule_once(lambda dt: self._dismiss_popup_safely(), 0)
                    except Exception as e:
                        logger.error(f"Error scheduling popup dismiss: {e}")
                    finally:
                        self.alarm_popup = None
            
            logger.info("‚úÖ Alarm stopped successfully")
            
        except Exception as e:
            logger.error(f"Error force stopping alarm: {e}")
    
    def _dismiss_popup_safely(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ popup –≤ main thread"""
        try:
            if self.alarm_popup:
                self.alarm_popup.dismiss()
                self.alarm_popup = None
        except Exception as e:
            logger.error(f"Error dismissing popup safely: {e}")
    
    # ========================================
    # –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ API
    # ========================================
    
    def stop_alarm(self):
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        self._force_stop_alarm_internal()
    
    def snooze_alarm(self, minutes=5):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è"""
        try:
            logger.info(f"Snoozing alarm for {minutes} minutes")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É–¥–∏–ª—å–Ω–∏–∫
            self._force_stop_alarm_internal()
            
            # Thread-safe —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–≤—Ç–æ—Ä–∞
            with self._lock:
                self._snooze_until = datetime.now() + timedelta(minutes=minutes)
                self._last_trigger_time = None  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            
            logger.info(f"‚úÖ Alarm snoozed until {self._snooze_until.strftime('%H:%M')}")
            
        except Exception as e:
            logger.error(f"Error snoozing alarm: {e}")
    
    def trigger_alarm(self, ringtone="Bathtime In Clerkenwell.mp3", fadein=False):
        """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info(f"Manual alarm trigger: {ringtone}, fadein={fadein}")
            
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                import os
                ringtone_path = os.path.join("media", "ringtones", ringtone)
                
                if os.path.exists(ringtone_path):
                    fadein_time = 2.0 if fadein else 0
                    app.audio_service.play(ringtone_path, fadein=fadein_time)
                    logger.info("‚úÖ Manual alarm triggered successfully")
                else:
                    logger.error(f"Ringtone file not found: {ringtone_path}")
            else:
                logger.error("AudioService not available for manual trigger")
                
        except Exception as e:
            logger.error(f"Error triggering manual alarm: {e}")
    
    def is_alarm_active(self):
        """Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        with self._lock:
            return self._alarm_active
    
    def get_snooze_info(self):
        """Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ snooze"""
        with self._lock:
            if self._snooze_until:
                remaining_seconds = (self._snooze_until - datetime.now()).total_seconds()
                return {
                    "active": True,
                    "until": self._snooze_until.isoformat(),
                    "remaining_minutes": max(0, int(remaining_seconds / 60))
                }
            return {"active": False}
    
    def get_status(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å thread-safety"""
        try:
            app = App.get_running_app()
            
            # Thread-safe –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            with self._lock:
                status = {
                    "service_running": self.running,
                    "alarm_active": self._alarm_active,
                    "popup_open": self.alarm_popup is not None,
                    "popup_creation_in_progress": self._popup_creation_in_progress,
                    "snooze_info": self.get_snooze_info(),
                    "last_trigger_time": self._last_trigger_time,
                    "thread_alive": self.thread.is_alive() if self.thread else False
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            if hasattr(app, 'alarm_service') and app.alarm_service:
                alarm = app.alarm_service.get_alarm()
                if alarm:
                    status.update({
                        "alarm_enabled": alarm.get("enabled", False),
                        "alarm_time": alarm.get("time", "--:--"),
                        "alarm_days": alarm.get("repeat", []),
                        "ringtone": alarm.get("ringtone", "")
                    })
                else:
                    status.update({
                        "alarm_enabled": False,
                        "alarm_time": "--:--", 
                        "alarm_days": [],
                        "ringtone": ""
                    })
            else:
                status.update({
                    "alarm_enabled": False,
                    "alarm_time": "--:--",
                    "alarm_days": [],
                    "ringtone": ""
                })
            
            return status
            
        except Exception as e:
            logger.error(f"Error getting alarm status: {e}")
            return {
                "service_running": False,
                "alarm_active": False,
                "popup_open": False,
                "popup_creation_in_progress": False,
                "alarm_enabled": False,
                "alarm_time": "--:--",
                "alarm_days": [],
                "ringtone": "",
                "snooze_info": {"active": False},
                "last_trigger_time": None,
                "thread_alive": False,
                "error": str(e)
            }