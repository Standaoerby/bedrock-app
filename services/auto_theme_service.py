# services/auto_theme_service.py
# –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ –æ—à–∏–±–æ–∫ –º–µ—Ç–æ–¥–æ–≤

#!/usr/bin/env python3

import threading
import time
from app.logger import app_logger as logger
from app.event_bus import event_bus
from kivy.app import App
from kivy.clock import Clock


class AutoThemeService:
    """
    –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
    –í–µ—Ä—Å–∏—è 2.0.2 - –§–ò–ù–ê–õ–¨–ù–ê–Ø –±–µ–∑ –æ—à–∏–±–æ–∫ –º–µ—Ç–æ–¥–æ–≤
    """
    
    def __init__(self, sensor_service, theme_manager):
        self.sensor_service = sensor_service
        self.theme_manager = theme_manager
        self.enabled = False
        self.running = False
        self.threshold_seconds = 3
        self.calibration_time = 3
        self.check_thread = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
        self.current_light_state = None
        self.state_start_time = None
        self.state_stable = False
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread safety
        self._lock = threading.RLock()
        
        logger.info("AutoThemeService v2.0.2 initialized - final version")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.running:
            return
            
        self.running = True
        self.check_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.check_thread.start()
        logger.info("AutoThemeService started")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        if self.check_thread:
            self.check_thread.join(timeout=1)
        logger.info("AutoThemeService stopped")
        
    def set_enabled(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        with self._lock:
            old_enabled = self.enabled
            self.enabled = enabled
            
            if old_enabled != enabled:
                logger.info(f"AutoTheme {'enabled' if enabled else 'disabled'}")
                
    def calibrate_sensor(self, threshold_seconds=3):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            if not self.sensor_service:
                logger.error("Sensor service not available")
                return False
                
            logger.info(f"Calibrating light sensor for {threshold_seconds} seconds...")
            return self.sensor_service.calibrate_light_sensor(threshold_seconds)
            
        except Exception as e:
            logger.error(f"Error calibrating sensor: {e}")
            return False

    def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if not self.enabled:
                return
                
            self._check_light_and_switch()

    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        with self._lock:
            try:
                sensor_available = hasattr(self.sensor_service, 'get_light_level') if self.sensor_service else False
                return {
                    'enabled': self.enabled,
                    'running': self.running,
                    'sensor_available': sensor_available,
                    'current_light': self.current_light_state,
                    'threshold_seconds': self.threshold_seconds
                }
            except Exception as e:
                logger.error(f"Error getting status: {e}")
                return {'enabled': False, 'running': False, 'sensor_available': False}

    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                if self.enabled:
                    self._check_light_and_switch()
                time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            except Exception as e:
                logger.error(f"Error in monitor loop: {e}")
                time.sleep(5)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _check_light_and_switch(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        try:
            is_bright = self.sensor_service.get_light_level()
            
            if self.current_light_state != is_bright:
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                self.current_light_state = is_bright
                self.state_start_time = time.time()
                self.state_stable = False
                return False
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ
            if not self.state_stable and self.state_start_time:
                elapsed = time.time() - self.state_start_time
                if elapsed >= self.threshold_seconds:
                    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ
                    self.state_stable = True
                    variant = "light" if is_bright else "dark"
                    self._switch_theme(variant)
                    return True
                    
            self.state_stable = False
                
        except Exception as e:
            logger.error(f"Error checking light level: {e}")
            return False
            
        return False
            
    def _switch_theme(self, variant):
        """Thread-safe –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ Kivy"""
        try:
            Clock.schedule_once(lambda dt: self._do_switch_theme_on_main_thread(variant), 0)
                
        except Exception as e:
            logger.error(f"Error scheduling theme switch: {e}")
            
    def _do_switch_theme_on_main_thread(self, variant):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        logger.info(f"üé® Theme switch with screen recreation: {variant}")
        
        try:
            app = App.get_running_app()
            if not app or not hasattr(app, 'theme_manager') or not app.theme_manager:
                logger.error("‚ùå App or ThemeManager not available")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            current_theme = getattr(app.theme_manager, 'theme_name', 'minecraft')
            current_variant = getattr(app.theme_manager, 'variant', 'light')
            current_screen = "home"
            
            if not hasattr(app, 'root') or not app.root:
                logger.error("‚ùå App.root not available")
                return
            
            logger.debug(f"üìã App.root type: {type(app.root).__name__}")
            
            # –ü–æ–∏—Å–∫ ScreenManager
            screen_manager = self._find_screen_manager(app)
            if not screen_manager:
                logger.error("‚ùå ScreenManager not found anywhere!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            try:
                current_screen = screen_manager.current
                logger.info(f"üìã Current screen before switch: {current_screen}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not get current screen: {e}")
                current_screen = "home"
                
            if current_variant == variant:
                logger.info(f"‚è≠Ô∏è Theme already {variant}")
                return
            
            logger.info(f"üîÑ Switching {current_theme}: {current_variant} ‚Üí {variant} (screen: {current_screen})")
            
            # 1. –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ load()
            success = app.theme_manager.load(current_theme, variant)
                
            if not success:
                logger.error(f"‚ùå Failed to load theme")
                return
            
            logger.info(f"‚úÖ Theme loaded: {current_theme}/{variant}")
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
            if hasattr(app, 'user_config') and app.user_config:
                app.user_config.set('variant', variant)
            
            # 3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —ç–∫—Ä–∞–Ω—ã
            self._recreate_screens_simple(app, screen_manager, current_screen)
            
            # 4. –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_bus.publish("theme_changed", {
                "theme": current_theme,
                "variant": variant,
                "source": "auto_theme_recreation"
            })
            
            logger.info(f"üéâ Theme recreation completed: {current_theme}/{variant}")
            
        except Exception as e:
            logger.error(f"‚ùå Error in theme recreation: {e}")
            import traceback
            logger.error(traceback.format_exc())

    def _find_screen_manager(self, app):
        """–ü–æ–∏—Å–∫ ScreenManager"""
        logger.debug("üîç Searching for ScreenManager...")
        
        # –ú–µ—Ç–æ–¥ 1: app.root.screen_manager
        if hasattr(app.root, 'screen_manager') and app.root.screen_manager:
            logger.debug("‚úÖ Found via app.root.screen_manager")
            return app.root.screen_manager
        
        # –ú–µ—Ç–æ–¥ 2: app.root.ids.sm  
        if hasattr(app.root, 'ids') and hasattr(app.root.ids, 'sm'):
            logger.debug("‚úÖ Found via app.root.ids.sm")
            return app.root.ids.sm
        
        # –ú–µ—Ç–æ–¥ 3: app.root.ids['sm']
        if hasattr(app.root, 'ids') and 'sm' in app.root.ids:
            logger.debug("‚úÖ Found via app.root.ids['sm']")
            return app.root.ids['sm']
        
        # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É –≤–∏–¥–∂–µ—Ç–æ–≤
        if hasattr(app.root, 'walk'):
            for widget in app.root.walk():
                if widget.__class__.__name__ == 'ScreenManager':
                    logger.debug("‚úÖ Found via widget tree walk")
                    return widget
        
        logger.warning("‚ùå ScreenManager not found in any location")
        return None

    def _recreate_screens_simple(self, app, screen_manager, restore_screen="home"):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ + TopMenu"""
        try:
            logger.info("üîÑ Recreating screens and TopMenu...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —ç–∫—Ä–∞–Ω–æ–≤
            from pages.home import HomeScreen
            from pages.alarm import AlarmScreen  
            from pages.schedule import ScheduleScreen
            from pages.weather import WeatherScreen
            from pages.pigs import PigsScreen
            from pages.settings import SettingsScreen
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫—Ä–∞–Ω—ã
            screen_manager.clear_widgets()
            logger.debug("üóëÔ∏è Old screens cleared")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã
            screens = [
                HomeScreen(name="home"),
                AlarmScreen(name="alarm"),
                ScheduleScreen(name="schedule"), 
                WeatherScreen(name="weather"),
                PigsScreen(name="pigs"),
                SettingsScreen(name="settings")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã
            for screen in screens:
                screen_manager.add_widget(screen)
                logger.debug(f"‚úÖ Created new {screen.name} screen")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            screen_manager.current = restore_screen
            app.root.current_page = restore_screen
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TopMenu
            top_menu = None
            if hasattr(app.root, 'ids') and 'topmenu' in app.root.ids:
                top_menu = app.root.ids.topmenu
            elif hasattr(app.root, 'ids') and 'top_menu' in app.root.ids:
                top_menu = app.root.ids.top_menu
            
            if top_menu:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                top_menu.current_page = restore_screen
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É TopMenu (–º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç!)
                if hasattr(top_menu, 'force_complete_refresh'):
                    top_menu.force_complete_refresh()
                    logger.debug("‚úÖ TopMenu force refreshed")
                elif hasattr(top_menu, 'refresh_theme'):
                    top_menu.refresh_theme()
                    logger.debug("‚úÖ TopMenu theme refreshed")
                
                logger.debug("‚úÖ TopMenu fully updated")
            else:
                logger.warning("‚ö†Ô∏è TopMenu not found for update")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º overlay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!)
            if hasattr(app.root, '_update_overlay'):
                app.root._update_overlay()
                logger.debug("‚úÖ Overlay updated")
            
            logger.info(f"üéâ Screens + TopMenu recreated! Current: {restore_screen}")
            
        except Exception as e:
            logger.error(f"‚ùå Screen recreation failed: {e}")
            import traceback
            logger.error(traceback.format_exc())

    def debug_screen_manager(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ScreenManager"""
        try:
            app = App.get_running_app()
            if not app or not app.root:
                logger.info("‚ùå No app or root widget")
                return
            
            logger.info("üîß === SCREEN MANAGER + TOPMENU DEBUG ===")
            logger.info(f"üìã app.root type: {type(app.root).__name__}")
            logger.info(f"üìã app.root.screen_manager: {getattr(app.root, 'screen_manager', 'NOT_FOUND')}")
            
            if hasattr(app.root, 'ids'):
                logger.info(f"üìã app.root.ids: {list(app.root.ids.keys())}")
                
                # ScreenManager info
                if 'sm' in app.root.ids:
                    sm = app.root.ids.sm
                    logger.info(f"üìã sm type: {type(sm).__name__}")
                    logger.info(f"üìã sm.screen_names: {list(sm.screen_names) if hasattr(sm, 'screen_names') else 'NO_SCREENS'}")
                    logger.info(f"üìã sm.current: {getattr(sm, 'current', 'NO_CURRENT')}")
                
                # TopMenu info
                if 'topmenu' in app.root.ids:
                    tm = app.root.ids.topmenu
                    logger.info(f"üìã topmenu type: {type(tm).__name__}")
                    logger.info(f"üìã topmenu.current_page: {getattr(tm, 'current_page', 'NO_CURRENT_PAGE')}")
                    logger.info(f"üìã topmenu.height: {getattr(tm, 'height', 'NO_HEIGHT')}")
                else:
                    logger.info(f"üìã topmenu: NOT_FOUND")
            
            logger.info("üîß ===========================================")
            
        except Exception as e:
            logger.error(f"Debug failed: {e}")

    def test_recreation(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤ + TopMenu"""
        try:
            app = App.get_running_app()
            logger.info("üß™ Testing screen + TopMenu recreation...")
            
            screen_manager = self._find_screen_manager(app)
            if screen_manager:
                current = getattr(screen_manager, 'current', 'home')
                self._recreate_screens_simple(app, screen_manager, current)
                logger.info("‚úÖ Recreation test completed")
            else:
                logger.error("‚ùå Cannot test - ScreenManager not found")
                
        except Exception as e:
            logger.error(f"‚ùå Recreation test failed: {e}")


# –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è
def validate_auto_theme_service_module():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è AutoThemeService –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        class MockSensorService:
            def get_light_level(self):
                return True
            def calibrate_light_sensor(self, threshold=3):
                return 0.8
                
        class MockThemeManager:
            def load(self, theme, variant):  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–æ–ª—å–∫–æ load()!
                return True
            theme_name = "minecraft"
            variant = "light"
        
        service = AutoThemeService(MockSensorService(), MockThemeManager())
        assert hasattr(service, 'calibrate_sensor'), "calibrate_sensor method missing"
        assert hasattr(service, 'force_check'), "force_check method missing"
        assert hasattr(service, 'set_enabled'), "set_enabled method missing"
        assert hasattr(service, 'get_status'), "get_status method missing"
        print("‚úÖ AutoThemeService v2.0.2 module validation passed")
        return True
    except Exception as e:
        print(f"‚ùå AutoThemeService module validation failed: {e}")
        return False

# –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == "__main__":
    validate_auto_theme_service_module()