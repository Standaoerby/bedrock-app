#!/usr/bin/env python3

import threading
import time
from app.logger import app_logger as logger
from app.event_bus import event_bus
from kivy.app import App
from kivy.clock import Clock


class AutoThemeService:
    """
    –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
    –í–µ—Ä—Å–∏—è 2.0.0 - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º —ç–∫—Ä–∞–Ω–æ–≤
    """
    
    def __init__(self, sensor_service, theme_manager):
        self.sensor_service = sensor_service
        self.theme_manager = theme_manager
        self.enabled = False
        self.running = False
        self.threshold_seconds = 3  # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        self.calibration_time = 3   # –í—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.check_thread = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
        self.current_light_state = None  # True = —Å–≤–µ—Ç–ª–æ, False = —Ç–µ–º–Ω–æ
        self.state_start_time = None
        self.state_stable = False
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread safety
        self._lock = threading.RLock()
        
        logger.info("AutoThemeService v2.0.0 initialized with screen recreation")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.running:
            return
            
        self.running = True
        self.check_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.check_thread.start()
        logger.info("AutoThemeService started")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        if self.check_thread:
            self.check_thread.join(timeout=1)
        logger.info("AutoThemeService stopped")
        
    def set_enabled(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        with self._lock:
            old_enabled = self.enabled
            self.enabled = enabled
            
            if old_enabled != enabled:
                logger.info(f"Auto-theme {'enabled' if enabled else 'disabled'}")
            
    def is_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å"""
        with self._lock:
            return self.enabled
            
    def calibrate_sensor(self, threshold_seconds=None):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        with self._lock:
            if threshold_seconds is not None:
                self.threshold_seconds = max(1, min(threshold_seconds, 10))
                self.calibration_time = self.threshold_seconds
            
            self._calibrate_sensor()
            
    def _calibrate_sensor(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞"""
        try:
            if hasattr(self.sensor_service, 'calibrate_light_sensor'):
                confidence = self.sensor_service.calibrate_light_sensor(self.threshold_seconds)
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                self.current_light_state = None
                self.state_start_time = None
                self.state_stable = False
                
                logger.info(f"Auto-theme calibrated: {self.threshold_seconds}s threshold, confidence: {confidence:.2f}")
            else:
                logger.warning("Sensor service doesn't support light calibration")
                
        except Exception as e:
            logger.error(f"Error calibrating light sensor: {e}")
            
    def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        with self._lock:
            if not self.enabled:
                return
                
            self._check_light_level()
            
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        with self._lock:
            try:
                sensor_available = hasattr(self.sensor_service, 'get_light_level') if self.sensor_service else False
                current_light = self.sensor_service.get_light_level() if sensor_available else True
                using_mock = getattr(self.sensor_service, 'using_mock_sensors', True) if self.sensor_service else True
                
                return {
                    "enabled": self.enabled,
                    "running": self.running,
                    "sensor_available": sensor_available,
                    "service_running": self.running,
                    "current_light": current_light,
                    "using_mock": using_mock,
                    "threshold_seconds": self.threshold_seconds,
                    "current_state": self.current_light_state,
                    "state_stable": self.state_stable
                }
            except Exception as e:
                logger.error(f"Error getting AutoTheme status: {e}")
                return {
                    "enabled": self.enabled,
                    "running": self.running,
                    "sensor_available": False,
                    "error": str(e)
                }
            
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                if self.enabled:
                    self._check_light_level()
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"Error in auto-theme monitor loop: {e}")
                time.sleep(1)
                
    def _check_light_level(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        try:
            is_light = self.sensor_service.get_light_level()
            current_time = time.time()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if self.current_light_state is None:
                self.current_light_state = is_light
                logger.info(f"üîÑ Auto-theme initialized: {'Light' if is_light else 'Dark'} mode detected")
                return False
            
            # –õ–æ–≥–∏–∫–∞ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
            if is_light != self.current_light_state:
                # –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
                if self.state_start_time is None:
                    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                    self.state_start_time = current_time
                    self.state_stable = False
                    logger.info(f"Light state changed to {'light' if is_light else 'dark'}, starting timer")
                    
                elif current_time - self.state_start_time >= self.threshold_seconds:
                    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    if not self.state_stable:
                        self.state_stable = True
                        self.current_light_state = is_light
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
                        new_variant = "light" if is_light else "dark"
                        self._switch_theme(new_variant)
                        
                        confidence = 1.00 if current_time - self.state_start_time >= self.threshold_seconds else 0.75
                        logger.info(f"üåì Auto-theme: {'Dark‚ÜíLight' if is_light else 'Light‚ÜíDark'} (confidence: {confidence:.2f}) ‚Üí {new_variant} theme")
                        
                        return True
                        
            else:
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if self.state_start_time is not None:
                    logger.info("Light state returned to previous - resetting timer")
                self.state_start_time = None
                self.state_stable = False
                
        except Exception as e:
            logger.error(f"Error checking light level: {e}")
            return False
            
        return False
            
    def _switch_theme(self, variant):
        """Thread-safe –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ Kivy"""
        try:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å UI –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ Clock.schedule_once
            Clock.schedule_once(lambda dt: self._do_switch_theme_on_main_thread(variant), 0)
                
        except Exception as e:
            logger.error(f"Error scheduling theme switch: {e}")
            
    def _do_switch_theme_on_main_thread(self, variant):
        """üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤"""
        logger.info(f"üé® Theme switch with screen recreation: {variant}")
        
        try:
            app = App.get_running_app()
            if not app or not hasattr(app, 'theme_manager') or not app.theme_manager:
                logger.error("‚ùå App or ThemeManager not available")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            current_theme = getattr(app.theme_manager, 'current_theme', 'minecraft')
            current_variant = getattr(app.theme_manager, 'current_variant', 'light')
            current_screen = "home"  # –¥–µ—Ñ–æ–ª—Ç
            
            # üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ root widget
            if not hasattr(app, 'root') or not app.root:
                logger.error("‚ùå App.root not available")
                return
            
            logger.debug(f"üìã App.root type: {type(app.root).__name__}")
            
            # üîß –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö ScreenManager
            screen_manager = self._find_screen_manager(app)
            if not screen_manager:
                logger.error("‚ùå ScreenManager not found anywhere!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            try:
                current_screen = screen_manager.current
                logger.info(f"üìã Current screen before switch: {current_screen}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not get current screen: {e}")
                current_screen = "home"
                
            if current_variant == variant:
                logger.info(f"‚è≠Ô∏è Theme already {variant}")
                return
            
            logger.info(f"üîÑ Switching {current_theme}: {current_variant} ‚Üí {variant} (screen: {current_screen})")
            
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            success = False
            if hasattr(app.theme_manager, 'load_theme'):
                success = app.theme_manager.load_theme(current_theme, variant)
            elif hasattr(app.theme_manager, 'load'):
                success = app.theme_manager.load(current_theme, variant)
                
            if not success:
                logger.error(f"‚ùå Failed to load theme")
                return
            
            logger.info(f"‚úÖ Theme loaded: {current_theme}/{variant}")
            
            # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
            if hasattr(app, 'user_config') and app.user_config:
                app.user_config.set('variant', variant)
            
            # 3. üöÄ –ü–ï–†–ï–°–û–ó–î–ê–ï–ú –≠–ö–†–ê–ù–´
            self._recreate_screens_simple(app, screen_manager, current_screen)
            
            # 4. –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è TopMenu –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
            from app.event_bus import event_bus
            event_bus.publish("theme_changed", {
                "theme": current_theme,
                "variant": variant,
                "source": "auto_theme_recreation"
            })
            
            logger.info(f"üéâ Theme recreation completed: {current_theme}/{variant}")
            
        except Exception as e:
            logger.error(f"‚ùå Error in theme recreation: {e}")
            import traceback
            logger.error(traceback.format_exc())

    def _find_screen_manager(self, app):
        """üîß –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ ScreenManager —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        logger.debug("üîç Searching for ScreenManager...")
        
        # –ú–µ—Ç–æ–¥ 1: app.root.screen_manager
        if hasattr(app.root, 'screen_manager') and app.root.screen_manager:
            logger.debug("‚úÖ Found via app.root.screen_manager")
            return app.root.screen_manager
        
        # –ú–µ—Ç–æ–¥ 2: app.root.ids.sm  
        if hasattr(app.root, 'ids') and hasattr(app.root.ids, 'sm'):
            logger.debug("‚úÖ Found via app.root.ids.sm")
            return app.root.ids.sm
        
        # –ú–µ—Ç–æ–¥ 3: app.root.ids['sm']
        if hasattr(app.root, 'ids') and 'sm' in app.root.ids:
            logger.debug("‚úÖ Found via app.root.ids['sm']")
            return app.root.ids['sm']
        
        # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É –≤–∏–¥–∂–µ—Ç–æ–≤
        if hasattr(app.root, 'walk'):
            for widget in app.root.walk():
                if widget.__class__.__name__ == 'ScreenManager':
                    logger.debug("‚úÖ Found via widget tree walk")
                    return widget
        
        # üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–≤–æ–¥–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ app.root
        logger.debug(f"üìã app.root attributes: {[attr for attr in dir(app.root) if not attr.startswith('_')]}")
        
        if hasattr(app.root, 'ids'):
            logger.debug(f"üìã app.root.ids keys: {list(app.root.ids.keys()) if app.root.ids else 'No ids'}")
        
        logger.warning("‚ùå ScreenManager not found in any location")
        return None

    def _recreate_screens_simple(self, app, screen_manager, restore_screen="home"):
        """üöÄ –ü–†–û–°–¢–û–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤ + TopMenu"""
        try:
            logger.info("üîÑ Recreating screens and TopMenu...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —ç–∫—Ä–∞–Ω–æ–≤
            from pages.home import HomeScreen
            from pages.alarm import AlarmScreen  
            from pages.schedule import ScheduleScreen
            from pages.weather import WeatherScreen
            from pages.pigs import PigsScreen
            from pages.settings import SettingsScreen
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–∫—Ä–∞–Ω—ã
            screen_manager.clear_widgets()
            logger.debug("üóëÔ∏è Old screens cleared")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã (–æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É)
            screens = [
                HomeScreen(name="home"),
                AlarmScreen(name="alarm"),
                ScheduleScreen(name="schedule"), 
                WeatherScreen(name="weather"),
                PigsScreen(name="pigs"),
                SettingsScreen(name="settings")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–∫—Ä–∞–Ω—ã
            for screen in screens:
                screen_manager.add_widget(screen)
                logger.debug(f"‚úÖ Created new {screen.name} screen")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
            screen_manager.current = restore_screen
            app.root.current_page = restore_screen
            
            # üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ TopMenu
            top_menu = None
            if hasattr(app.root, 'ids') and 'topmenu' in app.root.ids:
                top_menu = app.root.ids.topmenu
            elif hasattr(app.root, 'ids') and 'top_menu' in app.root.ids:
                top_menu = app.root.ids.top_menu
            
            if top_menu:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                top_menu.current_page = restore_screen
                
                # üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É TopMenu
                if hasattr(top_menu, 'force_complete_refresh'):
                    top_menu.force_complete_refresh()
                    logger.debug("‚úÖ TopMenu force refreshed")
                elif hasattr(top_menu, 'refresh_theme'):
                    top_menu.refresh_theme()
                    logger.debug("‚úÖ TopMenu theme refreshed")
                
                logger.debug("‚úÖ TopMenu fully updated")
            else:
                logger.warning("‚ö†Ô∏è TopMenu not found for update")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º overlay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(app.root, '_update_overlay'):
                app.root._update_overlay()
                logger.debug("‚úÖ Overlay updated")
            
            logger.info(f"üéâ Screens + TopMenu recreated! Current: {restore_screen}")
            
        except Exception as e:
            logger.error(f"‚ùå Screen recreation failed: {e}")
            import traceback
            logger.error(traceback.format_exc())

    def _recreate_top_menu_simple(self, app, current_screen):
        """üöÄ –ü–†–û–°–¢–û–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ TopMenu —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º–æ–π"""
        try:
            logger.debug("üîÑ Recreating TopMenu...")
            
            if not hasattr(app.root, 'ids') or 'topmenu' not in app.root.ids:
                logger.warning("‚ö†Ô∏è TopMenu not found in root.ids")
                return
            
            old_top_menu = app.root.ids.topmenu
            parent_container = old_top_menu.parent
            
            if not parent_container:
                logger.warning("‚ö†Ô∏è TopMenu parent not found")
                return
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            old_index = parent_container.children.index(old_top_menu)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π TopMenu
            parent_container.remove_widget(old_top_menu)
            logger.debug("üóëÔ∏è Old TopMenu removed")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π TopMenu (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É!)
            from widgets.top_menu import TopMenu
            new_top_menu = TopMenu()
            new_top_menu.current_page = current_screen
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º—ã
            tm = app.theme_manager
            if tm:
                new_top_menu.size_hint_y = None
                new_top_menu.height = tm.get_param("menu_height") or 56
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é
            parent_container.add_widget(new_top_menu, index=old_index)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ ids
            app.root.ids.topmenu = new_top_menu
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —è–∑—ã–∫–µ
            if hasattr(new_top_menu, 'refresh_text'):
                new_top_menu.refresh_text()
            
            logger.info("üéâ TopMenu recreated with new theme!")
            
        except Exception as e:
            logger.error(f"‚ùå TopMenu recreation failed: {e}")
            import traceback
            logger.error(traceback.format_exc())

    def debug_screen_manager(self):
        """üîß –û–¢–õ–ê–î–ö–ê: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ScreenManager"""
        try:
            app = App.get_running_app()
            if not app or not app.root:
                logger.info("‚ùå No app or root widget")
                return
            
            logger.info("üîß === SCREEN MANAGER + TOPMENU DEBUG ===")
            logger.info(f"üìã app.root type: {type(app.root).__name__}")
            logger.info(f"üìã app.root.screen_manager: {getattr(app.root, 'screen_manager', 'NOT_FOUND')}")
            
            if hasattr(app.root, 'ids'):
                logger.info(f"üìã app.root.ids: {list(app.root.ids.keys())}")
                
                # ScreenManager info
                if 'sm' in app.root.ids:
                    sm = app.root.ids.sm
                    logger.info(f"üìã sm type: {type(sm).__name__}")
                    logger.info(f"üìã sm.screen_names: {list(sm.screen_names) if hasattr(sm, 'screen_names') else 'NO_SCREENS'}")
                    logger.info(f"üìã sm.current: {getattr(sm, 'current', 'NO_CURRENT')}")
                
                # TopMenu info
                if 'topmenu' in app.root.ids:
                    tm = app.root.ids.topmenu
                    logger.info(f"üìã topmenu type: {type(tm).__name__}")
                    logger.info(f"üìã topmenu.current_page: {getattr(tm, 'current_page', 'NO_CURRENT_PAGE')}")
                    logger.info(f"üìã topmenu.height: {getattr(tm, 'height', 'NO_HEIGHT')}")
                else:
                    logger.info(f"üìã topmenu: NOT_FOUND")
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ walk
            screen_managers = []
            if hasattr(app.root, 'walk'):
                for widget in app.root.walk():
                    if 'ScreenManager' in widget.__class__.__name__:
                        screen_managers.append(widget)
            
            logger.info(f"üìã Found ScreenManagers via walk: {len(screen_managers)}")
            logger.info("üîß ===========================================")
            
        except Exception as e:
            logger.error(f"Debug failed: {e}")

    def test_recreation(self):
        """üß™ –¢–ï–°–¢: –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–æ–≤ + TopMenu"""
        try:
            app = App.get_running_app()
            logger.info("üß™ Testing screen + TopMenu recreation...")
            
            screen_manager = self._find_screen_manager(app)
            if screen_manager:
                current = getattr(screen_manager, 'current', 'home')
                self._recreate_screens_simple(app, screen_manager, current)
                logger.info("‚úÖ Recreation test completed")
            else:
                logger.error("‚ùå Cannot test - ScreenManager not found")
                
        except Exception as e:
            logger.error(f"‚ùå Recreation test failed: {e}")


# –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è
def validate_auto_theme_service_module():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è AutoThemeService –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        class MockSensorService:
            def get_light_level(self):
                return True
            def calibrate_light_sensor(self, threshold=3):
                return 0.8
                
        class MockThemeManager:
            def load_theme(self, theme, variant):
                return True
            def load(self, theme, variant):
                return True
            current_theme = "minecraft"
            current_variant = "light"
        
        service = AutoThemeService(MockSensorService(), MockThemeManager())
        assert hasattr(service, 'calibrate_sensor'), "calibrate_sensor method missing"
        assert hasattr(service, '_find_screen_manager'), "_find_screen_manager method missing"
        assert hasattr(service, '_recreate_screens_simple'), "_recreate_screens_simple method missing"
        assert hasattr(service, '_recreate_top_menu_simple'), "_recreate_top_menu_simple method missing"
        assert hasattr(service, 'debug_screen_manager'), "debug_screen_manager method missing"
        print("‚úÖ AutoThemeService v2.0.0 module validation passed")
        return True
    except Exception as e:
        print(f"‚ùå AutoThemeService module validation failed: {e}")
        return False

# –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == "__main__":
    validate_auto_theme_service_module()