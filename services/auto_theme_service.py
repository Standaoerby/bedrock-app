#!/usr/bin/env python3

import threading
import time
from app.logger import app_logger as logger
from app.event_bus import event_bus
from kivy.app import App
from kivy.clock import Clock



class AutoThemeService:
    """
    –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
    –í–µ—Ä—Å–∏—è 1.1.0 - –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ check_and_update_theme
    """
    
    def __init__(self, sensor_service, theme_manager):
        self.sensor_service = sensor_service
        self.theme_manager = theme_manager
        self.enabled = False
        self.running = False
        self.threshold_seconds = 3  # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        self.calibration_time = 3   # –í—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.check_thread = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
        self.current_light_state = None  # True = —Å–≤–µ—Ç–ª–æ, False = —Ç–µ–º–Ω–æ
        self.state_start_time = None
        self.state_stable = False
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread safety
        self._lock = threading.RLock()
        
        logger.info("AutoThemeService initialized")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.running:
            return
            
        self.running = True
        self.check_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.check_thread.start()
        logger.info("AutoThemeService started")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        if self.check_thread:
            self.check_thread.join(timeout=1)
        logger.info("AutoThemeService stopped")
        
    def set_enabled(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        with self._lock:
            self.enabled = enabled
            if enabled:
                self._calibrate_sensor()
            logger.info(f"Auto-theme {'enabled' if enabled else 'disabled'}")
            
    def is_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å"""
        with self._lock:
            return self.enabled
            
    def calibrate(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        if self.enabled:
            self._calibrate_sensor()
            
    def _calibrate_sensor(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            if hasattr(self.sensor_service, 'calibrate_light_sensor'):
                confidence = self.sensor_service.calibrate_light_sensor()
                logger.info(f"[Light sensor calibrated] {self.calibration_time}s, confidence: {confidence}")
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                self.current_light_state = None
                self.state_start_time = None
                self.state_stable = False
                
                logger.info(f"[Auto-theme sensor calibrated] {self.threshold_seconds}s threshold")
            else:
                logger.warning("Sensor service doesn't support light calibration")
                
        except Exception as e:
            logger.error(f"Error calibrating light sensor: {e}")
            
    def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        logger.info("üîç Force checking light sensor for auto-theme...")
        
        with self._lock:
            if not self.enabled:
                logger.info("Auto-theme is disabled")
                return
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            self._check_light_level()
            
    def check_and_update_theme(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã - –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ UI"""
        with self._lock:
            if not self.enabled:
                return False
                
            return self._check_light_level()
            
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                if self.enabled:
                    self._check_light_level()
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"Error in auto-theme monitor loop: {e}")
                time.sleep(1)
                
    def _check_light_level(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–µ—Ç–∞
            is_light = self.sensor_service.is_light_detected()
            current_time = time.time()
            
            # –õ–æ–≥–∏–∫–∞ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
            if is_light != self.current_light_state:
                # –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
                if self.state_start_time is None:
                    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                    self.state_start_time = current_time
                    self.state_stable = False
                    logger.debug(f"Light state changed to {'light' if is_light else 'dark'}, starting timer")
                    
                elif current_time - self.state_start_time >= self.threshold_seconds:
                    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    if not self.state_stable:
                        self.state_stable = True
                        self.current_light_state = is_light
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
                        new_theme = "light" if is_light else "dark"
                        self._switch_theme(new_theme)
                        logger.info(f"üîç Light change detected and stable - switched to {new_theme} theme")
                        return True
                        
            else:
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if self.state_start_time is not None:
                    logger.debug("Light state returned to previous - resetting timer")
                self.state_start_time = None
                self.state_stable = False
                
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã
            if not self.state_stable:
                logger.debug("üîç No light change detected")
                
        except Exception as e:
            logger.error(f"Error checking light level: {e}")
            
        return False
        
    def _switch_theme(self, theme_type):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ Kivy"""
        try:
            app = App.get_running_app()
            if app and self.theme_manager:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Kivy
                Clock.schedule_once(lambda dt: self._do_switch_theme(theme_type), 0)
                
        except Exception as e:
            logger.error(f"Error switching theme: {e}")
            
    def _do_switch_theme(self, theme_type):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
            current_theme = self.theme_manager.get_current_theme()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–º–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
            if current_theme != f"minecraft/{theme_type}":
                self.theme_manager.load_theme("minecraft", theme_type)
                logger.info(f"[Auto-theme] Switched to {theme_type} theme")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
                app = App.get_running_app()
                if app and hasattr(app, 'root') and app.root:
                    if hasattr(app.root, 'current_screen'):
                        screen = app.root.current_screen
                        if hasattr(screen, 'refresh_theme'):
                            screen.refresh_theme()
                            
        except Exception as e:
            logger.error(f"Error in theme switch: {e}")
            
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        with self._lock:
            return {
                'enabled': self.enabled,
                'running': self.running,
                'current_light_state': 'light' if self.current_light_state else 'dark' if self.current_light_state is not None else 'unknown',
                'threshold_seconds': self.threshold_seconds,
                'state_stable': self.state_stable,
                'has_light_sensor': hasattr(self.sensor_service, 'is_light_detected')
            }