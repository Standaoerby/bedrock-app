"""
AutoThemeService - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ –¥–∞—Ç—á–∏–∫—É –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
"""
import threading
import time
from app.logger import app_logger as logger
from app.event_bus import event_bus


class AutoThemeService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –ø–æ –¥–∞—Ç—á–∏–∫—É –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self._stop_event = threading.Event()
        self._last_check_time = 0
        self._check_interval = 2.0  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        self._is_stopped = False
        
        logger.info("AutoThemeService initialized")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        if self.running:
            logger.warning("AutoThemeService already running")
            return
        
        logger.info("Starting AutoThemeService...")
        self.running = True
        self._stop_event.clear()
        self.thread = threading.Thread(target=self._auto_theme_loop, daemon=True)
        self.thread.start()
        logger.info("AutoThemeService started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        if self._is_stopped:
            return
            
        logger.info("Stopping AutoThemeService...")
        self.running = False
        self._stop_event.set()
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=2.0)
        
        self._is_stopped = True
        logger.info("AutoThemeService stopped")
    
    def _auto_theme_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        while self.running and not self._stop_event.is_set():
            try:
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if current_time - self._last_check_time < self._check_interval:
                    self._stop_event.wait(0.5)
                    continue
                
                self._last_check_time = current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ç–µ–º—ã
                if not self._is_auto_theme_enabled():
                    self._stop_event.wait(5.0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
                if self._check_light_change():
                    self._handle_light_change()
                
                self._stop_event.wait(1.0)
                
            except Exception as e:
                logger.error(f"Error in auto-theme loop: {e}")
                self._stop_event.wait(5.0)
    
    def _is_auto_theme_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ç–µ–º–∞"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            if hasattr(app, 'user_config') and app.user_config:
                return app.user_config.get("auto_theme_enabled", False)
            
            return False
        except Exception as e:
            logger.error(f"Error checking auto theme enabled: {e}")
            return False
    
    def _check_light_change(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ SensorService"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            if hasattr(app, 'sensor_service') and app.sensor_service:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—á–∏–∫–∞
                if not app.sensor_service.sensor_available:
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
                return app.sensor_service.is_light_changed()
            
            return False
        except Exception as e:
            logger.error(f"Error checking light change: {e}")
            return False
    
    def _handle_light_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI"""
        try:
            from kivy.app import App
            from kivy.clock import Clock
            app = App.get_running_app()
            
            if not hasattr(app, 'sensor_service') or not app.sensor_service:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
            current_light = app.sensor_service.get_light_level()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é —Ç–µ–º—É
            if current_light:
                # –°–≤–µ—Ç–ª–æ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É
                new_variant = "light"
                light_status = "Light"
            else:
                # –¢–µ–º–Ω–æ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É
                new_variant = "dark"
                light_status = "Dark"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
            current_theme = "minecraft"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            current_variant = "light"   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if hasattr(app, 'user_config') and app.user_config:
                current_theme = app.user_config.get("theme", "minecraft")
                current_variant = app.user_config.get("variant", "light")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
            if new_variant != current_variant:
                logger.info(f"üåì Auto-switching theme: {light_status} detected ‚Üí {new_variant} theme")
                
                # –≠–¢–ê–ü 1: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –≤ ThemeManager
                if hasattr(app, 'theme_manager') and app.theme_manager:
                    app.theme_manager.load(current_theme, new_variant)
                    logger.debug("‚úÖ ThemeManager updated")
                
                # –≠–¢–ê–ü 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if hasattr(app, 'user_config') and app.user_config:
                    app.user_config.set("variant", new_variant)
                    logger.debug("‚úÖ User config updated")
                
                # –≠–¢–ê–ü 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ Kivy Clock
                def update_ui_phase_1(dt):
                    """–ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI - –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç –∏ –º–µ–Ω—é"""
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç
                        if hasattr(app, 'root') and app.root:
                            if hasattr(app.root, 'refresh_theme_everywhere'):
                                app.root.refresh_theme_everywhere()
                                logger.debug("‚úÖ Root widget theme updated")
                        
                        # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Ç–µ–º—ã
                        event_bus.publish("theme_changed", {
                            "theme": current_theme, 
                            "variant": new_variant,
                            "auto_switched": True
                        })
                        logger.debug("‚úÖ Theme changed event published")
                        
                    except Exception as e:
                        logger.error(f"Error in UI update phase 1: {e}")
                
                def update_ui_phase_2(dt):
                    """–í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI - –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã"""
                    try:
                        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                        if hasattr(app, 'root') and app.root:
                            if hasattr(app.root, 'ids') and 'sm' in app.root.ids:
                                screen_manager = app.root.ids.sm
                                current_screen = screen_manager.current_screen
                                
                                if current_screen and hasattr(current_screen, 'refresh_theme'):
                                    current_screen.refresh_theme()
                                    logger.debug(f"‚úÖ Current screen '{current_screen.name}' theme updated")
                        
                        logger.info(f"‚úÖ Theme auto-switched to {new_variant} - UI updated")
                        
                    except Exception as e:
                        logger.error(f"Error in UI update phase 2: {e}")
                
                def play_confirmation_sound(dt):
                    """–¢—Ä–µ—Ç—å—è —Ñ–∞–∑–∞ - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
                    try:
                        if hasattr(app, 'theme_manager') and hasattr(app, 'audio_service'):
                            sound_path = app.theme_manager.get_sound("confirm")
                            if sound_path and app.audio_service:
                                app.audio_service.play(sound_path)
                                logger.debug("‚úÖ Confirmation sound played")
                    except Exception as e:
                        logger.error(f"Error playing confirmation sound: {e}")
                
                # –†–ê–°–ü–ò–°–´–í–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ò–Ø –° –ó–ê–î–ï–†–ñ–ö–ê–ú–ò –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
                Clock.schedule_once(update_ui_phase_1, 0.1)   # –ß–µ—Ä–µ–∑ 100–º—Å
                Clock.schedule_once(update_ui_phase_2, 0.3)   # –ß–µ—Ä–µ–∑ 300–º—Å  
                Clock.schedule_once(play_confirmation_sound, 0.5)  # –ß–µ—Ä–µ–∑ 500–º—Å
                
            else:
                logger.debug(f"üåì Light level: {light_status}, theme already {current_variant}")
                
        except Exception as e:
            logger.error(f"Error handling light change: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI"""
        logger.info("üîç Force checking light sensor for auto-theme...")
        try:
            if self._is_auto_theme_enabled():
                if self._check_light_change():
                    self._handle_light_change()
                    return True
                else:
                    logger.info("üîç No light change detected")
                    # –î–∞–∂–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º UI –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    self._force_ui_refresh()
                    return False
            else:
                logger.info("üîç Auto-theme is disabled")
                return False
        except Exception as e:
            logger.error(f"Error in force check: {e}")
            return False
    
    def _force_ui_refresh(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ UI –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã"""
        try:
            from kivy.app import App
            from kivy.clock import Clock
            app = App.get_running_app()
            
            def refresh_all_ui(dt):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç
                    if hasattr(app, 'root') and app.root:
                        if hasattr(app.root, 'refresh_theme_everywhere'):
                            app.root.refresh_theme_everywhere()
                    
                    # –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
                    if hasattr(app, 'user_config') and app.user_config:
                        current_theme = app.user_config.get("theme", "minecraft")
                        current_variant = app.user_config.get("variant", "light")
                        
                        event_bus.publish("theme_changed", {
                            "theme": current_theme, 
                            "variant": current_variant,
                            "forced_refresh": True
                        })
                    
                    logger.debug("‚úÖ Forced UI refresh completed")
                    
                except Exception as e:
                    logger.error(f"Error in forced UI refresh: {e}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 100–º—Å
            Clock.schedule_once(refresh_all_ui, 0.1)
            
        except Exception as e:
            logger.error(f"Error scheduling UI refresh: {e}")
    
    def manual_theme_switch(self, target_variant=None):
        """–†—É—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º UI (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            if not hasattr(app, 'user_config') or not app.user_config:
                logger.error("User config not available")
                return False
            
            current_theme = app.user_config.get("theme", "minecraft")
            current_variant = app.user_config.get("variant", "light")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            if target_variant is None:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
                target_variant = "dark" if current_variant == "light" else "light"
            
            logger.info(f"üîÑ Manual theme switch: {current_variant} ‚Üí {target_variant}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            if hasattr(app, 'theme_manager') and app.theme_manager:
                app.theme_manager.load(current_theme, target_variant)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            app.user_config.set("variant", target_variant)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —á—Ç–æ –∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            from kivy.clock import Clock
            
            def update_ui_manual(dt):
                try:
                    if hasattr(app, 'root') and app.root:
                        if hasattr(app.root, 'refresh_theme_everywhere'):
                            app.root.refresh_theme_everywhere()
                    
                    event_bus.publish("theme_changed", {
                        "theme": current_theme, 
                        "variant": target_variant,
                        "manual_switch": True
                    })
                    
                    logger.info(f"‚úÖ Manual theme switch completed: {target_variant}")
                    
                except Exception as e:
                    logger.error(f"Error in manual UI update: {e}")
            
            Clock.schedule_once(update_ui_manual, 0.1)
            return True
            
        except Exception as e:
            logger.error(f"Error in manual theme switch: {e}")
            return False
    
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            status = {
                "service_running": self.running,
                "auto_theme_enabled": self._is_auto_theme_enabled(),
                "check_interval": self._check_interval,
                "last_check": self._last_check_time
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∞—Ç—á–∏–∫–∞
            if hasattr(app, 'sensor_service') and app.sensor_service:
                sensor_status = app.sensor_service.get_light_sensor_status()
                status.update({
                    "sensor_available": sensor_status.get('gpio_available', False),
                    "using_mock": sensor_status.get('using_mock', True),
                    "current_light": sensor_status.get('current_level', True),
                    "raw_value": sensor_status.get('raw_value', 0)
                })
            else:
                status.update({
                    "sensor_available": False,
                    "using_mock": True,
                    "current_light": True,
                    "raw_value": 0
                })
            
            return status
        except Exception as e:
            logger.error(f"Error getting auto-theme status: {e}")
            return {"error": str(e)}
    
    def set_check_interval(self, interval_seconds):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        self._check_interval = max(1.0, min(10.0, interval_seconds))
        logger.info(f"Auto-theme check interval set to {self._check_interval:.1f}s")
    
    def calibrate_sensor(self, threshold_seconds=3):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        try:
            from kivy.app import App
            app = App.get_running_app()
            
            if hasattr(app, 'sensor_service') and app.sensor_service:
                app.sensor_service.calibrate_light_sensor(threshold_seconds)
                logger.info(f"Auto-theme sensor calibrated: {threshold_seconds}s threshold")
                return True
            else:
                logger.warning("Sensor service not available for calibration")
                return False
        except Exception as e:
            logger.error(f"Error calibrating sensor: {e}")
            return False