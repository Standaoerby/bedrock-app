#!/usr/bin/env python3

import threading
import time
from app.logger import app_logger as logger
from app.event_bus import event_bus
from kivy.app import App
from kivy.clock import Clock  # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç Clock –¥–ª—è thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π


class AutoThemeService:
    """
    –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
    –í–µ—Ä—Å–∏—è 1.2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ calibrate_sensor —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    """
    
    def __init__(self, sensor_service, theme_manager):
        self.sensor_service = sensor_service
        self.theme_manager = theme_manager
        self.enabled = False
        self.running = False
        self.threshold_seconds = 3  # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        self.calibration_time = 3   # –í—Ä–µ–º—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.check_thread = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
        self.current_light_state = None  # True = —Å–≤–µ—Ç–ª–æ, False = —Ç–µ–º–Ω–æ
        self.state_start_time = None
        self.state_stable = False
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread safety
        self._lock = threading.RLock()
        
        logger.info("AutoThemeService initialized")
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.running:
            return
            
        self.running = True
        self.check_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.check_thread.start()
        logger.info("AutoThemeService started")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        if self.check_thread:
            self.check_thread.join(timeout=1)
        logger.info("AutoThemeService stopped")
        
    def set_enabled(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        with self._lock:
            self.enabled = enabled
            if enabled:
                self._calibrate_sensor()
            logger.info(f"Auto-theme {'enabled' if enabled else 'disabled'}")
            
    def is_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å"""
        with self._lock:
            return self.enabled
            
    def calibrate(self):
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        if self.enabled:
            self._calibrate_sensor()

    def calibrate_sensor(self, threshold_seconds=None):
        """üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º threshold"""
        with self._lock:
            if threshold_seconds is not None:
                self.threshold_seconds = max(1, min(threshold_seconds, 10))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 1-10 —Å–µ–∫—É–Ω–¥
                self.calibration_time = self.threshold_seconds
                logger.info(f"AutoTheme threshold updated to {self.threshold_seconds}s")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
            self._calibrate_sensor()
            
            logger.info(f"AutoTheme sensor calibrated with {self.threshold_seconds}s threshold")
            
    def _calibrate_sensor(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –¥–∞—Ç—á–∏–∫–∞"""
        try:
            if hasattr(self.sensor_service, 'calibrate_light_sensor'):
                # üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä threshold_seconds –≤ –º–µ—Ç–æ–¥ calibrate_light_sensor
                confidence = self.sensor_service.calibrate_light_sensor(self.threshold_seconds)
                logger.info(f"[Light sensor calibrated] {self.calibration_time}s, confidence: {confidence}")
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                self.current_light_state = None
                self.state_start_time = None
                self.state_stable = False
                
                logger.info(f"[Auto-theme sensor calibrated] {self.threshold_seconds}s threshold")
            else:
                logger.warning("Sensor service doesn't support light calibration")
                
        except Exception as e:
            logger.error(f"Error calibrating light sensor: {e}")
            
    def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        logger.info("üîç Force checking light sensor for auto-theme...")
        
        with self._lock:
            if not self.enabled:
                logger.info("Auto-theme is disabled")
                return
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            self._check_light_level()
            
    def check_and_update_theme(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã - –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ UI"""
        with self._lock:
            if not self.enabled:
                return False
                
            return self._check_light_level()

    def get_status(self):
        """üö® –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        with self._lock:
            try:
                sensor_available = hasattr(self.sensor_service, 'get_light_level') if self.sensor_service else False
                current_light = self.sensor_service.get_light_level() if sensor_available else True
                using_mock = getattr(self.sensor_service, 'using_mock_sensors', True) if self.sensor_service else True
                
                return {
                    "enabled": self.enabled,
                    "running": self.running,
                    "sensor_available": sensor_available,
                    "service_running": self.running,
                    "current_light": current_light,
                    "using_mock": using_mock,
                    "threshold_seconds": self.threshold_seconds,
                    "current_state": self.current_light_state,
                    "state_stable": self.state_stable
                }
            except Exception as e:
                logger.error(f"Error getting AutoTheme status: {e}")
                return {
                    "enabled": self.enabled,
                    "running": self.running,
                    "sensor_available": False,
                    "error": str(e)
                }
            
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                if self.enabled:
                    self._check_light_level()
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"Error in auto-theme monitor loop: {e}")
                time.sleep(1)
                
    def _check_light_level(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        try:
            # üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_light_level() –≤–º–µ—Å—Ç–æ is_light_detected()
            is_light = self.sensor_service.get_light_level()
            current_time = time.time()
            
            # –õ–æ–≥–∏–∫–∞ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π
            if is_light != self.current_light_state:
                # –ò–∑–º–µ–Ω–∏–ª–æ—Å—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏
                if self.state_start_time is None:
                    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
                    self.state_start_time = current_time
                    self.state_stable = False
                    logger.debug(f"Light state changed to {'light' if is_light else 'dark'}, starting timer")
                    
                elif current_time - self.state_start_time >= self.threshold_seconds:
                    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    if not self.state_stable:
                        self.state_stable = True
                        self.current_light_state = is_light
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
                        new_variant = "light" if is_light else "dark"
                        self._switch_theme(new_variant)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞)
                        confidence = 1.00 if current_time - self.state_start_time >= self.threshold_seconds else 0.75
                        logger.info(f"[Light changed] {'Dark ‚Üí Light' if is_light else 'Light ‚Üí Dark'} (confidence: {confidence:.2f})")
                        logger.info(f"[üåì Auto-switching theme] {'Light' if is_light else 'Dark'} detected ‚Üí {new_variant} theme")
                        
                        return True
                        
            else:
                # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if self.state_start_time is not None:
                    logger.debug("Light state returned to previous - resetting timer")
                self.state_start_time = None
                self.state_stable = False
                
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã
            if not self.state_stable:
                logger.debug("üîç No light change detected")
                
        except Exception as e:
            logger.error(f"Error checking light level: {e}")
            return False
            
    def _switch_theme(self, variant):
        """üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: Thread-safe –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ Kivy"""
        try:
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å UI –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ Clock.schedule_once
            Clock.schedule_once(lambda dt: self._do_switch_theme_on_main_thread(variant), 0)
                
        except Exception as e:
            logger.error(f"Error scheduling theme switch: {e}")
            
    def _do_switch_theme_on_main_thread(self, variant):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Kivy"""
        try:
            app = App.get_running_app()
            if app and hasattr(app, 'theme_manager'):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
                current_theme = app.theme_manager.current_theme
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å
                current_variant = getattr(app.theme_manager, 'current_variant', None)
                if current_variant == variant:
                    logger.debug(f"Theme already set to {variant}, skipping switch")
                    return
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–º—ã (–≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
                app.theme_manager.load_theme(current_theme, variant)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if hasattr(app, 'user_config'):
                    app.user_config.set('variant', variant)
                
                # üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                event_bus.publish("theme_changed", {
                    "theme": current_theme,
                    "variant": variant,
                    "source": "auto_theme_service"
                })
                
                logger.info(f"‚úÖ Theme auto-switched to {variant} - UI updated")
                
            else:
                logger.error("Cannot switch theme - ThemeManager not available")
                
        except Exception as e:
            logger.error(f"Error switching theme in main thread: {e}")


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
# –ö–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ main.py

def validate_auto_theme_service_module():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª—è AutoThemeService –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockSensorService:
            def get_light_level(self):
                return True
            def calibrate_light_sensor(self, threshold=3):
                return 0.8
                
        class MockThemeManager:
            def load_theme(self, theme, variant):
                pass
            current_theme = "minecraft"
        
        service = AutoThemeService(MockSensorService(), MockThemeManager())
        assert hasattr(service, 'calibrate_sensor'), "calibrate_sensor method missing"
        assert hasattr(service, 'check_and_update_theme'), "check_and_update_theme method missing"
        assert hasattr(service, 'get_status'), "get_status method missing"
        print("‚úÖ AutoThemeService module validation passed")
        return True
    except Exception as e:
        print(f"‚ùå AutoThemeService module validation failed: {e}")
        return False

# –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == "__main__":
    validate_auto_theme_service_module()