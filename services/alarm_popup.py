# services/alarm_popup.py
"""
–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–î–ï–õ–ê–ù–ù–´–ô AlarmPopup —Å —Ç–µ–º–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
"""
import os
import time
from kivy.uix.modalview import ModalView
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.app import App
from kivy.clock import Clock
from kivy.metrics import dp
from app.logger import app_logger as logger


class AlarmPopup(ModalView):
    def __init__(self, alarm_time="--:--", ringtone="", **kwargs):
        super().__init__(**kwargs)
        self.alarm_time = alarm_time
        self.ringtone = ringtone
        self.size_hint = (0.9, 0.7)
        self.auto_dismiss = False
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ
        self._audio_playing = False
        self._audio_path = None
        self._audio_monitor_event = None
        
        logger.info(f"üö® AlarmPopup created: {alarm_time}, ringtone: {ringtone}")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ popup
        self._apply_theme_to_popup()
        
        # –°—Ç—Ä–æ–∏–º UI
        self._build_themed_ui()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        self._auto_dismiss_event = Clock.schedule_once(self._auto_dismiss, 600)

    def _apply_theme_to_popup(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫ —Å–∞–º–æ–º—É popup"""
        try:
            tm = self._get_theme_manager()
            if tm and tm.is_loaded():
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ popup
                background_color = tm.get_rgba("popup_bg")
                if background_color:
                    self.background_color = background_color
                    
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
                separator_color = tm.get_rgba("border") 
                if separator_color:
                    self.separator_color = separator_color
                    
                logger.debug("Theme applied to AlarmPopup")
            else:
                logger.warning("ThemeManager not available for popup styling")
                # Fallback —Ü–≤–µ—Ç–∞
                self.background_color = [0.1, 0.1, 0.1, 0.95]  # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                
        except Exception as e:
            logger.error(f"Error applying theme to popup: {e}")
            self.background_color = [0.1, 0.1, 0.1, 0.95]

    def _get_theme_manager(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ ThemeManager"""
        try:
            app = App.get_running_app()
            if hasattr(app, 'theme_manager') and app.theme_manager:
                return app.theme_manager
        except Exception as e:
            logger.error(f"Error getting theme manager: {e}")
        return None

    # –°–†–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï services/alarm_popup.py
    # –ó–ê–ú–ï–ù–ò–¢–ï –º–µ—Ç–æ–¥ _build_themed_ui –ø–æ–ª–Ω–æ—Å—Ç—å—é:

    def _build_themed_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û –±–µ–∑ fallback"""
        main_layout = BoxLayout(
            orientation='vertical', 
            padding=dp(24), 
            spacing=dp(20)
        )
        
        tm = self._get_theme_manager()
        
        # === –ó–ê–ì–û–õ–û–í–û–ö ===
        title_label = Label(
            text="WAKE UP CUTIE! :)",
            font_size='42sp',
            size_hint_y=0.25,
            halign='center',
            valign='middle'
        )
        title_label.bind(size=title_label.setter('text_size'))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
        if tm and tm.is_loaded():
            title_label.font_name = tm.get_font("title") or ""
            title_label.color = tm.get_rgba("primary")
        else:
            title_label.color = [1, 0.3, 0.3, 1]  # –ö—Ä–∞—Å–Ω—ã–π fallback
            
        main_layout.add_widget(title_label)
        
        # === –í–†–ï–ú–Ø –ë–£–î–ò–õ–¨–ù–ò–ö–ê ===
        time_label = Label(
            text=f"üïê Alarm Time: {self.alarm_time}",
            font_size='26sp',
            size_hint_y=0.2,
            halign='center',
            valign='middle'
        )
        time_label.bind(size=time_label.setter('text_size'))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–æ –≤—Ä–µ–º–µ–Ω–∏
        if tm and tm.is_loaded():
            time_label.font_name = tm.get_font("main") or ""
            time_label.color = tm.get_rgba("text")
        else:
            time_label.color = [1, 1, 1, 1]  # –ë–µ–ª—ã–π fallback
            
        main_layout.add_widget(time_label)
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ò–ù–ì–¢–û–ù–ï ===
        ringtone_display = self.ringtone
        if '.' in ringtone_display:
            ringtone_display = ringtone_display.rsplit('.', 1)[0]
            
        ringtone_label = Label(
            text=f"üéµ {ringtone_display}",
            font_size='18sp',
            size_hint_y=0.15,
            halign='center',
            valign='middle'
        )
        ringtone_label.bind(size=ringtone_label.setter('text_size'))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∏–Ω–≥—Ç–æ–Ω–µ
        if tm and tm.is_loaded():
            ringtone_label.font_name = tm.get_font("main") or ""
            ringtone_label.color = tm.get_rgba("text_secondary")
        else:
            ringtone_label.color = [0.8, 0.8, 0.8, 1]  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π fallback
            
        main_layout.add_widget(ringtone_label)
        
        # === –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        button_layout = BoxLayout(
            orientation='horizontal', 
            spacing=dp(16), 
            size_hint_y=0.4
        )
        
        # –ö–Ω–æ–ø–∫–∞ STOP
        stop_button = Button(
            text="üõë STOP",
            font_size='22sp',
            size_hint_x=0.5
        )
        
        # –ö–Ω–æ–ø–∫–∞ SNOOZE  
        snooze_button = Button(
            text="üò¥ SNOOZE (5 min)",
            font_size='18sp',
            size_hint_x=0.5
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –∫–Ω–æ–ø–∫–∞–º –ë–ï–ó fallback –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if tm and tm.is_loaded():
            # –ö–Ω–æ–ø–∫–∞ STOP
            stop_button.font_name = tm.get_font("main") or ""
            stop_button.color = tm.get_rgba("text")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó fallback –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!
            stop_bg = tm.get_image("button_bg")
            stop_bg_active = tm.get_image("button_bg_active")
            if stop_bg:
                stop_button.background_normal = stop_bg
            if stop_bg_active:
                stop_button.background_down = stop_bg_active
            # –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ STOP
            stop_button.background_color = [0.8, 0.2, 0.2, 1]
            
            # –ö–Ω–æ–ø–∫–∞ SNOOZE
            snooze_button.font_name = tm.get_font("main") or ""
            snooze_button.color = tm.get_rgba("text")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó fallback –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!
            snooze_bg = tm.get_image("button_bg")
            snooze_bg_active = tm.get_image("button_bg_active")
            if snooze_bg:
                snooze_button.background_normal = snooze_bg
            if snooze_bg_active:
                snooze_button.background_down = snooze_bg_active
            # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ñ–æ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ SNOOZE
            snooze_button.background_color = [1, 0.6, 0.2, 1]
        else:
            # Fallback —Ü–≤–µ—Ç–∞ –±–µ–∑ —Ç–µ–º—ã
            stop_button.color = [1, 1, 1, 1]
            stop_button.background_color = [0.8, 0.2, 0.2, 1]  # –ö—Ä–∞—Å–Ω—ã–π
            
            snooze_button.color = [1, 1, 1, 1]
            snooze_button.background_color = [1, 0.6, 0.2, 1]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫
        stop_button.bind(on_press=self._stop_alarm)
        snooze_button.bind(on_press=self._snooze_alarm)
        
        button_layout.add_widget(stop_button)
        button_layout.add_widget(snooze_button)
        main_layout.add_widget(button_layout)
        
        self.add_widget(main_layout)
        logger.debug("Themed UI built successfully")

    # ========================================
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï services/alarm_popup.py - –º–µ—Ç–æ–¥ _find_ringtone_path
    # ========================================

    def _find_ringtone_path(self, ringtone_filename):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Å media/ringtones"""
        if not ringtone_filename:
            logger.error("No ringtone filename provided")
            return None
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Å media/ringtones –ø–µ—Ä–≤—ã–º!
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        
        possible_paths = [
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: media/ringtones –ø–µ—Ä–≤—ã–º!
            os.path.join(base_dir, "media", "ringtones", ringtone_filename),
            os.path.join(base_dir, "assets", "sounds", "ringtones", ringtone_filename),
            os.path.join(base_dir, "sounds", "ringtones", ringtone_filename),
            os.path.join(base_dir, "assets", "ringtones", ringtone_filename),
            os.path.join(base_dir, "ringtones", ringtone_filename),
            # –¢–∞–∫–∂–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
            f"media/ringtones/{ringtone_filename}",
            f"assets/sounds/ringtones/{ringtone_filename}",
            f"sounds/ringtones/{ringtone_filename}",
            f"assets/ringtones/{ringtone_filename}",
            f"ringtones/{ringtone_filename}"
        ]
        
        logger.debug(f"üîç Searching for ringtone: {ringtone_filename}")
        
        for path in possible_paths:
            try:
                abs_path = os.path.abspath(path)
                logger.debug(f"  Checking: {abs_path}")
                
                if os.path.exists(abs_path):
                    file_size = os.path.getsize(abs_path)
                    if file_size > 0:
                        logger.info(f"‚úÖ Found ringtone: {abs_path} ({file_size} bytes)")
                        return abs_path
                    else:
                        logger.warning(f"‚ö†Ô∏è Ringtone file is empty: {abs_path}")
                else:
                    logger.debug(f"  ‚ùå Not found: {abs_path}")
            except Exception as e:
                logger.debug(f"  ‚ö†Ô∏è Error checking path {path}: {e}")
        
        logger.error(f"‚ùå Ringtone not found in any location: {ringtone_filename}")
        return None

    # ========================================
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï services/alarm_clock.py - –º–µ—Ç–æ–¥ _attempt_fallback_audio
    # ========================================

    def _attempt_fallback_audio(self, ringtone):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback –∞—É–¥–∏–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"""
        try:
            logger.info("üîä Attempting fallback audio playback")
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏ —Å media/ringtones!
                base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
                
                possible_paths = [
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: media/ringtones –ø–µ—Ä–≤—ã–º!
                    os.path.join(base_dir, "media", "ringtones", ringtone),
                    os.path.join(base_dir, "assets", "sounds", "ringtones", ringtone),
                    os.path.join(base_dir, "sounds", "ringtones", ringtone),
                    os.path.join(base_dir, "assets", "ringtones", ringtone),
                    os.path.join(base_dir, "ringtones", ringtone),
                    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
                    f"media/ringtones/{ringtone}",
                    f"assets/sounds/ringtones/{ringtone}",
                    f"sounds/ringtones/{ringtone}",
                    f"assets/ringtones/{ringtone}",
                    f"ringtones/{ringtone}"
                ]
                
                for path in possible_paths:
                    try:
                        if os.path.exists(path):
                            file_size = os.path.getsize(path)
                            if file_size > 0:
                                logger.info(f"üéµ Trying fallback path: {path}")
                                
                                if hasattr(app.audio_service, 'play_loop'):
                                    app.audio_service.play_loop(path)
                                else:
                                    app.audio_service.play(path)
                                    
                                logger.info("‚úÖ Fallback audio started")
                                return
                    except Exception as play_error:
                        logger.error(f"‚ùå Fallback audio failed for {path}: {play_error}")
                        continue
                
                logger.error("‚ùå All fallback audio attempts failed")
            else:
                logger.error("‚ùå No audio_service available for fallback")
                
        except Exception as e:
            logger.error(f"‚ùå Error in fallback audio: {e}")

    def _start_audio_playback(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        try:
            if self._audio_playing:
                logger.info("Audio already playing, skipping")
                return True
                
            # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ —Ä–∏–Ω–≥—Ç–æ–Ω—É
            ringtone_path = self._find_ringtone_path(self.ringtone)
            if not ringtone_path:
                logger.error(f"Cannot start audio - ringtone not found: {self.ringtone}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º audio_service
            app = App.get_running_app()
            if not hasattr(app, 'audio_service') or not app.audio_service:
                logger.error("Cannot start audio - audio_service not available")
                return False
            
            audio_service = app.audio_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º mixer
            if hasattr(audio_service, 'is_mixer_initialized'):
                if not audio_service.is_mixer_initialized():
                    logger.error("Cannot start audio - mixer not initialized")
                    return False
                logger.debug("‚úÖ Audio mixer is initialized")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            logger.info(f"üéµ Starting audio playback: {ringtone_path}")
            
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ loop
                audio_service.play(ringtone_path, fadein=0)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ is_busy
                time.sleep(0.2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                
                if hasattr(audio_service, 'is_busy') and audio_service.is_busy():
                    self._audio_playing = True
                    self._audio_path = ringtone_path
                    self._start_audio_monitoring()
                    logger.info("üîä Alarm audio playback started successfully")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Audio may not have started properly")
                    # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–≥—Ä–∞—é—â–µ–µ
                    self._audio_playing = True
                    self._audio_path = ringtone_path
                    self._start_audio_monitoring()
                    return True
                
            except Exception as play_error:
                logger.error(f"‚ùå Error in audio playback: {play_error}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error starting audio playbook: {e}")
            return False

    # –¢–ê–ö–ñ–ï –î–û–ë–ê–í–¨–¢–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ô –ú–ï–¢–û–î (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω):
    def _verify_playback_started(self, audio_service):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å"""
        try:
            for attempt in range(10):  # –ñ–¥–µ–º –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
                if hasattr(audio_service, 'is_busy') and audio_service.is_busy():
                    return True
                elif hasattr(audio_service, 'is_playing') and audio_service.is_playing:
                    return True
                time.sleep(0.1)
            return False
        except Exception as e:
            logger.error(f"Error verifying playback: {e}")
            return False

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ _restart_audio_playback:
    def _restart_audio_playback(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ–∑ loop –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        try:
            if self._audio_path and os.path.exists(self._audio_path):
                app = App.get_running_app()
                if hasattr(app, 'audio_service') and app.audio_service:
                    audio_service = app.audio_service
                    
                    logger.info(f"üîÑ Restarting audio: {self._audio_path}")
                    
                    try:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑ loop –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!
                        audio_service.play(self._audio_path, fadein=0)
                        logger.info("‚úÖ Audio restarted successfully")
                    except Exception as e:
                        logger.error(f"Error restarting audio: {e}")
            else:
                logger.error("Cannot restart audio - path invalid")
                
        except Exception as e:
            logger.error(f"Error restarting audio: {e}")


    def _start_audio_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–¥–∏–æ"""
        if self._audio_monitor_event:
            self._audio_monitor_event.cancel()
        
        self._audio_monitor_event = Clock.schedule_interval(self._check_audio_status, 2.0)
        logger.debug("üîÑ Audio monitoring started")

    def _check_audio_status(self, dt):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            if not self._audio_playing:
                return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            
            app = App.get_running_app()
            if not hasattr(app, 'audio_service') or not app.audio_service:
                logger.warning("Audio service disappeared during monitoring")
                return False
            
            audio_service = app.audio_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            is_playing = False
            if hasattr(audio_service, 'is_busy'):
                is_playing = audio_service.is_busy()
            elif hasattr(audio_service, 'is_playing'):
                is_playing = audio_service.is_playing()
            
            if not is_playing:
                logger.info("üîá Audio playback stopped, attempting restart...")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                self._restart_audio_playback()
            
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            
        except Exception as e:
            logger.error(f"Error in audio monitoring: {e}")
            return False

 
    def _stop_audio_playback(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        try:
            if not self._audio_playing:
                return
                
            logger.info("üõë Stopping alarm audio...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self._audio_monitor_event:
                self._audio_monitor_event.cancel()
                self._audio_monitor_event = None
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                app.audio_service.stop()
                logger.info("üîá Audio service stop() called")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._audio_playing = False
            self._audio_path = None
            
            logger.info("‚úÖ Audio playback stopped successfully")
            
        except Exception as e:
            logger.error(f"Error stopping audio playback: {e}")
            # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._audio_playing = False
            self._audio_path = None

    def open_alarm(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫—Ä—ã—Ç–∏–µ popup —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º –∞—É–¥–∏–æ"""
        try:
            logger.info(f"üö® Opening alarm popup: {self.alarm_time}")
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º popup
            self.open()
            logger.info("üì± Alarm popup opened")
            
            # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            Clock.schedule_once(lambda dt: self._delayed_audio_start(), 0.3)
            
        except Exception as e:
            logger.error(f"‚ùå Error opening alarm popup: {e}")
            import traceback
            logger.error(f"Open alarm traceback: {traceback.format_exc()}")

    def _delayed_audio_start(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è popup"""
        try:
            success = self._start_audio_playback()
            if success:
                logger.info("üîä Alarm audio started successfully")
            else:
                logger.error("‚ùå Failed to start alarm audio")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self._show_audio_error()
                
        except Exception as e:
            logger.error(f"Error in delayed audio start: {e}")

    def _show_audio_error(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ UI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–± –æ—à–∏–±–∫–µ –∞—É–¥–∏–æ –≤ popup
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.warning("‚ö†Ô∏è Alarm popup opened but audio playback failed")
        except Exception as e:
            logger.error(f"Error showing audio error: {e}")

    def _stop_alarm(self, instance):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ alarm_clock"""
        try:
            logger.info("üõë Stop button pressed")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            self._stop_audio_playback()
            
            # –ü–æ–ª—É—á–∞–µ–º alarm_clock –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                app.alarm_clock.stop_alarm()
                logger.info("‚úÖ Alarm stopped via alarm_clock")
            else:
                logger.warning("alarm_clock not available, closing popup directly")
                self.dismiss()
                
        except Exception as e:
            logger.error(f"‚ùå Error stopping alarm: {e}")
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º popup
            try:
                self._stop_audio_playback()
                self.dismiss()
            except:
                pass

    def _snooze_alarm(self, instance):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ª–æ–∂–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 5 –º–∏–Ω—É—Ç"""
        try:
            logger.info("üò¥ Snooze button pressed")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            self._stop_audio_playback()
            
            # –ü–æ–ª—É—á–∞–µ–º alarm_clock –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                app.alarm_clock.snooze_alarm(5)
                logger.info("‚úÖ Alarm snoozed for 5 minutes")
            else:
                logger.warning("alarm_clock not available, just closing popup")
                self.dismiss()
                
        except Exception as e:
            logger.error(f"‚ùå Error snoozing alarm: {e}")
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º popup  
            try:
                self._stop_audio_playback()
                self.dismiss()
            except:
                pass

    def _auto_dismiss(self, dt):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
        try:
            logger.info("‚è∞ Auto-dismissing alarm after 10 minutes")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            self._stop_audio_playback()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                app.alarm_clock.stop_alarm()
            else:
                self.dismiss()
                
        except Exception as e:
            logger.error(f"‚ùå Error auto-dismissing alarm: {e}")
            try:
                self.dismiss()
            except:
                pass

    def dismiss(self, *args):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ popup —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            if self._auto_dismiss_event:
                self._auto_dismiss_event.cancel()
                self._auto_dismiss_event = None
                
            if self._audio_monitor_event:
                self._audio_monitor_event.cancel()
                self._audio_monitor_event = None
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            self._stop_audio_playback()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            super().dismiss(*args)
            logger.info("‚ùå Alarm popup dismissed and cleaned up")
            
        except Exception as e:
            logger.error(f"‚ùå Error dismissing alarm popup: {e}")
            try:
                super().dismiss(*args)
            except:
                pass

    # –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    def diagnose_audio_state(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É–¥–∏–æ –≤ popup"""
        logger.info("üîß === ALARM POPUP AUDIO DIAGNOSTIC ===")
        
        app = App.get_running_app()
        audio_available = hasattr(app, 'audio_service') and app.audio_service is not None
        
        logger.info(f"[audio_service      ] {'‚úÖ Available' if audio_available else '‚ùå Missing'}")
        logger.info(f"[ringtone_file      ] {self.ringtone}")
        logger.info(f"[audio_playing      ] {self._audio_playing}")
        logger.info(f"[audio_path         ] {self._audio_path}")
        
        if audio_available:
            audio_service = app.audio_service
            if hasattr(audio_service, 'is_mixer_initialized'):
                mixer_init = audio_service.is_mixer_initialized()
                logger.info(f"[mixer_initialized  ] {mixer_init}")
            
            if hasattr(audio_service, 'is_busy'):
                is_busy = audio_service.is_busy()
                logger.info(f"[audio_busy         ] {is_busy}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        ringtone_path = self._find_ringtone_path(self.ringtone)
        logger.info(f"[ringtone_found     ] {'‚úÖ' if ringtone_path else '‚ùå'}")
        if ringtone_path:
            logger.info(f"[ringtone_path      ] {ringtone_path}")
        
        logger.info("üîß === END POPUP DIAGNOSTIC ===")