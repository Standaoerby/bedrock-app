# services/alarm_popup.py
"""
–§–ò–ù–ê–õ–¨–ù–´–ô AlarmPopup - –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π popup –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
"""
from kivy.uix.modalview import ModalView
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.app import App
from kivy.clock import Clock
from app.logger import app_logger as logger


class AlarmPopup(ModalView):
    def __init__(self, alarm_time="--:--", ringtone="", **kwargs):
        super().__init__(**kwargs)
        self.alarm_time = alarm_time
        self.ringtone = ringtone
        self.size_hint = (0.8, 0.6)
        self.auto_dismiss = False
        
        logger.info(f"AlarmPopup created: {alarm_time}, ringtone: {ringtone}")
        
        self._build_ui()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        self._auto_dismiss_event = Clock.schedule_once(self._auto_dismiss, 600)
    
    def _build_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(
            text="üö® ALARM! üö®",
            font_size='48sp',
            size_hint_y=0.3,
            halign='center',
            color=[1, 0.2, 0.2, 1]
        )
        main_layout.add_widget(title_label)
        
        # –í—Ä–µ–º—è
        time_label = Label(
            text=f"Wake up!\nTime: {self.alarm_time}",
            font_size='24sp',
            size_hint_y=0.3,
            halign='center'
        )
        main_layout.add_widget(time_label)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = BoxLayout(orientation='horizontal', spacing=10, size_hint_y=0.4)
        
        stop_button = Button(
            text="STOP",
            background_color=[1, 0.2, 0.2, 1],
            font_size='20sp'
        )
        stop_button.bind(on_press=self._stop_alarm)
        button_layout.add_widget(stop_button)
        
        snooze_button = Button(
            text="SNOOZE\n5 min",
            background_color=[1, 0.6, 0.2, 1],
            font_size='18sp'
        )
        snooze_button.bind(on_press=self._snooze_alarm)
        button_layout.add_widget(snooze_button)
        
        main_layout.add_widget(button_layout)
        self.add_widget(main_layout)
    
    def open_alarm(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ popup –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞"""
        try:
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                ringtone_path = f"ringtones/{self.ringtone}"
                app.audio_service.play(ringtone_path, loop=True)
                logger.info(f"Playing alarm ringtone: {ringtone_path}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º popup
            self.open()
            logger.info("Alarm popup opened")
            
        except Exception as e:
            logger.error(f"Error opening alarm popup: {e}")
    
    def _stop_alarm(self, instance):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info("Stop button pressed")
            
            # –ü–æ–ª—É—á–∞–µ–º alarm_clock –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                app.alarm_clock.stop_alarm()
            else:
                # Fallback - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º popup
                if hasattr(app, 'audio_service'):
                    app.audio_service.stop()
                self.dismiss()
                
        except Exception as e:
            logger.error(f"Error stopping alarm: {e}")
            self.dismiss()
    
    def _snooze_alarm(self, instance):
        """–û—Ç–ª–æ–∂–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 5 –º–∏–Ω—É—Ç"""
        try:
            logger.info("Snooze button pressed")
            
            # –ü–æ–ª—É—á–∞–µ–º alarm_clock –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                app.alarm_clock.snooze_alarm(5)
            else:
                # Fallback - –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if hasattr(app, 'audio_service'):
                    app.audio_service.stop()
                self.dismiss()
                
        except Exception as e:
            logger.error(f"Error snoozing alarm: {e}")
            self.dismiss()
    
    def _auto_dismiss(self, dt):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
        try:
            logger.info("Auto-dismissing alarm after 10 minutes")
            
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                app.alarm_clock.stop_alarm()
            else:
                if hasattr(app, 'audio_service'):
                    app.audio_service.stop()
                self.dismiss()
                
        except Exception as e:
            logger.error(f"Error auto-dismissing alarm: {e}")
            self.dismiss()
    
    def dismiss(self, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ popup"""
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            if hasattr(self, '_auto_dismiss_event'):
                self._auto_dismiss_event.cancel()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            super().dismiss(*args)
            logger.info("Alarm popup dismissed")
            
        except Exception as e:
            logger.error(f"Error dismissing popup: {e}")
            super().dismiss(*args)