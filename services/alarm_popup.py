"""
AlarmPopup - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô popup –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ
- ‚úÖ Robust fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AlarmClock
- ‚úÖ Defensive programming
- ‚úÖ –õ—É—á—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
"""
import os
from kivy.uix.modalview import ModalView
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.app import App
from kivy.clock import Clock
from app.logger import app_logger as logger


class AlarmPopup(ModalView):
    def __init__(self, alarm_time="--:--", ringtone="", **kwargs):
        super().__init__(**kwargs)
        self.alarm_time = alarm_time
        self.ringtone = ringtone
        self.size_hint = (0.8, 0.6)
        self.auto_dismiss = False
        
        self._action = None
        self._audio_playing = False
        self._cleanup_scheduled = False
        
        logger.info(f"AlarmPopup created: time={alarm_time}, ringtone={ringtone}")
        
        # –°–æ–∑–¥–∞–µ–º UI
        self._build_ui()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç
        self._auto_dismiss_event = Clock.schedule_once(self._auto_dismiss_callback, 600)  # 10 –º–∏–Ω—É—Ç
    
    def _build_ui(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            main_layout = BoxLayout(orientation='vertical', padding=20, spacing=20)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            title_label = Label(
                text="üö® ALARM! üö®",
                font_size='48sp',
                size_hint_y=0.3,
                halign='center',
                color=[1, 0.2, 0.2, 1]  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
            )
            main_layout.add_widget(title_label)
            
            # –í—Ä–µ–º—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
            time_label = Label(
                text=f"Wake up! {self.alarm_time}",
                font_size='24sp',
                size_hint_y=0.2,
                halign='center',
                color=[1, 1, 1, 1]
            )
            main_layout.add_widget(time_label)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–ª–æ–¥–∏–∏
            if self.ringtone:
                ringtone_display = self.ringtone.replace('.mp3', '').replace('.wav', '')
                ringtone_label = Label(
                    text=f"‚ô™ {ringtone_display}",
                    font_size='16sp',
                    size_hint_y=0.1,
                    halign='center',
                    color=[0.8, 0.8, 0.8, 1]
                )
                main_layout.add_widget(ringtone_label)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            button_layout = BoxLayout(orientation='horizontal', spacing=20, size_hint_y=0.2)
            
            # –ö–Ω–æ–ø–∫–∞ Snooze
            snooze_btn = Button(
                text="üò¥ Snooze 5min",
                font_size='18sp',
                size_hint_x=0.5,
                background_color=[0.3, 0.3, 0.8, 1]  # –°–∏–Ω–∏–π
            )
            snooze_btn.bind(on_release=self.on_snooze)
            button_layout.add_widget(snooze_btn)
            
            # –ö–Ω–æ–ø–∫–∞ Dismiss
            dismiss_btn = Button(
                text="‚úÖ Dismiss",
                font_size='18sp',
                size_hint_x=0.5,
                background_color=[0.8, 0.3, 0.3, 1]  # –ö—Ä–∞—Å–Ω—ã–π
            )
            dismiss_btn.bind(on_release=self.on_dismiss_button)
            button_layout.add_widget(dismiss_btn)
            
            main_layout.add_widget(button_layout)
            self.add_widget(main_layout)
            
            logger.info("‚úÖ AlarmPopup UI built successfully")
            
        except Exception as e:
            logger.error(f"Error building AlarmPopup UI: {e}")
            # Fallback UI
            self._create_fallback_ui()
    
    def _create_fallback_ui(self):
        """–ü—Ä–æ—Å—Ç–æ–π fallback UI –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —É–¥–∞–ª—Å—è"""
        try:
            fallback_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
            
            fallback_layout.add_widget(Label(
                text="ALARM!",
                font_size='32sp',
                halign='center'
            ))
            
            fallback_layout.add_widget(Label(
                text=f"Time: {self.alarm_time}",
                font_size='18sp',
                halign='center'
            ))
            
            dismiss_btn = Button(text="Dismiss", size_hint_y=0.3)
            dismiss_btn.bind(on_release=self.on_dismiss_button)
            fallback_layout.add_widget(dismiss_btn)
            
            self.add_widget(fallback_layout)
            logger.info("Fallback UI created")
            
        except Exception as e:
            logger.error(f"Even fallback UI failed: {e}")

    def on_snooze(self, button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Snooze"""
        try:
            logger.info("Snooze button pressed")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            self._play_ui_sound("confirm")
            
            self._action = "snooze"
            self.dismiss()
            
        except Exception as e:
            logger.error(f"Error in on_snooze: {e}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å
            self._action = "snooze"
            self.dismiss()

    def on_dismiss_button(self, button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Dismiss"""
        try:
            logger.info("Dismiss button pressed")
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
            self._play_ui_sound("click")
            
            self._action = "dismiss"
            self.dismiss()
            
        except Exception as e:
            logger.error(f"Error in on_dismiss_button: {e}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å
            self._action = "dismiss"
            self.dismiss()
    
    def _auto_dismiss_callback(self, dt):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
        try:
            logger.warning("Auto-dismissing alarm after 10 minutes of inactivity")
            self._action = "auto_dismiss"
            self.dismiss()
        except Exception as e:
            logger.error(f"Error in auto dismiss: {e}")

    def on_dismiss(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è popup"""
        try:
            logger.info(f"AlarmPopup dismissing with action: {self._action}")
            
            # –û—Ç–º–µ–Ω—è–µ–º auto-dismiss –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if self._auto_dismiss_event:
                self._auto_dismiss_event.cancel()
                self._auto_dismiss_event = None
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            self._stop_audio()
            
            # –ü–æ–ª—É—á–∞–µ–º alarm_clock –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            app = App.get_running_app()
            if hasattr(app, 'alarm_clock') and app.alarm_clock:
                alarm_clock = app.alarm_clock
                
                if self._action == "snooze":
                    logger.info("Processing snooze action")
                    alarm_clock.snooze_alarm(5)  # 5 –º–∏–Ω—É—Ç
                elif self._action == "dismiss" or self._action == "auto_dismiss":
                    logger.info(f"Processing {self._action} action")
                    alarm_clock.stop_alarm()
                else:
                    # Fallback - –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    logger.warning(f"Unknown action '{self._action}', stopping alarm")
                    alarm_clock.stop_alarm()
            else:
                logger.error("AlarmClock not available in app")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º cleanup
            if not self._cleanup_scheduled:
                self._cleanup_scheduled = True
                Clock.schedule_once(self._final_cleanup, 0.1)
            
        except Exception as e:
            logger.error(f"Error in AlarmPopup.on_dismiss: {e}")
            import traceback
            logger.error(f"Dismiss traceback: {traceback.format_exc()}")
        
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False —á—Ç–æ–±—ã popup –∑–∞–∫—Ä—ã–ª—Å—è
        return False
    
    def _final_cleanup(self, dt):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            self._stop_audio()
            self._auto_dismiss_event = None
            logger.info("AlarmPopup cleanup completed")
        except Exception as e:
            logger.error(f"Error in final cleanup: {e}")

    def open_alarm(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—É–¥–∏–ª—å–Ω–∏–∫–∞ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –∑–≤—É–∫–∞"""
        try:
            logger.info(f"Opening alarm popup with ringtone: {self.ringtone}")
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º popup
            self.open()
            
            # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ
            self._start_audio()
            
            logger.info("‚úÖ Alarm popup opened successfully")
            
        except Exception as e:
            logger.error(f"Error opening alarm popup: {e}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –±–µ–∑ –∑–≤—É–∫–∞
            try:
                self.open()
            except Exception as open_error:
                logger.error(f"Cannot even open popup: {open_error}")
    
    def _start_audio(self):
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –¥–ª—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        try:
            app = App.get_running_app()
            if not hasattr(app, 'audio_service') or not app.audio_service:
                logger.error("AudioService not available")
                self._play_fallback_sound()
                return
            
            audio_service = app.audio_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ mixer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not audio_service.is_mixer_initialized():
                logger.warning("Audio mixer not initialized, trying fallback")
                self._play_fallback_sound()
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∏–Ω–≥—Ç–æ–Ω
            if self.ringtone:
                ringtone_path = os.path.join("media", "ringtones", self.ringtone)
                
                if os.path.exists(ringtone_path):
                    logger.info(f"Playing ringtone: {ringtone_path}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º async –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if hasattr(audio_service, 'play_async'):
                        audio_service.play_async(ringtone_path)
                    else:
                        audio_service.play(ringtone_path)
                    
                    self._audio_playing = True
                    logger.info("‚úÖ Ringtone started successfully")
                else:
                    logger.error(f"Ringtone file not found: {ringtone_path}")
                    self._play_fallback_sound()
            else:
                logger.warning("No ringtone specified, playing fallback")
                self._play_fallback_sound()
                
        except Exception as e:
            logger.error(f"Error starting audio: {e}")
            self._play_fallback_sound()
    
    def _play_fallback_sound(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ fallback –∑–≤—É–∫–∞"""
        try:
            app = App.get_running_app()
            if hasattr(app, 'theme_manager') and app.theme_manager:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–≤—É–∫
                for sound_name in ["notify", "error", "confirm"]:
                    try:
                        from app.sound_manager import sound_manager
                        
                        if sound_name == "notify":
                            if sound_manager.play_notify():
                                self._audio_playing = True
                                break
                        elif sound_name == "error":
                            if sound_manager.play_error():
                                self._audio_playing = True
                                break
                        elif sound_name == "confirm":
                            if sound_manager.play_confirm():
                                self._audio_playing = True
                                break
                    except Exception as e:
                        logger.error(f"Error playing fallback sound '{sound_name}': {e}")
                else:
                    logger.warning("No fallback sounds available")
            else:
                logger.error("ThemeManager not available for fallback sounds")
                
        except Exception as e:
            logger.error(f"Error playing fallback sound: {e}")
    
    def _play_ui_sound(self, sound_name):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ UI –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ sound_manager"""
        try:
            from app.sound_manager import sound_manager
            
            if sound_name == "click":
                sound_manager.play_click()
            elif sound_name == "confirm":
                sound_manager.play_confirm()
            elif sound_name == "error":
                sound_manager.play_error()
            else:
                # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–≤—É–∫–æ–≤
                sound_manager._play_sound(sound_name)
                
        except Exception as e:
            logger.error(f"Error playing UI sound '{sound_name}': {e}")
    
    def _stop_audio(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
        try:
            if self._audio_playing:
                app = App.get_running_app()
                if hasattr(app, 'audio_service') and app.audio_service:
                    app.audio_service.stop()
                    logger.info("Audio stopped")
                
                self._audio_playing = False
                
        except Exception as e:
            logger.error(f"Error stopping audio: {e}")