#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ Bedrock
"""
import os
import sys
import inspect

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

def test_settings_screen():
    """–¢–µ—Å—Ç SettingsScreen –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä—É–µ–º SettingsScreen ===")
    
    try:
        from pages.settings import SettingsScreen
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        settings = SettingsScreen()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ KV
        required_methods = [
            'on_username_change',
            'on_birth_day_change', 
            'on_birth_month_change',
            'on_birth_year_change',
            'on_theme_select',
            'on_variant_select',
            'on_language_select',
            'toggle_auto_theme',
            'on_threshold_change',
            'save_all_settings',
            'load_all_settings',
            '_cleanup_spinners'
        ]
        
        missing_methods = []
        for method_name in required_methods:
            if not hasattr(settings, method_name):
                missing_methods.append(method_name)
            else:
                print(f"‚úì {method_name}")
        
        if missing_methods:
            print(f"‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã: {missing_methods}")
            return False
        else:
            print("‚úì –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        required_properties = [
            'current_theme', 'current_variant', 'current_language',
            'username', 'birth_day', 'birth_month', 'birth_year',
            'auto_theme_enabled', 'light_sensor_available', 'light_sensor_threshold'
        ]
        
        missing_properties = []
        for prop_name in required_properties:
            if not hasattr(settings, prop_name):
                missing_properties.append(prop_name)
            else:
                print(f"‚úì Property: {prop_name}")
        
        if missing_properties:
            print(f"‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞: {missing_properties}")
            return False
        else:
            print("‚úì –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ SettingsScreen: {e}")
        return False

def test_alarm_screen():
    """–¢–µ—Å—Ç AlarmScreen –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä—É–µ–º AlarmScreen ===")
    
    try:
        from pages.alarm import AlarmScreen
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        alarm = AlarmScreen()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
        required_methods = [
            'increment_hour', 'decrement_hour',
            'increment_minute', 'decrement_minute',
            'on_active_toggled', 'toggle_repeat',
            'on_fadein_toggled', 'select_ringtone',
            'toggle_play_ringtone', 'play_ringtone',
            'stop_ringtone', '_cleanup_spinners'
        ]
        
        missing_methods = []
        for method_name in required_methods:
            if not hasattr(alarm, method_name):
                missing_methods.append(method_name)
            else:
                print(f"‚úì {method_name}")
        
        if missing_methods:
            print(f"‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã: {missing_methods}")
            return False
        else:
            print("‚úì –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AlarmScreen: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã ===")
    
    modules_to_test = [
        'app.theme_manager',
        'app.localizer', 
        'app.user_config',
        'app.event_bus',
        'services.audio_service',
        'services.alarm_service',
        'services.weather_service',
        'services.sensor_service',
        'services.pigs_service',
        'services.notifications_service',
        'services.schedule_service',
        'pages.home',
        'pages.alarm',
        'pages.settings',
        'pages.weather',
        'pages.pigs',
        'pages.schedule',
        'widgets.root_widget',
        'widgets.top_menu'
    ]
    
    failed_imports = []
    
    for module_name in modules_to_test:
        try:
            __import__(module_name)
            print(f"‚úì {module_name}")
        except Exception as e:
            print(f"‚úó {module_name}: {e}")
            failed_imports.append(module_name)
    
    if failed_imports:
        print(f"\n‚úó –ù–µ—É–¥–∞—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {failed_imports}")
        return False
    else:
        print("\n‚úì –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        return True

def test_config_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ===")
    
    config_files = [
        'config/user_config.json',
        'config/alarm.json', 
        'config/schedule.json',
        'config/pigs.json',
        'locale/en.json',
        'locale/ru.json'
    ]
    
    missing_files = []
    
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úì {config_file}")
        else:
            print(f"? {config_file} (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)")
    
    return True

def test_kv_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è KV —Ñ–∞–π–ª–æ–≤"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä—É–µ–º KV —Ñ–∞–π–ª—ã ===")
    
    kv_files = [
        'widgets/root_widget.kv',
        'widgets/top_menu.kv',
        'widgets/overlay_card.kv',
        'pages/home.kv',
        'pages/alarm.kv',
        'pages/settings.kv',
        'pages/weather.kv',
        'pages/pigs.kv',
        'pages/schedule.kv'
    ]
    
    missing_files = []
    
    for kv_file in kv_files:
        if os.path.exists(kv_file):
            print(f"‚úì {kv_file}")
        else:
            print(f"‚úó {kv_file}")
            missing_files.append(kv_file)
    
    if missing_files:
        print(f"\n‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ KV —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    else:
        print("\n‚úì –í—Å–µ KV —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Bedrock 2.0")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("SettingsScreen", test_settings_screen),
        ("AlarmScreen", test_alarm_screen),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", test_config_files),
        ("KV —Ñ–∞–π–ª—ã", test_kv_files)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)