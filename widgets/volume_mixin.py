# widgets/volume_mixin.py
from kivy.app import App
from kivy.clock import Clock
from app.logger import app_logger as logger


class VolumeControlMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ VolumeManager –Ω–∞ –ª—é–±–æ–π —ç–∫—Ä–∞–Ω"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._current_volume = 50
        self._volume_manager_available = False
    
    def setup_volume_control(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é (–≤—ã–∑—ã–≤–∞—Ç—å –≤ on_pre_enter)"""
        try:
            app = App.get_running_app()
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º volume_manager –≤–º–µ—Å—Ç–æ volume_service
            if hasattr(app, 'volume_manager') and app.volume_manager:
                self._volume_manager_available = True
                self._current_volume = app.volume_manager.get_volume()
                logger.debug(f"Volume control –≥–æ—Ç–æ–≤ –Ω–∞ {self.__class__.__name__}: {self._current_volume}%")
            else:
                self._volume_manager_available = False
                logger.warning(f"VolumeManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {self.__class__.__name__}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ volume control –Ω–∞ {self.__class__.__name__}: {e}")
            self._volume_manager_available = False
    
    def volume_up(self, step=5):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)"""
        if not self._volume_manager_available:
            logger.warning("VolumeManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        try:
            app = App.get_running_app()
            old_volume = self._current_volume
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã VolumeManager
            success = app.volume_manager.volume_up(step)
            new_volume = app.volume_manager.get_volume()
            
            if success:
                self._current_volume = new_volume
                logger.info(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å UP –Ω–∞ {self.__class__.__name__}: {old_volume}% ‚Üí {new_volume}%")
                self._play_volume_sound("confirm")
                return True
            else:
                logger.warning(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {self.__class__.__name__}: {old_volume}% ‚Üí {new_volume}%")
                self._play_volume_sound("error")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ volume_up –Ω–∞ {self.__class__.__name__}: {e}")
            return False
    
    def volume_down(self, step=5):
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ —ç–∫—Ä–∞–Ω–∞)"""
        if not self._volume_manager_available:
            logger.warning("VolumeManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        try:
            app = App.get_running_app()
            old_volume = self._current_volume
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã VolumeManager
            success = app.volume_manager.volume_down(step)
            new_volume = app.volume_manager.get_volume()
            
            if success:
                self._current_volume = new_volume
                logger.info(f"üîâ –ì—Ä–æ–º–∫–æ—Å—Ç—å DOWN –Ω–∞ {self.__class__.__name__}: {old_volume}% ‚Üí {new_volume}%")
                self._play_volume_sound("click") 
                return True
            else:
                logger.warning(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {self.__class__.__name__}: {old_volume}% ‚Üí {new_volume}%")
                self._play_volume_sound("error")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ volume_down –Ω–∞ {self.__class__.__name__}: {e}")
            return False
    
    def get_volume(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            app = App.get_running_app()
            if hasattr(app, 'volume_manager') and app.volume_manager:
                volume = app.volume_manager.get_volume()
                self._current_volume = volume
                return volume
            return self._current_volume
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
            return self._current_volume
    
    def mute_toggle(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        try:
            app = App.get_running_app()
            if hasattr(app, 'volume_manager') and app.volume_manager:
                status = app.volume_manager.get_status()
                if status.get('is_muted', False):
                    success = app.volume_manager.unmute()
                    action = "–≤–∫–ª—é—á–µ–Ω"
                else:
                    success = app.volume_manager.mute()
                    action = "–æ—Ç–∫–ª—é—á–µ–Ω"
                
                if success:
                    logger.info(f"üîá –ó–≤—É–∫ {action} –Ω–∞ {self.__class__.__name__}")
                    self._play_volume_sound("click")
                    return True
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –Ω–∞ {self.__class__.__name__}")
                    return False
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")
            return False
    
    def _play_volume_sound(self, sound_name):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and hasattr(app, 'theme_manager'):
                if app.audio_service and app.theme_manager:
                    sound_file = app.theme_manager.get_sound(sound_name)
                    if sound_file:
                        Clock.schedule_once(lambda dt: app.audio_service.play(sound_file), 0.01)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ '{sound_name}': {e}")


