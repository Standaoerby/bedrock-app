# widgets/root_widget.py
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è RootWidget

from kivy.properties import StringProperty
from kivy.uix.floatlayout import FloatLayout
from kivy.app import App
from app.event_bus import event_bus
from app.logger import app_logger as logger


class RootWidget(FloatLayout):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç —Å –ø–æ–ª–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–º—ã"""
    
    current_page = StringProperty("home")
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã + overlay
        event_bus.subscribe("theme_changed", self.refresh_theme_completely)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º screen_manager –∫–∞–∫ None
        # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ KV —Ñ–∞–π–ª–∞
        self.screen_manager = None

    def on_kv_post(self, base_widget):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ KV —Ñ–∞–π–ª–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º screen_manager –∏–∑ ids –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ KV
            if hasattr(self, 'ids') and 'sm' in self.ids:
                self.screen_manager = self.ids.sm
                logger.debug("screen_manager initialized from KV")
            else:
                logger.warning("ScreenManager 'sm' not found in KV file")
        except Exception as e:
            logger.error(f"Error in RootWidget on_kv_post: {e}")

    def get_theme_manager(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ theme_manager"""
        app = App.get_running_app()
        if hasattr(app, 'theme_manager') and app.theme_manager:
            return app.theme_manager
        logger.warning("ThemeManager not available in RootWidget")
        return None
        
    def switch_screen(self, page_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º screen_manager –∞—Ç—Ä–∏–±—É—Ç
            if self.screen_manager:
                self.screen_manager.current = page_name
                self.current_page = page_name
                
                # –û–±–Ω–æ–≤–ª—è–µ–º overlay –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self._update_overlay()
                
                logger.debug(f"Switched to screen: {page_name}")
                return True
                
            # –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º ids.sm
            elif hasattr(self, 'ids') and 'sm' in self.ids:
                self.ids.sm.current = page_name
                self.current_page = page_name
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º screen_manager –µ—Å–ª–∏ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if not self.screen_manager:
                    self.screen_manager = self.ids.sm
                
                # –û–±–Ω–æ–≤–ª—è–µ–º overlay –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                self._update_overlay()
                
                logger.debug(f"Switched to screen: {page_name} via ids.sm")
                return True
            else:
                logger.error("ScreenManager not found in root widget - no sm in ids and no screen_manager attribute")
                return False
                
        except Exception as e:
            logger.error(f"Error switching screen to {page_name}: {e}")
            return False

    def refresh_theme_completely(self, *args):
        """üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–û–õ–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã RootWidget"""
        try:
            logger.debug("RootWidget: Complete theme refresh")
            
            tm = self.get_theme_manager()
            if not tm or not tm.is_loaded():
                logger.warning("ThemeManager not loaded, cannot refresh RootWidget theme")
                return
            
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º background –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if hasattr(self, 'ids') and 'background_image' in self.ids:
                new_bg = tm.get_image("background")
                if new_bg and new_bg != self.ids.background_image.source:
                    self.ids.background_image.source = new_bg
                    logger.debug(f"‚úÖ RootWidget background updated: {new_bg}")
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º overlay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self._update_overlay()
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º canvas –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞
            if hasattr(self, 'canvas'):
                self.canvas.ask_update()
                logger.debug("‚úÖ RootWidget canvas updated")
            
            # 4. –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã –≤ RootWidget - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
            self._update_root_ui_elements()
            
            logger.debug("üéâ RootWidget theme completely refreshed")
            
        except Exception as e:
            logger.error(f"Error in RootWidget complete theme refresh: {e}")

    def _update_overlay(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ overlay –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            tm = self.get_theme_manager()
            if tm and tm.is_loaded() and hasattr(self, 'ids') and 'overlay_image' in self.ids:
                overlay_name = f"overlay_{self.current_page}"
                new_overlay = tm.get_image(overlay_name)
                if new_overlay and new_overlay != self.ids.overlay_image.source:
                    self.ids.overlay_image.source = new_overlay
                    logger.debug(f"‚úÖ Overlay updated for page: {self.current_page}")
                elif not new_overlay:
                    logger.debug(f"‚ö†Ô∏è No overlay image found for page: {self.current_page}")
            else:
                logger.debug("Cannot update overlay - theme manager not available or not loaded")
        except Exception as e:
            logger.error(f"Error updating overlay: {e}")

    def _update_root_ui_elements(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ RootWidget"""
        try:
            tm = self.get_theme_manager()
            if not tm or not tm.is_loaded():
                return
            
            # –ï—Å–ª–∏ –≤ RootWidget –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏, –ª–µ–π–±–ª—ã –∏ —Ç.–¥.) - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
            if hasattr(self, 'ids'):
                for widget_id, widget in self.ids.items():
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if hasattr(widget, 'color') and widget_id != 'background_image' and widget_id != 'overlay_image':
                        if hasattr(widget, 'text'):  # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                            widget.color = tm.get_rgba("text")
                            logger.debug(f"‚úÖ Updated color for {widget_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    if hasattr(widget, 'font_name'):
                        widget.font_name = tm.get_font("main")
                        logger.debug(f"‚úÖ Updated font for {widget_id}")
                        
        except Exception as e:
            logger.error(f"Error updating root UI elements: {e}")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def get_current_screen(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω"""
        try:
            if self.screen_manager:
                return self.screen_manager.current_screen
            elif hasattr(self, 'ids') and 'sm' in self.ids:
                return self.ids.sm.current_screen
            return None
        except Exception as e:
            logger.error(f"Error getting current screen: {e}")
            return None

    def get_screen_by_name(self, name):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫—Ä–∞–Ω –ø–æ –∏–º–µ–Ω–∏"""
        try:
            if self.screen_manager:
                return self.screen_manager.get_screen(name)
            elif hasattr(self, 'ids') and 'sm' in self.ids:
                return self.ids.sm.get_screen(name)
            return None
        except Exception as e:
            logger.error(f"Error getting screen {name}: {e}")
            return None

    def diagnose_state(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è RootWidget"""
        try:
            return {
                "current_page": self.current_page,
                "has_screen_manager": bool(self.screen_manager),
                "has_ids": hasattr(self, 'ids'),
                "has_sm_in_ids": hasattr(self, 'ids') and 'sm' in self.ids if hasattr(self, 'ids') else False,
                "screen_manager_type": type(self.screen_manager).__name__ if self.screen_manager else None,
                "available_screens": list(self.screen_manager.screen_names) if self.screen_manager else [],
                "theme_manager_available": bool(self.get_theme_manager())
            }
        except Exception as e:
            return {"error": str(e)}

    def verify_instance(self):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RootWidget"""
        return {
            "class_name": self.__class__.__name__,
            "has_screen_manager": hasattr(self, 'screen_manager'),
            "screen_manager_value": str(self.screen_manager),
            "methods": [method for method in dir(self) if not method.startswith('_')]
        }