from kivy.uix.screenmanager import Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.widget import Widget
from kivy.properties import NumericProperty, ColorProperty, StringProperty
from kivy.graphics import Color, Rectangle
from kivy.clock import Clock
from kivy.app import App
from kivy.metrics import dp
from app.event_bus import event_bus
from app.logger import app_logger as logger
import os


class CustomProgressBar(Widget):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤"""
    
    value = NumericProperty(50)  # –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100
    bar_color = ColorProperty([0, 0.6, 0.8, 1])  # –¶–≤–µ—Ç –ø–æ–ª–æ—Å—ã
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.bind(size=self.update_canvas)
        self.bind(pos=self.update_canvas)
        self.bind(value=self.update_canvas)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
        with self.canvas:
            # –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
            self.bg_color = Color(0.2, 0.2, 0.2, 0.6)
            self.bg_rect = Rectangle(pos=self.pos, size=self.size)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
            self.fg_color = Color(*self.bar_color)
            self.fg_rect = Rectangle(pos=self.pos, size=(0, 0))
    
    def update_canvas(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞"""
        if not self.canvas:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω
        self.bg_rect.pos = self.pos
        self.bg_rect.size = self.size
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.fg_color.rgba = self.bar_color
        self.fg_rect.pos = self.pos
        progress_width = self.width * (self.value / 100)
        self.fg_rect.size = (progress_width, self.height)


class PigsScreen(Screen):
    """–≠–∫—Ä–∞–Ω —É—Ö–æ–¥–∞ –∑–∞ –ø–∏—Ç–æ–º—Ü–∞–º–∏"""
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–≤
    water_value = NumericProperty(100)
    food_value = NumericProperty(100)
    clean_value = NumericProperty(100)
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    overall_status = NumericProperty(100)
    status_text = StringProperty("Perfect!")
    current_image = StringProperty("pigs_1.png")
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        event_bus.subscribe("theme_changed", self.refresh_theme)
        event_bus.subscribe("language_changed", self.refresh_text)
        
        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._update_events = []

    def on_pre_enter(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        logger.info("Entering PigsScreen")
        self.refresh_theme()
        self.refresh_text()
        self.update_all_data()
        self.start_updates()

    def on_pre_leave(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞"""
        self.stop_updates()

    def start_updates(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self._update_events = [
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            Clock.schedule_interval(lambda dt: self.update_all_data(), 300),
        ]

    def stop_updates(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        for event in self._update_events:
            event.cancel()
        self._update_events = []

    def update_all_data(self, *args):
        """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        app = App.get_running_app()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
        if hasattr(app, 'pigs_service') and app.pigs_service:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
                values, overall = app.pigs_service.get_all_values()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–≤
                self.water_value = values.get("water", 50)
                self.food_value = values.get("food", 50)
                self.clean_value = values.get("clean", 50)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                self.overall_status = int(overall * 100)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                self.update_status_text()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.update_pig_image()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.update_progress_bars()
                
                logger.debug(f"Pigs status updated: Water={self.water_value:.1f}, Food={self.food_value:.1f}, Clean={self.clean_value:.1f}, Overall={self.overall_status}%")
                
            except Exception as e:
                logger.error(f"Error updating pigs data: {e}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self._set_default_values()
        else:
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.warning("PigsService not available, using mock data")
            self._set_default_values()

    def _set_default_values(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.water_value = 75
        self.food_value = 60
        self.clean_value = 85
        self.overall_status = 73
        self.status_text = "Mock data"
        self.update_pig_image()
        self.update_progress_bars()

    def update_status_text(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
        app = App.get_running_app()
        
        if hasattr(app, 'localizer'):
            if self.overall_status >= 90:
                self.status_text = app.localizer.tr("pigs_status_perfect", "Perfect! üê∑‚ú®")
            elif self.overall_status >= 75:
                self.status_text = app.localizer.tr("pigs_status_happy", "Happy üê∑üòä")
            elif self.overall_status >= 50:
                self.status_text = app.localizer.tr("pigs_status_ok", "OK üê∑üòê")
            elif self.overall_status >= 25:
                self.status_text = app.localizer.tr("pigs_status_needs_care", "Needs care üê∑üòü")
            else:
                self.status_text = app.localizer.tr("pigs_status_critical", "Critical! üê∑üò∞")
        else:
            # Fallback –±–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            if self.overall_status >= 90:
                self.status_text = "Perfect! üê∑‚ú®"
            elif self.overall_status >= 75:
                self.status_text = "Happy üê∑üòä"
            elif self.overall_status >= 50:
                self.status_text = "OK üê∑üòê"
            elif self.overall_status >= 25:
                self.status_text = "Needs care üê∑üòü"
            else:
                self.status_text = "Critical! üê∑üò∞"

    def update_pig_image(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if self.overall_status >= 85:
            self.current_image = "pigs_1.png"  # –°—á–∞—Å—Ç–ª–∏–≤—ã–µ
        elif self.overall_status >= 60:
            self.current_image = "pigs_2.png"  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ
        elif self.overall_status >= 30:
            self.current_image = "pigs_3.png"  # –ì—Ä—É—Å—Ç–Ω—ã–µ
        else:
            self.current_image = "pigs_4.png"  # –û—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω—ã–µ
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        if hasattr(self, 'ids') and 'pigs_image' in self.ids:
            image_path = self.get_pig_image_path()
            if os.path.exists(image_path):
                self.ids.pigs_image.source = image_path
            else:
                logger.warning(f"Pig image not found: {image_path}")

    def get_pig_image_path(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–∏—Ç–æ–º—Ü–µ–≤"""
        return os.path.join("assets", "images", self.current_image)

    def update_progress_bars(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        if not hasattr(self, 'ids'):
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–≤
        if 'water_bar' in self.ids:
            self.ids.water_bar.value = self.water_value
        if 'food_bar' in self.ids:
            self.ids.food_bar.value = self.food_value
        if 'clean_bar' in self.ids:
            self.ids.clean_bar.value = self.clean_value

    def reset_bar(self, bar_type):
        """–°–±—Ä–æ—Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –ø–æ–ª–æ—Å—ã (–∫–æ—Ä–º–ª–µ–Ω–∏–µ/–ø–æ–µ–Ω–∏–µ/—É–±–æ—Ä–∫–∞)"""
        try:
            app = App.get_running_app()
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if hasattr(app, 'audio_service') and hasattr(app, 'theme_manager'):
                sound_file = app.theme_manager.get_sound("confirm")
                if sound_file:
                    app.audio_service.play(sound_file)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–æ—Å—É –≤ —Å–µ—Ä–≤–∏—Å–µ
            if hasattr(app, 'pigs_service') and app.pigs_service:
                success = app.pigs_service.reset_bar(bar_type)
                if success:
                    logger.info(f"Reset {bar_type} bar")
                else:
                    logger.error(f"Failed to reset {bar_type} bar")
            else:
                # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                logger.warning("PigsService not available, resetting locally")
                if bar_type == "water":
                    self.water_value = 100
                elif bar_type == "food":
                    self.food_value = 100
                elif bar_type == "clean":
                    self.clean_value = 100
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                avg_value = (self.water_value + self.food_value + self.clean_value) / 3
                self.overall_status = int(avg_value)
                self.update_status_text()
                self.update_pig_image()
                self.update_progress_bars()
            
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            Clock.schedule_once(lambda dt: self.update_all_data(), 0.1)
            
        except Exception as e:
            logger.error(f"Error resetting {bar_type} bar: {e}")
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –æ—à–∏–±–∫–∏
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and hasattr(app, 'theme_manager'):
                sound_file = app.theme_manager.get_sound("error")
                if sound_file:
                    app.audio_service.play(sound_file)

    def refresh_theme(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        app = App.get_running_app()
        if not hasattr(app, 'theme_manager'):
            return
            
        tm = app.theme_manager

        # –°–ø–∏—Å–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã
        widgets_to_update = [
            "water_label", "food_label", "clean_label", 
            "water_button", "food_button", "clean_button"
        ]
        
        for widget_id in widgets_to_update:
            if hasattr(self, 'ids') and widget_id in self.ids:
                widget = self.ids[widget_id]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç
                if hasattr(widget, 'font_name'):
                    widget.font_name = tm.get_font("main")
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                if hasattr(widget, 'color'):
                    if "label" in widget_id:
                        widget.color = tm.get_rgba("text")
                    else:
                        widget.color = tm.get_rgba("text")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –∫–Ω–æ–ø–æ–∫
                if hasattr(widget, 'background_normal'):
                    widget.background_normal = tm.get_image("button_bg")
                    widget.background_down = tm.get_image("button_bg_active")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        if hasattr(self, 'ids'):
            if 'water_bar' in self.ids:
                self.ids.water_bar.bar_color = [0.2, 0.6, 1, 0.8]  # –ì–æ–ª—É–±–æ–π –¥–ª—è –≤–æ–¥—ã
            if 'food_bar' in self.ids:
                self.ids.food_bar.bar_color = [1, 0.6, 0.2, 0.8]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –µ–¥—ã
            if 'clean_bar' in self.ids:
                self.ids.clean_bar.bar_color = [0.2, 0.8, 0.2, 0.8]  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —É–±–æ—Ä–∫–∏

    def refresh_text(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        app = App.get_running_app()
        if not hasattr(app, 'localizer'):
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        if hasattr(self, 'ids'):
            if 'water_label' in self.ids:
                self.ids.water_label.text = app.localizer.tr("water", "Water")
            if 'food_label' in self.ids:
                self.ids.food_label.text = app.localizer.tr("food", "Food")
            if 'clean_label' in self.ids:
                self.ids.clean_label.text = app.localizer.tr("cleaning", "Cleaning")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            for btn_id in ['water_button', 'food_button', 'clean_button']:
                if btn_id in self.ids:
                    self.ids[btn_id].text = app.localizer.tr("done", "Done")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        self.update_status_text()