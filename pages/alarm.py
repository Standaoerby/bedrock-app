from kivy.uix.screenmanager import Screen
from kivy.properties import StringProperty, BooleanProperty, ListProperty
from kivy.clock import Clock
from kivy.app import App
import os
from app.event_bus import event_bus
from app.logger import app_logger as logger

DAYS_EN = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
TIME_BUTTON_DEBOUNCE_DELAY = 0.15  # 150ms –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏

class AlarmScreen(Screen):
    """–≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±—É–¥–∏–ª—å–Ω–∏–∫–∞
    alarm_time = StringProperty("07:30")
    alarm_active = BooleanProperty(True)
    alarm_repeat = ListProperty(["Mon", "Tue", "Wed", "Thu", "Fri"])
    selected_ringtone = StringProperty("robot.mp3")
    
    # ListProperty –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–ø–∏–Ω–Ω–µ—Ä–∞ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
    ringtone_list = ListProperty(["robot.mp3"])
    
    alarm_fadein = BooleanProperty(False)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._auto_save_event = None
        self._settings_changed = False
        self._sound_playing = False
        self._sound_check_event = None
        self._initialized = False
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        self._last_time_change = 0
        self._time_change_delay = TIME_BUTTON_DEBOUNCE_DELAY
        self._time_buttons_locked = False
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
        event_bus.subscribe("theme_changed", self._on_theme_changed_delayed)
        event_bus.subscribe("language_changed", self.refresh_text)

    def on_pre_enter(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        logger.info("Entering AlarmScreen")
        try:
            Clock.schedule_once(lambda dt: self.stop_ringtone(), 0.2)
            self.load_ringtones()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ringtone_list –æ–¥–∏–Ω —Ä–∞–∑
            self.load_alarm_config()
            self.update_ui()
            # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
            Clock.schedule_once(lambda dt: self.refresh_theme(), 0.1)
            Clock.schedule_once(lambda dt: self.refresh_text(), 0.1)
            Clock.schedule_once(lambda dt: self._setup_ringtone_button(), 0.2)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Time button debounce delay: {self._time_change_delay:.3f}s")
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã
            Clock.schedule_once(lambda dt: self.diagnose_audio_system(), 1.0)
            
            self._initialized = True
        except Exception as e:
            logger.error(f"Error in AlarmScreen.on_pre_enter: {e}")

    def on_pre_leave(self, *args):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —ç–∫—Ä–∞–Ω–∞"""
        try:
            if self._settings_changed:
                self.save_alarm(silent=True)
            self.stop_ringtone()
            self._reset_play_button()
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if self._auto_save_event:
                self._auto_save_event.cancel()
                self._auto_save_event = None
            if self._sound_check_event:
                self._sound_check_event.cancel()
                self._sound_check_event = None
        except Exception as e:
            logger.error(f"Error in AlarmScreen.on_pre_leave: {e}")

    def _setup_ringtone_button(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ–ª–æ–¥–∏–∏"""
        try:
            if not hasattr(self, 'ids') or 'ringtone_button' not in self.ids:
                return
                
            ringtone_button = self.ids.ringtone_button
            ringtone_button.values = self.ringtone_list
            ringtone_button.selected_value = self.selected_ringtone
            
            logger.debug("Ringtone button configured")
                
        except Exception as e:
            logger.error(f"Error setting up ringtone button: {e}")

    def get_theme_manager(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ theme_manager"""
        app = App.get_running_app()
        if hasattr(app, 'theme_manager') and app.theme_manager:
            return app.theme_manager
        logger.warning("ThemeManager not available in AlarmScreen")
        return None

    def _play_sound(self, sound_name):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Ç–µ–º—ã"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫–∏ —Ç–µ–º—ã –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç —Ä–∏–Ω–≥—Ç–æ–Ω
            if self._sound_playing:
                logger.debug(f"Skipping theme sound '{sound_name}' - ringtone playing")
                return
                
            app = App.get_running_app()
            if hasattr(app, "theme_manager") and hasattr(app, "audio_service"):
                path = app.theme_manager.get_sound(sound_name)
                if path and os.path.exists(path):
                    logger.debug(f"Playing theme sound: {sound_name}")
                    app.audio_service.play(path)
                else:
                    logger.warning(f"Theme sound not found: {sound_name}")
        except Exception as e:
            logger.error(f"Error playing theme sound {sound_name}: {e}")
    def test_ringtone_direct(self, ringtone_name=None):
        """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–∏–Ω–≥—Ç–æ–Ω–∞ –±–µ–∑ UI"""
        if ringtone_name is None:
            ringtone_name = self.selected_ringtone
            
        logger.info(f"üß™ === DIRECT RINGTONE TEST: {ringtone_name} ===")
        
        try:
            folder = "media/ringtones"
            path = os.path.join(folder, ringtone_name)
            
            logger.info(f"Test path: {path}")
            logger.info(f"File exists: {os.path.exists(path)}")
            
            if os.path.exists(path):
                file_size = os.path.getsize(path)
                logger.info(f"File size: {file_size} bytes")
                
                app = App.get_running_app()
                if hasattr(app, 'audio_service'):
                    audio_service = app.audio_service
                    logger.info(f"AudioService available: True")
                    logger.info(f"Before test - current_file: {audio_service.current_file}")
                    
                    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ fadein
                    audio_service.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
                    import time
                    time.sleep(0.2)  # –î–∞–µ–º –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                    
                    logger.info(f"Calling direct play...")
                    audio_service.play(path, fadein=0)
                    
                    logger.info(f"After test - current_file: {audio_service.current_file}")
                    logger.info(f"After test - is_busy: {audio_service.is_busy()}")
                    logger.info(f"After test - is_playing: {audio_service.is_playing}")
                    
                    return True
                else:
                    logger.error("AudioService not available")
                    return False
            else:
                logger.error(f"Ringtone file not found: {path}")
                return False
                
        except Exception as e:
            logger.error(f"Error in direct ringtone test: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False

    def _can_change_time(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–¥–µ–±–∞—É–Ω—Å–∏–Ω–≥)"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–≤–æ–π–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ + –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self._time_buttons_locked:
            logger.debug("Time change blocked - buttons locked")
            return False
            
        import time
        current_time = time.time()
        time_since_last = current_time - self._last_time_change
        
        if time_since_last < self._time_change_delay:
            logger.debug(f"Time change blocked by debouncing (since last: {time_since_last:.3f}s, required: {self._time_change_delay:.3f}s)")
            return False
            
        self._last_time_change = current_time
        logger.debug(f"Time change allowed (since last: {time_since_last:.3f}s)")
        return True

    def _lock_time_buttons(self):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        self._time_buttons_locked = True
        Clock.schedule_once(lambda dt: setattr(self, '_time_buttons_locked', False), 0.1)

    def set_time_debounce_delay(self, delay_seconds):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—Ä–µ–º–µ–Ω–∏"""
        self._time_change_delay = max(0.05, min(1.0, delay_seconds))  # –û—Ç 50ms –¥–æ 1s
        logger.info(f"Time button debounce delay set to {self._time_change_delay:.3f}s")

    def _schedule_auto_save(self, delay=1.5):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        if self._auto_save_event:
            self._auto_save_event.cancel()
        self._settings_changed = True
        self._auto_save_event = Clock.schedule_once(lambda dt: self._auto_save(), delay)

    def _auto_save(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"""
        if self._settings_changed:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–ï–ó –∑–≤—É–∫–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ—Å—Ç–∏
                app = App.get_running_app()
                if hasattr(app, 'alarm_service') and app.alarm_service:
                    alarm = {
                        "time": self.alarm_time,
                        "enabled": self.alarm_active,
                        "repeat": self.alarm_repeat,
                        "ringtone": self.selected_ringtone,
                        "fadein": self.alarm_fadein,
                    }
                    success = app.alarm_service.set_alarm(alarm)
                    if success:
                        self._settings_changed = False
                        logger.debug("Auto-saved alarm settings")
                        
            except Exception as e:
                logger.error(f"Error auto-saving alarm: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        self._auto_save_event = None

    def load_ringtones(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ–ª–æ–¥–∏–π –±—É–¥–∏–ª—å–Ω–∏–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ringtone_list –û–î–ò–ù –†–ê–ó"""
        folder = "media/ringtones"
        try:
            os.makedirs(folder, exist_ok=True)
            if os.path.exists(folder):
                files = [f for f in os.listdir(folder)
                        if f.lower().endswith((".mp3", ".ogg", ".wav"))]
                if files:
                    self.ringtone_list = sorted(files)
                    if self.selected_ringtone not in self.ringtone_list:
                        self.selected_ringtone = self.ringtone_list[0]
                else:
                    # Fallback –º–µ–ª–æ–¥–∏–∏ –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞
                    self.ringtone_list = ["robot.mp3", "morning.mp3", "gentle.mp3", "loud.mp3"]
                    self.selected_ringtone = "robot.mp3"
            else:
                self.ringtone_list = ["robot.mp3", "morning.mp3", "gentle.mp3", "loud.mp3"]
                self.selected_ringtone = "robot.mp3"
                
            logger.debug(f"Loaded {len(self.ringtone_list)} ringtones: {self.ringtone_list}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self._check_ringtone_files()
            
        except Exception as e:
            logger.error(f"Error loading ringtones: {e}")
            self.ringtone_list = ["robot.mp3"]
            self.selected_ringtone = "robot.mp3"

    def load_alarm_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        app = App.get_running_app()
        if not hasattr(app, 'alarm_service') or not app.alarm_service:
            return
            
        try:
            alarm = app.alarm_service.get_alarm()
            if alarm:
                self.alarm_time = alarm.get("time", "07:30")
                self.alarm_active = alarm.get("enabled", True)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —á–∏—Å–ª–∞–º–∏)
                repeat = alarm.get("repeat", ["Mon", "Tue", "Wed", "Thu", "Fri"])
                if repeat and all(isinstance(x, int) for x in repeat):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
                    self.alarm_repeat = [DAYS_EN[i-1] for i in repeat if 1 <= i <= 7]
                else:
                    self.alarm_repeat = repeat if repeat else ["Mon", "Tue", "Wed", "Thu", "Fri"]
                
                self.selected_ringtone = alarm.get("ringtone", "robot.mp3")
                self.alarm_fadein = alarm.get("fadein", False)
                
                logger.info(f"Loaded alarm config: {self.alarm_time}, active: {self.alarm_active}")
            
        except Exception as e:
            logger.error(f"Error loading alarm config: {e}")

    def save_alarm(self, silent=False):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        if not silent:
            self._play_sound("confirm")
            
        app = App.get_running_app()
        if not hasattr(app, 'alarm_service') or not app.alarm_service:
            if not silent:
                self._play_sound("error")
            return False
            
        try:
            alarm = {
                "time": self.alarm_time,
                "enabled": self.alarm_active,
                "repeat": self.alarm_repeat,
                "ringtone": self.selected_ringtone,
                "fadein": self.alarm_fadein,
            }
            success = app.alarm_service.set_alarm(alarm)
            if success:
                self._settings_changed = False
                if not silent:
                    logger.info("Alarm settings saved successfully")
            return success
        except Exception as e:
            logger.error(f"Error saving alarm: {e}")
            if not silent:
                self._play_sound("error")
            return False

    def update_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            if ":" in self.alarm_time:
                hours, minutes = self.alarm_time.split(':')
                if hasattr(self, 'ids'):
                    if 'hour_label' in self.ids:
                        self.ids.hour_label.text = hours
                    if 'minute_label' in self.ids:
                        self.ids.minute_label.text = minutes

            self._update_toggle_buttons()
            self._update_day_buttons()
            
            # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Play –µ—Å–ª–∏ –∑–≤—É–∫ –∏–≥—Ä–∞–µ—Ç
            if not self._sound_playing:
                self._reset_play_button()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –º–µ–ª–æ–¥–∏–∏
            if hasattr(self, 'ids') and 'ringtone_button' in self.ids:
                ringtone_button = self.ids.ringtone_button
                ringtone_button.values = self.ringtone_list
                ringtone_button.selected_value = self.selected_ringtone
            
        except Exception as e:
            logger.error(f"Error updating UI: {e}")

    def _update_toggle_buttons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
        app = App.get_running_app()
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –±—É–¥–∏–ª—å–Ω–∏–∫–∞
        if hasattr(self, 'ids') and 'active_button' in self.ids:
            active_button = self.ids.active_button
            active_button.text = "ON" if self.alarm_active else "OFF"
            active_button.state = "down" if self.alarm_active else "normal"

        # –ö–Ω–æ–ø–∫–∞ fade-in
        if hasattr(self, 'ids') and 'fadein_button' in self.ids:
            fadein_button = self.ids.fadein_button
            fadein_button.text = "ON" if self.alarm_fadein else "OFF"
            fadein_button.state = "down" if self.alarm_fadein else "normal"

    def _update_day_buttons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
        if not hasattr(self, 'ids'):
            return
            
        for day in DAYS_EN:
            btn_id = f"repeat_{day.lower()}"
            if btn_id in self.ids:
                button = self.ids[btn_id]
                button.state = "down" if day in self.alarm_repeat else "normal"

    def _reset_play_button(self):
        """–°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if hasattr(self, 'ids') and 'play_button' in self.ids:
            play_button = self.ids.play_button
            play_button.text = 'Play'
            play_button.state = 'normal'
        self._sound_playing = False

    def _on_theme_changed_delayed(self, *args):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞–º–∏
        Clock.schedule_once(lambda dt: self.refresh_theme(), 0.1)

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô UI ===

    def increment_hour(self):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∞—Å–∞"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ + –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        if not self._can_change_time():
            return
            
        self._lock_time_buttons()
        self._play_sound("click")
        try:
            hours, minutes = self.alarm_time.split(':')
            new_hour = (int(hours) + 1) % 24
            self.alarm_time = f"{new_hour:02d}:{minutes}"
            if hasattr(self, 'ids') and 'hour_label' in self.ids:
                self.ids.hour_label.text = f"{new_hour:02d}"
            self._schedule_auto_save()
            logger.debug(f"Hour incremented to {new_hour:02d}")
        except Exception as e:
            logger.error(f"Error incrementing hour: {e}")

    def decrement_hour(self):
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∞—Å–∞"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ + –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        if not self._can_change_time():
            return
            
        self._lock_time_buttons()
        self._play_sound("click")
        try:
            hours, minutes = self.alarm_time.split(':')
            new_hour = (int(hours) - 1) % 24
            self.alarm_time = f"{new_hour:02d}:{minutes}"
            if hasattr(self, 'ids') and 'hour_label' in self.ids:
                self.ids.hour_label.text = f"{new_hour:02d}"
            self._schedule_auto_save()
            logger.debug(f"Hour decremented to {new_hour:02d}")
        except Exception as e:
            logger.error(f"Error decrementing hour: {e}")

    def increment_minute(self):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ + –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        if not self._can_change_time():
            return
            
        self._lock_time_buttons()
        self._play_sound("click")
        try:
            hours, minutes = self.alarm_time.split(':')
            new_minute = (int(minutes) + 1) % 60
            self.alarm_time = f"{hours}:{new_minute:02d}"
            if hasattr(self, 'ids') and 'minute_label' in self.ids:
                self.ids.minute_label.text = f"{new_minute:02d}"
            self._schedule_auto_save()
            logger.debug(f"Minute incremented to {new_minute:02d}")
        except Exception as e:
            logger.error(f"Error incrementing minute: {e}")

    def decrement_minute(self):
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∏–Ω—É—Ç"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ + –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        if not self._can_change_time():
            return
            
        self._lock_time_buttons()
        self._play_sound("click")
        try:
            hours, minutes = self.alarm_time.split(':')
            new_minute = (int(minutes) - 1) % 60
            self.alarm_time = f"{hours}:{new_minute:02d}"
            if hasattr(self, 'ids') and 'minute_label' in self.ids:
                self.ids.minute_label.text = f"{new_minute:02d}"
            self._schedule_auto_save()
            logger.debug(f"Minute decremented to {new_minute:02d}")
        except Exception as e:
            logger.error(f"Error decrementing minute: {e}")

    def on_active_toggled(self, active):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∞"""
        if active != self.alarm_active:
            self._play_sound("confirm" if active else "click")
            self.alarm_active = active
            self._update_toggle_buttons()
            self._schedule_auto_save()

    def toggle_repeat(self, day, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        self._play_sound("click")
        day = day.capitalize()
        if state == "down" and day not in self.alarm_repeat:
            self.alarm_repeat.append(day)
            self._schedule_auto_save()
        elif state == "normal" and day in self.alarm_repeat:
            self.alarm_repeat.remove(day)
            self._schedule_auto_save()

    def on_fadein_toggled(self, active):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ fade-in"""
        if active != self.alarm_fadein:
            self._play_sound("confirm" if active else "click")
            self.alarm_fadein = active
            self._update_toggle_buttons()
            self._schedule_auto_save()

    def select_ringtone(self, name):
        """–í—ã–±–æ—Ä –º–µ–ª–æ–¥–∏–∏ - –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if name != self.selected_ringtone and name in self.ringtone_list:
            logger.debug(f"AlarmScreen.select_ringtone called with: {name}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç
            if self._sound_playing:
                self.stop_ringtone()
                self._reset_play_button()
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
            self._play_sound("click")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–µ–ª–æ–¥–∏—é
            old_ringtone = self.selected_ringtone
            self.selected_ringtone = name
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self._schedule_auto_save()
            
            logger.info(f"Ringtone changed from {old_ringtone} to {name}")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è pages/alarm.py
    # –ó–∞–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ toggle_play_ringtone() –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

    def toggle_play_ringtone(self, state):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º–µ–ª–æ–¥–∏–∏"""
        logger.info(f"üéÆ Toggle play ringtone: state={state}, current _sound_playing={self._sound_playing}")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –∑–≤—É–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            # —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é —Ä–∏–Ω–≥—Ç–æ–Ω–∞
            
            if state == 'down' and not self._sound_playing:
                logger.info("‚ñ∂Ô∏è Starting ringtone playback...")
                if hasattr(self, 'ids') and 'play_button' in self.ids:
                    self.ids.play_button.text = 'Stop'
                self.play_ringtone()
            else:
                logger.info("‚èπÔ∏è Stopping ringtone playback...")
                if hasattr(self, 'ids') and 'play_button' in self.ids:
                    self.ids.play_button.text = 'Play'
                    self.ids.play_button.state = 'normal'
                self.stop_ringtone()
                
            # –£–ë–†–ê–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–ª–∏–∫–∞
            # Clock.schedule_once(lambda dt: self._play_sound("click"), 0.1)
            
        except Exception as e:
            logger.error(f"‚ùå Error toggling ringtone: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            self._reset_play_button()

    def _start_sound_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        logger.info("üîÑ Starting ringtone sound monitoring...")
        if self._sound_check_event:
            self._sound_check_event.cancel()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        self._sound_check_event = Clock.schedule_interval(self._check_sound_status, 1.0)
 
    def _check_sound_status(self, dt):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        try:
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                audio_service = app.audio_service
                is_busy = audio_service.is_busy()
                current_file = getattr(audio_service, 'current_file', None)
                
                logger.debug(f"üîç Ringtone check: is_busy={is_busy}, current_file={current_file}, _sound_playing={self._sound_playing}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à —Ä–∏–Ω–≥—Ç–æ–Ω
                if not is_busy and self._sound_playing:
                    if current_file and 'ringtones' in current_file:
                        logger.info("üîá Ringtone finished playing")
                    else:
                        logger.info("üîá Audio finished but wasn't ringtone")
                    self._on_sound_finished()
                    return False
                elif not is_busy and not self._sound_playing:
                    logger.debug("üîá No audio playing and we're not tracking")
                    self._on_sound_finished()
                    return False
                else:
                    logger.debug("üîä Ringtone still playing...")
                    
            else:
                logger.warning("‚ö†Ô∏è Audio service not available during sound check")
                self._on_sound_finished()
                return False
                
            return True
        except Exception as e:
            logger.error(f"‚ùå Error checking ringtone status: {e}")
            self._on_sound_finished()
            return False

    def _check_ringtone_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –º–µ–ª–æ–¥–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            folder = "media/ringtones"
            logger.info(f"üîç Checking ringtone folder: {folder}")
            
            if not os.path.exists(folder):
                logger.warning(f"‚ùå Ringtone folder does not exist: {folder}")
                return
                
            files = os.listdir(folder)
            logger.info(f"üìÅ Files in ringtone folder: {files}")
            
            for ringtone in self.ringtone_list:
                path = os.path.join(folder, ringtone)
                exists = os.path.exists(path)
                size = os.path.getsize(path) if exists else 0
                logger.info(f"üéµ Ringtone {ringtone}: exists={exists}, size={size} bytes")
                
        except Exception as e:
            logger.error(f"Error checking ringtone files: {e}")

    def diagnose_audio_system(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        logger.info("üîß === AUDIO SYSTEM DIAGNOSIS ===")
        
        try:
            app = App.get_running_app()
            logger.info(f"App instance: {app}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ audio_service
            if hasattr(app, 'audio_service'):
                audio_service = app.audio_service
                logger.info(f"AudioService instance: {audio_service}")
                logger.info(f"AudioService type: {type(audio_service)}")
                
                if hasattr(audio_service, 'get_device_info'):
                    device_info = audio_service.get_device_info()
                    logger.info(f"Audio device info: {device_info}")
                
                logger.info(f"AudioService is_playing: {getattr(audio_service, 'is_playing', 'N/A')}")
                logger.info(f"AudioService current_file: {getattr(audio_service, 'current_file', 'N/A')}")
                logger.info(f"AudioService is_busy(): {audio_service.is_busy() if hasattr(audio_service, 'is_busy') else 'N/A'}")
                
            else:
                logger.error("‚ùå AudioService not found in app")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ theme_manager (–¥–ª—è –∑–≤—É–∫–æ–≤ —Ç–µ–º—ã)
            if hasattr(app, 'theme_manager'):
                tm = app.theme_manager
                logger.info(f"ThemeManager instance: {tm}")
                if tm and hasattr(tm, 'get_sound'):
                    test_sound = tm.get_sound("click")
                    logger.info(f"Test theme sound path: {test_sound}")
                    if test_sound:
                        logger.info(f"Theme sound exists: {os.path.exists(test_sound)}")
            else:
                logger.error("‚ùå ThemeManager not found in app")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–µ–ª–æ–¥–∏–π
            self._check_ringtone_files()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AlarmScreen
            logger.info(f"AlarmScreen _sound_playing: {self._sound_playing}")
            logger.info(f"AlarmScreen selected_ringtone: {self.selected_ringtone}")
            logger.info(f"AlarmScreen ringtone_list: {self.ringtone_list}")
            
        except Exception as e:
            logger.error(f"Error in audio system diagnosis: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
        
        logger.info("üîß === DIAGNOSIS COMPLETE ===")

    def test_ringtone_playback(self):
        """–¢–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–µ–ª–æ–¥–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        logger.info("üß™ === TESTING RINGTONE PLAYBACK ===")
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        self.diagnose_audio_system()
        
        # –ó–∞—Ç–µ–º –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        logger.info("Attempting test playback...")
        self.play_ringtone()

    def _on_sound_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self._sound_playing = False
        self._reset_play_button()
        if self._sound_check_event:
            self._sound_check_event.cancel()
            self._sound_check_event = None

    def play_ringtone(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ–ª–æ–¥–∏–∏"""
        logger.info(f"üéµ === STARTING RINGTONE PLAYBACK ===")
        logger.info(f"Selected ringtone: {self.selected_ringtone}")
        logger.info(f"Alarm fadein: {self.alarm_fadein}")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏
        self.stop_ringtone()
        
        try:
            folder = "media/ringtones"
            path = os.path.join(folder, self.selected_ringtone)
            logger.info(f"Ringtone path: {path}")
            logger.info(f"Path exists: {os.path.exists(path)}")
            
            if not os.path.exists(path):
                logger.error(f"‚ùå Ringtone file not found: {path}")
                self._play_sound("error")
                self._reset_play_button()
                return

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            try:
                file_size = os.path.getsize(path)
                logger.info(f"Ringtone file size: {file_size} bytes")
                if file_size == 0:
                    logger.error(f"‚ùå Ringtone file is empty: {path}")
                    self._play_sound("error")
                    self._reset_play_button()
                    return
            except Exception as e:
                logger.error(f"‚ùå Error checking file size: {e}")

            app = App.get_running_app()
            if not hasattr(app, 'audio_service') or not app.audio_service:
                logger.error("‚ùå Audio service not available")
                self._play_sound("error")
                self._reset_play_button()
                return
                
            audio_service = app.audio_service
            logger.info(f"AudioService before play - is_playing: {audio_service.is_playing}, current_file: {audio_service.current_file}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–≤—É–∫–∞
            # —á—Ç–æ–±—ã pygame mixer —É—Å–ø–µ–ª –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
            import time
            time.sleep(0.1)
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∏–Ω–≥—Ç–æ–Ω
            fadein_time = 2.0 if self.alarm_fadein else 0
            logger.info(f"üéµ Calling audio_service.play with fadein={fadein_time}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ audio_service.play
            try:
                audio_service.play(path, fadein=fadein_time)
                logger.info(f"‚úÖ audio_service.play() completed successfully")
            except Exception as play_error:
                logger.error(f"‚ùå Error in audio_service.play(): {play_error}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                self._play_sound("error")
                self._reset_play_button()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ play
            logger.info(f"AudioService after play - is_playing: {audio_service.is_playing}, current_file: {audio_service.current_file}")
            logger.info(f"AudioService is_busy(): {audio_service.is_busy()}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
            if audio_service.current_file and 'ringtones' in audio_service.current_file:
                self._sound_playing = True
                self._start_sound_monitoring()
                logger.info(f"‚úÖ Successfully started ringtone playback: {self.selected_ringtone}")
            else:
                logger.error(f"‚ùå AudioService didn't load ringtone - current_file: {audio_service.current_file}")
                self._play_sound("error")
                self._reset_play_button()
                return
                
        except Exception as e:
            logger.error(f"‚ùå Error playing ringtone: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            self._play_sound("error")
            self._reset_play_button()

    def stop_ringtone(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º–µ–ª–æ–¥–∏–∏"""
        logger.info(f"üõë === STOPPING RINGTONE ===")
        logger.info(f"_sound_playing before stop: {self._sound_playing}")
        
        try:
            app = App.get_running_app()
            if hasattr(app, 'audio_service') and app.audio_service:
                audio_service = app.audio_service
                current_file = getattr(audio_service, 'current_file', None)
                is_busy = audio_service.is_busy()
                
                logger.info(f"Audio service current_file: {current_file}")
                logger.info(f"Audio service is_busy: {is_busy}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∏–Ω–≥—Ç–æ–Ω–æ–≤
                if self._sound_playing or (current_file and 'ringtones' in current_file):
                    logger.info("üõë Stopping ringtone audio...")
                    audio_service.stop()
                    logger.info("‚úÖ Audio stopped")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
                    import time
                    time.sleep(0.05)
                else:
                    logger.info("‚ÑπÔ∏è Not stopping audio - no ringtone playing")
                        
            else:
                logger.warning("‚ö†Ô∏è Audio service not available for stop")
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._sound_playing = False
            if self._sound_check_event:
                self._sound_check_event.cancel()
                self._sound_check_event = None
                logger.info("üîá Sound monitoring stopped")
                
            logger.info("‚úÖ Ringtone stop completed")
            
        except Exception as e:
            logger.error(f"‚ùå Error stopping ringtone: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            self._sound_playing = False

    def refresh_theme(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        if not self._initialized:
            return
            
        tm = self.get_theme_manager()
        if not tm or not tm.is_loaded():
            return
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            main_widgets = [
                "hour_label", "minute_label", "active_button", "fadein_button", 
                "play_button", "ringtone_button",
                # –î–û–ë–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                "hour_plus_button", "hour_minus_button", 
                "minute_plus_button", "minute_minus_button",
                # –î–û–ë–ê–í–õ–ï–ù–û: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏
                "time_separator_label"
            ]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
            for widget_id in main_widgets:
                if hasattr(self, 'ids') and widget_id in self.ids:
                    widget = self.ids[widget_id]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç
                    if hasattr(widget, 'font_name'):
                        widget.font_name = tm.get_font("main")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                    if hasattr(widget, 'color'):
                        if widget_id in ["hour_label", "minute_label", "time_separator_label"]:
                            # –í—Ä–µ–º—è –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
                            widget.color = tm.get_rgba("primary")
                        elif widget_id in ["hour_plus_button", "hour_minus_button", 
                                         "minute_plus_button", "minute_minus_button"]:
                            # –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ - –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
                            widget.color = tm.get_rgba("primary")
                        elif widget_id == "active_button":
                            # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            widget.color = tm.get_rgba("primary") if self.alarm_active else tm.get_rgba("text_secondary")
                        elif widget_id == "fadein_button":
                            # –ö–Ω–æ–ø–∫–∞ fadein - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                            widget.color = tm.get_rgba("primary") if self.alarm_fadein else tm.get_rgba("text_secondary")
                        elif widget_id == "play_button":
                            # –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è - –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
                            widget.color = tm.get_rgba("primary")
                        else:
                            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
                            widget.color = tm.get_rgba("text")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –∫–Ω–æ–ø–æ–∫
                    if hasattr(widget, 'background_normal'):
                        widget.background_normal = tm.get_image("button_bg")
                        widget.background_down = tm.get_image("button_bg_active")
                        
            # –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            day_buttons = [
                "repeat_mon", "repeat_tue", "repeat_wed", "repeat_thu", 
                "repeat_fri", "repeat_sat", "repeat_sun"
            ]
            
            for btn_id in day_buttons:
                if hasattr(self, 'ids') and btn_id in self.ids:
                    btn = self.ids[btn_id]
                    day = btn_id.split("_")[1].capitalize()
                    is_active = day in self.alarm_repeat
                    
                    if hasattr(btn, 'font_name'):
                        btn.font_name = tm.get_font("main")
                    if hasattr(btn, 'color'):
                        btn.color = tm.get_rgba("primary") if is_active else tm.get_rgba("text_secondary")
                    if hasattr(btn, 'background_normal'):
                        btn.background_normal = tm.get_image("button_bg")
                        btn.background_down = tm.get_image("button_bg_active")

            # –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–µ–π–±–ª—ã
            additional_labels = [
                "enable_label",  # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–µ–π–±–ª Enable
            ]
            
            for label_id in additional_labels:
                if hasattr(self, 'ids') and label_id in self.ids:
                    label = self.ids[label_id]
                    if hasattr(label, 'font_name'):
                        label.font_name = tm.get_font("main")
                    if hasattr(label, 'color'):
                        label.color = tm.get_rgba("text")

            # –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            if hasattr(self, 'ids') and 'active_button' in self.ids:
                self.ids.active_button.text = "ON" if self.alarm_active else "OFF"
                
            # –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ fadein —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            if hasattr(self, 'ids') and 'fadein_button' in self.ids:
                self.ids.fadein_button.text = "ON" if self.alarm_fadein else "OFF"
                        
            logger.debug("‚úÖ Alarm screen theme refreshed successfully")
                        
        except Exception as e:
            logger.error(f"‚ùå Error refreshing alarm theme: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")

    def refresh_text(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not self._initialized:
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
        self._update_toggle_buttons()