#!/bin/bash
# ========================
# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è AudioService
# ========================

echo "üîß === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø AUDIOSERVICE ==="
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "main.py" ] || [ ! -d "services" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ Bedrock"
    echo "   –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–∞–π–ª—ã main.py –∏ –ø–∞–ø–∫–∞ services/"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
echo "üíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ $BACKUP_DIR/"
mkdir -p "$BACKUP_DIR"

if [ -f "services/audio_service.py" ]; then
    cp "services/audio_service.py" "$BACKUP_DIR/audio_service_original.py"
    echo "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_DIR/audio_service_original.py"
else
    echo "‚ö†Ô∏è  –§–∞–π–ª services/audio_service.py –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º pygame
python3 -c "import pygame; print('‚úÖ pygame –¥–æ—Å—Ç—É–ø–µ–Ω')" 2>/dev/null || {
    echo "‚ùå pygame –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pygame"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º app.logger
python3 -c "from app.logger import app_logger; print('‚úÖ app.logger –¥–æ—Å—Ç—É–ø–µ–Ω')" 2>/dev/null || {
    echo "‚ùå app.logger –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º alsaaudio (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
python3 -c "import alsaaudio; print('‚úÖ alsaaudio –¥–æ—Å—Ç—É–ø–µ–Ω')" 2>/dev/null || {
    echo "‚ö†Ô∏è  alsaaudio –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Pi 5)"
    echo "   –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: sudo apt install python3-alsaaudio"
}

echo ""
echo "üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AudioService..."

# –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AudioService
cat > services/audio_service.py << 'EOF'
# services/audio_service.py
# –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û v2.1.1: –£–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

import os
import time
import threading
from pygame import mixer
from app.logger import app_logger as logger

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ALSA –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
try:
    import alsaaudio
    ALSA_AVAILABLE = True
except ImportError:
    ALSA_AVAILABLE = False
    logger.warning("alsaaudio not available - using default pygame mixer")


class AudioService:
    """
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ 
    - –£–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    - –£–±—Ä–∞–Ω—ã –¥–æ—Ä–æ–≥–∏–µ inspect.stack() –≤—ã–∑–æ–≤—ã
    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω logging
    - –£–ª—É—á—à–µ–Ω thread safety
    """
    
    def __init__(self):
        self.is_playing = False
        self.current_file = None
        self.is_long_audio = False
        self.last_play_time = 0
        self._is_stopped = False
        self.audio_device = None
        self._mixer_initialized = False
        self._init_lock = threading.RLock()  # –ò–ó–ú–ï–ù–ï–ù–û: RLock –≤–º–µ—Å—Ç–æ Lock
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._service_version = "2.1.1"  # –í–µ—Ä—Å–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        self._instance_id = id(self)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.debug(f"AudioService v{self._service_version} initializing")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—É
        self._safe_init_audio()
        
        logger.info("AudioService initialization complete")

    def _safe_init_audio(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with self._init_lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ mixer
                if mixer.get_init():
                    logger.debug("Pygame mixer already initialized")
                    self._mixer_initialized = True
                    self.audio_device = "system_default"
                    return

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                self._safe_quit_mixer()
                
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–±—ã—Å—Ç—Ä–æ, –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
                usb_device = self._find_usb_audio_device()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                if usb_device and self._init_pygame_with_device(usb_device):
                    logger.info(f"USB audio device initialized: {usb_device}")
                elif self._init_pygame_default():
                    logger.info("System default audio initialized")
                else:
                    logger.error("Failed to initialize any audio device")
                    self._mixer_initialized = False
                    return
                
                self._mixer_initialized = True
                
        except Exception as e:
            logger.error(f"Audio initialization error: {e}")
            self._mixer_initialized = False

    def _find_usb_audio_device(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not ALSA_AVAILABLE:
            return None
            
        try:
            cards = alsaaudio.cards()
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for i, card_name in enumerate(cards):
                if any(usb_indicator in card_name.lower() for usb_indicator in ['usb', 'gs3']):
                    return f"hw:{i},0"
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            
        return None

    def _init_pygame_with_device(self, device):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        try:
            import os
            os.environ['SDL_AUDIODRIVER'] = 'alsa'
            os.environ['AUDIODEV'] = device
            
            mixer.pre_init(frequency=44100, size=-16, channels=2, buffer=1024)
            mixer.init()
            
            self.audio_device = device
            return True
            
        except Exception:
            return False

    def _init_pygame_default(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            mixer.pre_init(frequency=44100, size=-16, channels=2, buffer=1024)
            mixer.init()
            self.audio_device = "system_default"
            return True
        except Exception:
            return False

    def _safe_quit_mixer(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ mixer"""
        try:
            if mixer.get_init():
                mixer.quit()
                time.sleep(0.05)
        except Exception:
            pass

    def is_mixer_initialized(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ mixer"""
        try:
            return self._mixer_initialized and mixer.get_init() is not None
        except Exception:
            self._mixer_initialized = False
            return False

    def play(self, filepath, fadein=0):
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        - –£–±—Ä–∞–Ω –¥–æ—Ä–æ–≥–æ–π inspect.stack() –≤—ã–∑–æ–≤
        - –£–±—Ä–∞–Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        - –£–ø—Ä–æ—â–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        if not filepath or not os.path.isfile(filepath):
            logger.warning(f"Audio file not found: {filepath}")
            return
            
        # –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: mixer –≥–æ—Ç–æ–≤?
        if not self.is_mixer_initialized():
            logger.warning("AudioService: mixer not ready")
            return
            
        try:
            with self._init_lock:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—É–¥–∏–æ (–±—ã—Å—Ç—Ä–æ)
                file_size = os.path.getsize(filepath)
                self.is_long_audio = file_size > 1024 * 1024
                
                # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                logger.debug(f"Playing: {os.path.basename(filepath)}")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
                if mixer.music.get_busy():
                    mixer.music.stop()
                    time.sleep(0.02)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
                mixer.music.load(filepath)
                
                if fadein > 0:
                    mixer.music.play(loops=0, fade_ms=int(fadein * 1000))
                else:
                    mixer.music.play(loops=0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.is_playing = True
                self.current_file = filepath
                self.last_play_time = time.time()
                
                # –£–ü–†–û–©–ï–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                logger.debug(f"‚úÖ Playing: {os.path.basename(filepath)}")
                
        except Exception as e:
            logger.error(f"AudioService play error: {e}")
            self._reset_state()

    def play_async(self, filepath, fadein=0):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        threading.Thread(
            target=self.play,
            args=(filepath,),
            kwargs={"fadein": fadein},
            daemon=True,
        ).start()

    def stop(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if not self.is_mixer_initialized():
            self._reset_state()
            return
        
        try:
            with self._init_lock:
                if mixer.music.get_busy():
                    mixer.music.stop()
                    time.sleep(0.02)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception as e:
            logger.error(f"AudioService stop error: {e}")
        finally:
            self._reset_state()

    def _reset_state(self):
        """–°–±—Ä–æ—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.is_playing = False
        self.current_file = None
        self.is_long_audio = False

    def is_busy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if not self.is_mixer_initialized():
            if self.is_playing:
                self._reset_state()
            return False
            
        try:
            busy = mixer.music.get_busy()
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if not busy and self.is_playing:
                self._reset_state()
            return busy
        except Exception:
            self._reset_state()
            return False

    def set_volume(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        if not self.is_mixer_initialized():
            return
            
        try:
            volume = max(0.0, min(1.0, value))
            mixer.music.set_volume(volume)
        except Exception as e:
            logger.error(f"AudioService set_volume error: {e}")

    def diagnose_state(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        try:
            mixer_init = self.is_mixer_initialized()
            pygame_busy = mixer.music.get_busy() if mixer_init else False
            pygame_init = mixer.get_init() if mixer_init else None
            
            return {
                "instance_id": self._instance_id,
                "service_version": self._service_version,
                "mixer_initialized": mixer_init,
                "is_playing": self.is_playing,
                "current_file": self.current_file,
                "is_long_audio": self.is_long_audio,
                "pygame_busy": pygame_busy,
                "pygame_init": pygame_init,
                "audio_device": self.audio_device,
                "alsa_available": ALSA_AVAILABLE
            }
        except Exception as e:
            return {"error": str(e), "instance_id": self._instance_id}

    def verify_instance(self):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ AudioService"""
        return {
            "class_name": self.__class__.__name__,
            "instance_id": self._instance_id,
            "service_version": getattr(self, '_service_version', 'unknown'),
            "has_diagnose_state": hasattr(self, 'diagnose_state'),
            "has_play": hasattr(self, 'play'),
            "has_stop": hasattr(self, 'stop'),
            "methods": [method for method in dir(self) if not method.startswith('_')]
        }


# –ö–†–ò–¢–ò–ß–ù–û: –ù–ï —Å–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
EOF

echo "‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AudioService –ø—Ä–∏–º–µ–Ω–µ–Ω"
echo ""
echo "üîÑ –í–ê–ñ–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:"
echo "   ‚úÖ –£–±—Ä–∞–Ω—ã –¥–æ—Ä–æ–≥–∏–µ inspect.stack() –≤—ã–∑–æ–≤—ã"
echo "   ‚úÖ –£–º–µ–Ω—å—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–≤—É–∫–µ"
echo "   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ (0.02s –≤–º–µ—Å—Ç–æ 0.05s)"
echo "   ‚úÖ –£–ª—É—á—à–µ–Ω thread safety (RLock)"
echo "   ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è USB –∞—É–¥–∏–æ"
echo ""
echo "üì¶ –†–ï–ó–ï–†–í–ù–ê–Ø –ö–û–ü–ò–Ø:"
echo "   –û—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $BACKUP_DIR/audio_service_original.py"
echo ""
echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:"
echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python3 main.py"
echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–µ verbose —Å–æ–æ–±—â–µ–Ω–∏–π"
echo "   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤"
echo "   4. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –®–∞–≥—É 4 –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo ""
echo "üîô –û–¢–ö–ê–¢ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω):"
echo "   cp $BACKUP_DIR/audio_service_original.py services/audio_service.py"
