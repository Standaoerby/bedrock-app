#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GS3 USB audio
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É AudioService –∏ VolumeService —Å –≤–∞—à–∏–º GS3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
"""

import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/home/standa/bedrock-app')

try:
    from services.audio_service import audio_service
    from services.volume_service import volume_service
    print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def test_audio_service():
    """–¢–µ—Å—Ç AudioService"""
    print("\nüéµ === –¢–ï–°–¢ AUDIOSERVICE ===")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_info = audio_service.get_device_info()
    print(f"–ê—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['device']}")
    print(f"–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_info['device_type']}")
    print(f"ALSA –¥–æ—Å—Ç—É–ø–Ω–∞: {device_info['alsa_available']}")
    print(f"Pygame –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {device_info['mixer_initialized']}")
    
    if device_info.get('pygame_settings'):
        settings = device_info['pygame_settings']
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ pygame: {settings['frequency']}Hz, {settings['channels']} –∫–∞–Ω–∞–ª–æ–≤")
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    devices = audio_service.get_available_devices()
    print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(devices)}")
    for i, dev in enumerate(devices):
        print(f"  {i}: {dev['name']} ({dev['device']}) - {dev['type']}")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state = audio_service.diagnose_state()
    print(f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ AudioService:")
    for key, value in state.items():
        print(f"  {key}: {value}")

def test_volume_service():
    """–¢–µ—Å—Ç VolumeService"""
    print("\nüîä === –¢–ï–°–¢ VOLUMESERVICE ===")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã
    status = volume_service.diagnose_audio_system()
    
    print(f"\n–°—Ç–∞—Ç—É—Å VolumeService:")
    print(f"  ALSA –¥–æ—Å—Ç—É–ø–Ω–∞: {status['alsa_available']}")
    print(f"  USB –∫–∞—Ä—Ç –Ω–∞–π–¥–µ–Ω–æ: {status['usb_cards_count']}")
    print(f"  –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Å–µ—Ä–æ–≤: {status['available_mixers_count']}")
    print(f"  –ê–∫—Ç–∏–≤–Ω—ã–π –º–∏–∫—Å–µ—Ä: {status['active_mixer']}")
    print(f"  –ö–∞—Ä—Ç–∞ –º–∏–∫—Å–µ—Ä–∞: {status['mixer_card']}")
    print(f"  –¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {status['current_volume']}%")
    print(f"  GPIO –¥–æ—Å—Ç—É–ø–µ–Ω: {status['gpio_available']} ({status['gpio_library']})")
    
    # –î–µ—Ç–∞–ª–∏ USB –∫–∞—Ä—Ç
    if status['usb_cards']:
        print(f"\nUSB –∞—É–¥–∏–æ–∫–∞—Ä—Ç—ã:")
        for card in status['usb_cards']:
            print(f"  - {card['name']} (–∫–∞—Ä—Ç–∞ {card['index']})")
    
    # –î–µ—Ç–∞–ª–∏ –º–∏–∫—Å–µ—Ä–æ–≤
    if status['available_mixers']:
        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–∫—Å–µ—Ä—ã:")
        for mixer in status['available_mixers']:
            print(f"  - {mixer['name']} –Ω–∞ –∫–∞—Ä—Ç–µ {mixer['card_index']} ({mixer['card_name']})")

def test_volume_control():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é"""
    print("\nüéöÔ∏è === –¢–ï–°–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–û–ú–ö–û–°–¢–¨–Æ ===")
    
    if not volume_service._active_mixer:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∏–∫—Å–µ—Ä–∞ - —Ç–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        current_vol = volume_service.get_volume()
        print(f"–¢–µ–∫—É—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å: {current_vol}%")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        test_volumes = [30, 50, 70, current_vol]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏—Å—Ö–æ–¥–Ω–æ–π
        
        for vol in test_volumes:
            print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å: {vol}%")
            if volume_service.set_volume(vol):
                time.sleep(0.5)
                actual_vol = volume_service.get_volume()
                print(f"  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {actual_vol}%")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")

def test_audio_playback():
    """–¢–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)"""
    print("\nüé∂ === –¢–ï–°–¢ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø ===")
    
    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
    test_files = [
        '/usr/share/sounds/alsa/Front_Left.wav',
        'sounds/startup.wav',
        'sounds/click.wav'
    ]
    
    played_any = False
    for filepath in test_files:
        if os.path.exists(filepath):
            print(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º: {filepath}")
            try:
                audio_service.play(filepath)
                time.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                audio_service.stop()
                print(f"  ‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                played_any = True
                break
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    if not played_any:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ === –¢–ï–°–¢ GS3 USB AUDIO –°–ò–°–¢–ï–ú–´ ===")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∞—É–¥–∏–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º GS3")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AudioService
        test_audio_service()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º VolumeService
        test_volume_service()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
        test_volume_control()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        test_audio_playback()
        
        print("\n‚úÖ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()