# main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""
–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ ‚Üí –∑–∞–≤–∏—Å–∏–º—ã–µ)
‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ WARNING'–æ–≤ "service not available" 
‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã
‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

from kivy.config import Config
import sys
import threading
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
Config.set('graphics', 'width', '1024')
Config.set('graphics', 'height', '600')
if platform.system() == "Linux":
    Config.set('graphics', 'fullscreen', 'auto')
    Config.set('graphics', 'borderless', '1')
    Config.set('graphics', 'show_cursor', '0')
else:
    Config.set('graphics', 'fullscreen', '0')
    Config.set('graphics', 'borderless', '0')
    Config.set('graphics', 'show_cursor', '1')

from kivy.app import App
from kivy.lang import Builder
from kivy.clock import Clock

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.localizer import localizer
from app.user_config import user_config
from app.logger import app_logger as logger
from app.theme_manager import ThemeManager

# –ò–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤
from widgets.root_widget import RootWidget
from widgets.top_menu import TopMenu

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
from pages.home import HomeScreen
from pages.alarm import AlarmScreen
from pages.schedule import ScheduleScreen
from pages.weather import WeatherScreen
from pages.pigs import PigsScreen
from pages.settings import SettingsScreen

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.audio_service import AudioService
from services.alarm_service import AlarmService
from services.notifications_service import NotificationService
from services.weather_service import WeatherService
from services.sensor_service import SensorService
from services.pigs_service import PigsService
from services.schedule_service import ScheduleService
from services.auto_theme_service import AutoThemeService
from services.volume_service import VolumeControlService

# AlarmClock —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
try:
    from services.alarm_clock import AlarmClock
    ALARM_CLOCK_AVAILABLE = True
except ImportError as e:
    logger.warning(f"AlarmClock not available: {e}")
    ALARM_CLOCK_AVAILABLE = False


class BedrockApp(App):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Bedrock 2.0 —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.user_config = user_config
        self.localizer = localizer
        self.theme_manager = None
        
        # ‚úÖ –ù–û–í–û–ï: –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._core_services_initialized = False
        self._dependent_services_initialized = False
        self._initialization_in_progress = False
        
        # –°–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        self.audio_service = None
        self.alarm_service = None
        self.notification_service = None
        self.weather_service = None
        self.sensor_service = None
        self.pigs_service = None
        self.schedule_service = None
        self.auto_theme_service = None
        self.volume_service = None
        self.alarm_clock = None
        
        logger.info("BedrockApp instance created")

    def build_config(self, config):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Kivy"""
        pass

    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ Starting Bedrock 2.0...")
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if self._initialization_in_progress:
                logger.warning("Initialization already in progress")
                return
                
            self._initialization_in_progress = True
            
            # 1. ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è theme_manager –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã (–ü–†–ò–û–†–ò–¢–ï–¢!)
            self._initialize_theme_manager()
            
            # 2. ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ KV —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º—ã
            self._load_kv_files()
            
            # 3. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            root = RootWidget()
            
            # 4. ‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–∏–∑–±–µ–≥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É UI)
            Clock.schedule_once(lambda dt: self._initialize_services_staged(), 0.1)
            
            logger.info("‚úÖ Bedrock 2.0 UI initialized successfully")
            return root
            
        except Exception as e:
            logger.error(f"‚ùå Critical error during build: {e}")
            raise
        finally:
            self._initialization_in_progress = False

    def _initialize_theme_manager(self):
        """‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã"""
        try:
            logger.info("üé® Initializing theme manager...")
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π theme_manager
            self.theme_manager = ThemeManager()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            theme_name = self.user_config.get("theme", "minecraft")
            theme_variant = self.user_config.get("variant", "light")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if self.theme_manager.load(theme_name, theme_variant):
                logger.info(f"‚úÖ Theme loaded: {theme_name}/{theme_variant}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
                if logger.level <= 10:  # DEBUG level
                    stats = self.theme_manager.get_cache_stats()
                    logger.debug(f"Theme cache initialized: {stats['cached_fonts']} fonts, {stats['cached_colors']} colors")
            else:
                logger.warning(f"‚ö†Ô∏è Failed to load theme, using default")
                
        except Exception as e:
            logger.error(f"‚ùå Error initializing theme manager: {e}")
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π theme_manager
            self.theme_manager = ThemeManager()

    def _load_kv_files(self):
        """‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ KV —Ñ–∞–π–ª–æ–≤"""
        try:
            logger.info("üìÅ Loading KV files...")
            
            kv_files = [
                "widgets/root_widget.kv",
                "widgets/top_menu.kv", 
                "widgets/overlay_card.kv",
                "pages/home.kv",
                "pages/alarm.kv",
                "pages/schedule.kv",
                "pages/weather.kv",
                "pages/pigs.kv",
                "pages/settings.kv"
            ]
            
            loaded_count = 0
            for kv_file in kv_files:
                try:
                    Builder.load_file(kv_file)
                    loaded_count += 1
                    logger.debug(f"‚úÖ Loaded KV: {kv_file}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to load KV file {kv_file}: {e}")
                    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑-–∑–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    
            logger.info(f"‚úÖ Loaded {loaded_count}/{len(kv_files)} KV files")
                    
        except Exception as e:
            logger.error(f"‚ùå Error loading KV files: {e}")

    def _initialize_services_staged(self):
        """‚úÖ –ù–û–í–û–ï: –ü–æ—ç—Ç–∞–ø–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üîß Initializing services (staged)...")
            
            # –≠—Ç–∞–ø 1: –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self._initialize_independent_services()
            
            # –≠—Ç–∞–ø 2: –°–µ—Ä–≤–∏—Å—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (—á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É)
            Clock.schedule_once(lambda dt: self._initialize_dependent_services(), 0.5)
            
        except Exception as e:
            logger.error(f"Error in staged services initialization: {e}")

    def _initialize_independent_services(self):
        """‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–ë–ï–ó WARNING'–æ–≤)"""
        try:
            logger.info("üîß Initializing independent services...")
            
            # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            independent_services = [
                ('audio_service', AudioService, 'Audio system'),
                ('notification_service', NotificationService, 'Notifications'),
                ('alarm_service', AlarmService, 'Alarm management'),
                ('pigs_service', PigsService, 'Pigs management'),
                ('schedule_service', ScheduleService, 'Schedule management'),
            ]
            
            initialized_count = 0
            
            for service_name, service_class, description in independent_services:
                try:
                    service_instance = service_class()
                    setattr(self, service_name, service_instance)
                    logger.info(f"‚úÖ {service_name} initialized ({description})")
                    initialized_count += 1
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {service_name} not available: {e}")
                    setattr(self, service_name, None)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WeatherService —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            self._initialize_weather_service()
            if self.weather_service:
                initialized_count += 1
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SensorService
            self._initialize_sensor_service()
            if self.sensor_service:
                initialized_count += 1
                
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VolumeService
            self._initialize_volume_service()
            if self.volume_service:
                initialized_count += 1
            
            self._core_services_initialized = True
            logger.info(f"‚úÖ Independent services initialized: {initialized_count}/8")
            
        except Exception as e:
            logger.error(f"Error initializing independent services: {e}")

    def _initialize_weather_service(self):
        """‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WeatherService —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        try:
            location = self.user_config.get("location", {})
            lat = location.get("latitude", 51.5566)
            lon = location.get("longitude", -0.178)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            lat = float(lat) if lat is not None else 51.5566
            lon = float(lon) if lon is not None else -0.178
            
            self.weather_service = WeatherService(lat=lat, lon=lon)
            logger.info(f"‚úÖ weather_service initialized (lat: {lat}, lon: {lon})")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è weather_service not available: {e}")
            self.weather_service = None

    def _initialize_sensor_service(self):
        """‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SensorService"""
        try:
            self.sensor_service = SensorService()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ start
            if hasattr(self.sensor_service, 'start'):
                self.sensor_service.start()
                
            logger.info("‚úÖ sensor_service initialized")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è sensor_service not available: {e}")
            self.sensor_service = None

    def _initialize_volume_service(self):
        """‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VolumeService"""
        try:
            self.volume_service = VolumeControlService()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ start
            if hasattr(self.volume_service, 'start'):
                self.volume_service.start()
                
            logger.info("‚úÖ volume_service initialized")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è volume_service not available: {e}")
            self.volume_service = None

    def _initialize_dependent_services(self):
        """‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        try:
            logger.info("üîÑ Initializing dependent services...")
            
            # AutoThemeService —Ç—Ä–µ–±—É–µ—Ç sensor_service –∏ theme_manager
            self._initialize_auto_theme_service()
            
            # AlarmClock —Ç—Ä–µ–±—É–µ—Ç alarm_service –∏ audio_service  
            self._initialize_alarm_clock()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            self._setup_service_configurations()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
            Clock.schedule_once(lambda dt: self._force_theme_refresh(), 0.5)
            
            self._dependent_services_initialized = True
            logger.info("‚úÖ Dependent services initialized")
            
        except Exception as e:
            logger.error(f"Error initializing dependent services: {e}")

    def _initialize_auto_theme_service(self):
        """‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutoThemeService —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        try:
            if self.sensor_service is not None and self.theme_manager is not None:
                self.auto_theme_service = AutoThemeService(
                    sensor_service=self.sensor_service,
                    theme_manager=self.theme_manager
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
                if hasattr(self.auto_theme_service, 'start'):
                    self.auto_theme_service.start()
                    
                logger.info("‚úÖ auto_theme_service initialized")
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ç–µ–º—ã
                Clock.schedule_once(lambda dt: self._initial_auto_theme_check(), 2.0)
            else:
                logger.warning("‚ö†Ô∏è auto_theme_service dependencies not available")
                self.auto_theme_service = None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è auto_theme_service not available: {e}")
            self.auto_theme_service = None

    def _initialize_alarm_clock(self):
        """‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AlarmClock —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: AlarmClock —Å–æ–∑–¥–∞–µ—Ç—Å—è –ë–ï–ó –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
            if ALARM_CLOCK_AVAILABLE:
                self.alarm_clock = AlarmClock()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º alarm clock
                if hasattr(self.alarm_clock, 'start'):
                    self.alarm_clock.start()
                    
                logger.info("‚úÖ alarm_clock initialized")
            else:
                logger.warning("‚ö†Ô∏è alarm_clock not available (module not found)")
                self.alarm_clock = None
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è alarm_clock not available: {e}")
            self.alarm_clock = None

    def _setup_service_configurations(self):
        """‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ volume service
            if self.volume_service is not None:
                initial_volume = self.user_config.get("volume", 65)  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0.0-1.0 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if initial_volume > 1:
                        volume_float = initial_volume / 100.0
                    else:
                        volume_float = initial_volume
                    self.volume_service.set_volume(volume_float)
                    logger.info(f"[Volume service configured with initial volume] {initial_volume}%")
                except Exception as e:
                    logger.error(f"Error setting initial volume: {e}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ auto-theme (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã API)
            if self.auto_theme_service is not None:
                auto_enabled = self.user_config.get("auto_theme", False)
                threshold = self.user_config.get("light_threshold", 3.0)
                
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º set_enabled –∏ calibrate_sensor
                    if auto_enabled:
                        self.auto_theme_service.set_enabled(True)
                        logger.info("Auto-theme enabled")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —á–µ—Ä–µ–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
                    self.auto_theme_service.calibrate_sensor(threshold)
                    logger.info(f"[Auto-theme threshold set] {threshold}s")
                    
                except Exception as e:
                    logger.error(f"Error configuring auto-theme: {e}")
                    
        except Exception as e:
            logger.error(f"Error setting up service configurations: {e}")

    def _initial_auto_theme_check(self):
        """–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            if self.auto_theme_service is not None:
                self.auto_theme_service.check_and_update_theme()
                logger.info("Initial auto-theme check completed")
        except Exception as e:
            logger.error(f"Error in initial auto-theme check: {e}")

    def _force_theme_refresh(self):
        """‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤"""
        try:
            logger.info("üé® Forcing theme refresh for all screens...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º root widget
            if self.root and hasattr(self.root, 'refresh_theme'):
                Clock.schedule_once(lambda dt: self.root.refresh_theme(), 0.1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ screen_manager
            if self.root and hasattr(self.root, 'screen_manager'):
                sm = self.root.screen_manager
                if sm and hasattr(sm, 'screens'):
                    for i, screen in enumerate(sm.screens):
                        if hasattr(screen, 'refresh_theme'):
                            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                            delay = 0.2 + (i * 0.1)
                            Clock.schedule_once(lambda dt, s=screen: s.refresh_theme(), delay)
                            
            logger.info("‚úÖ Theme refresh scheduled for all screens")
            
        except Exception as e:
            logger.error(f"Error forcing theme refresh: {e}")

    def on_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            Clock.schedule_once(lambda dt: self._finalize_startup(), 1.0)
            
        except Exception as e:
            logger.error(f"Error in on_start: {e}")

    def _finalize_startup(self):
        """‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üéâ Bedrock 2.0 started successfully!")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            self._final_diagnostics()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º add)
            if self.notification_service:
                username = self.user_config.get("username", "User")
                self.notification_service.add(
                    f"Welcome back, {username}! Bedrock 2.0 is ready.", 
                    "system"
                )
                
        except Exception as e:
            logger.error(f"Error in startup finalization: {e}")

    def _final_diagnostics(self):
        """‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üìä Running final diagnostics...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º theme_manager
            if self.theme_manager:
                logger.info(f"[Theme Manager] {self.theme_manager.current_theme}/{self.theme_manager.current_variant}")
                logger.info(f"[Theme loaded] {self.theme_manager.is_loaded()}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
                if logger.level <= 10:  # DEBUG level
                    stats = self.theme_manager.get_cache_stats()
                    logger.debug(f"[Theme cache stats] {stats['hit_rate']} hit rate, {stats['cached_fonts']} fonts cached")
            
            # –°—á–∏—Ç–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            services = [
                'audio_service', 'alarm_service', 'notification_service',
                'weather_service', 'sensor_service', 'volume_service',
                'pigs_service', 'schedule_service', 'auto_theme_service',
                'alarm_clock'
            ]
            
            initialized_count = sum(1 for service in services if getattr(self, service, None) is not None)
            logger.info(f"[Services initialized] {initialized_count}/{len(services)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º root widget
            if self.root:
                logger.info("Root widget created successfully")
                if hasattr(self.root, 'screen_manager') and self.root.screen_manager:
                    screens_count = len(self.root.screen_manager.screens)
                    logger.info(f"[Screens loaded] {screens_count}")
            
            logger.info("‚úÖ Diagnostics completed")
            
        except Exception as e:
            logger.error(f"Error in diagnostics: {e}")

    def on_stop(self):
        """‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üõë Shutting down Bedrock 2.0...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            services_to_stop = [
                'auto_theme_service', 'alarm_clock', 'volume_service',
                'sensor_service', 'audio_service'
            ]
            
            stopped_count = 0
            for service_name in services_to_stop:
                service = getattr(self, service_name, None)
                if service and hasattr(service, 'stop'):
                    try:
                        service.stop()
                        logger.info(f"Stopped {service_name}")
                        stopped_count += 1
                    except Exception as e:
                        logger.error(f"Error stopping {service_name}: {e}")
            
            logger.info(f"‚úÖ Bedrock 2.0 shutdown complete ({stopped_count} services stopped)")
            
        except Exception as e:
            logger.error(f"Error during shutdown: {e}")


if __name__ == "__main__":
    try:
        app = BedrockApp()
        app.run()
    except KeyboardInterrupt:
        logger.info("Application terminated by user")
    except Exception as e:
        logger.error(f"Critical application error: {e}")
        sys.exit(1)