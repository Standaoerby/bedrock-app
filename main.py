# main.py ‚Äî –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ—Ç–µ–º–æ–π –ø–æ –¥–∞—Ç—á–∏–∫—É –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç–∏
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ AlarmClock, —É–ª—É—á—à–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

from kivy.config import Config
import sys
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
Config.set('graphics', 'width', '1024')
Config.set('graphics', 'height', '600')
if platform.system() == "Linux":
    Config.set('graphics', 'fullscreen', 'auto')
    Config.set('graphics', 'borderless', '1')
    Config.set('graphics', 'show_cursor', '0')
else:
    Config.set('graphics', 'fullscreen', '0')
    Config.set('graphics', 'borderless', '0')
    Config.set('graphics', 'show_cursor', '1')

from kivy.app import App
from kivy.lang import Builder
from kivy.clock import Clock

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
from pages.home import HomeScreen
from pages.alarm import AlarmScreen
from pages.schedule import ScheduleScreen
from pages.weather import WeatherScreen
from pages.pigs import PigsScreen
from pages.settings import SettingsScreen

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.localizer import localizer
from app.user_config import user_config
from app.logger import app_logger as logger

# –ò–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤
from widgets.root_widget import RootWidget
from widgets.top_menu import TopMenu

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤, –∞ –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
from services.audio_service import AudioService
from services.alarm_service import AlarmService
from services.notifications_service import NotificationService
from services.weather_service import WeatherService
from services.sensor_service import SensorService
from services.pigs_service import PigsService
from services.schedule_service import ScheduleService
from services.auto_theme_service import AutoThemeService
from services.volume_service import VolumeControlService

# –ò–°–ü–†–ê–í–õ–ï–ù–û: AlarmClock –∏–º–ø–æ—Ä—Ç —Å –∑–∞—â–∏—Ç–æ–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
try:
    from services.alarm_clock import AlarmClock
    ALARM_CLOCK_AVAILABLE = True
    logger.info("‚úÖ AlarmClock class imported successfully")
except ImportError as e:
    logger.warning(f"‚ùå AlarmClock unavailable: {e}")
    AlarmClock = None
    ALARM_CLOCK_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º theme_manager –æ—Ç–¥–µ–ª—å–Ω–æ –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy
from app.theme_manager import ThemeManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV —Ñ–∞–π–ª—ã
Builder.load_file('widgets/root_widget.kv')
Builder.load_file('widgets/top_menu.kv')
Builder.load_file('widgets/overlay_card.kv')
Builder.load_file('pages/home.kv')
Builder.load_file('pages/alarm.kv')
Builder.load_file('pages/schedule.kv')
Builder.load_file('pages/weather.kv')
Builder.load_file('pages/pigs.kv')
Builder.load_file('pages/settings.kv')

logger.info("=== Bedrock 2.1 Started ===")


class BedrockApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º theme_manager –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        self.theme_manager = ThemeManager()
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.localizer = localizer
        self.user_config = user_config
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ _initialize_services
        self.audio_service = None
        self.alarm_service = None
        self.notification_service = None
        self.weather_service = None
        self.sensor_service = None
        self.pigs_service = None
        self.schedule_service = None
        self.alarm_clock = None  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–¥–∏–Ω —Ä–∞–∑ –æ–±—ä—è–≤–ª—è–µ–º
        self.auto_theme_service = None
        self.volume_service = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self._running = False

    def build(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        logger.info("Building application...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._load_user_settings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self._initialize_services()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç
        root = RootWidget()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self._setup_events()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º –∏ –∞–≤—Ç–æ—Ç–µ–º—ã
        Clock.schedule_once(lambda dt: self._finalize_initialization(), 1.0)
        
        logger.info("Application built successfully")
        return root
    
    def _load_user_settings(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            theme = self.user_config.get("theme", "minecraft")
            variant = self.user_config.get("variant", "light") 
            language = self.user_config.get("language", "en")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ theme_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if hasattr(self, 'theme_manager') and self.theme_manager:
                if not self.theme_manager.load_theme(theme, variant):
                    logger.warning(f"Failed to load theme {theme}/{variant}, using default")
                    self.theme_manager.load_theme("minecraft", "light")
            else:
                logger.error("ThemeManager not initialized properly!")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ localizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if hasattr(self, 'localizer') and self.localizer:
                self.localizer.load(language)
                logger.info(f"Language loaded: {language}")
            else:
                logger.error("Localizer not initialized properly!")
            
        except Exception as e:
            logger.error(f"Error loading user settings: {e}")

    def _initialize_services(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º"""
        try:
            logger.info("Initializing services...")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AudioService –ø–µ—Ä–≤—ã–º
            try:
                logger.info("Initializing AudioService...")
                self.audio_service = AudioService()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                if hasattr(self.audio_service, 'diagnose_state'):
                    logger.info("‚úÖ AudioService initialized with diagnose_state method")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    diagnosis = self.audio_service.diagnose_state()
                    logger.info(f"AudioService diagnosis: {diagnosis}")
                else:
                    logger.error("‚ùå AudioService missing diagnose_state method")
                    
            except Exception as e:
                logger.error(f"CRITICAL: AudioService initialization failed: {e}")
                self.audio_service = None
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù!)
            services_config = [
                ('alarm_service', AlarmService, {}),
                ('notification_service', NotificationService, {}),
                ('weather_service', WeatherService, {
                    'lat': self.user_config.get('location', {}).get('latitude', 51.5566),
                    'lon': self.user_config.get('location', {}).get('longitude', -0.178)
                }),
                ('sensor_service', SensorService, {}),
                ('pigs_service', PigsService, {}),
                ('schedule_service', ScheduleService, {}),
                ('volume_service', VolumeControlService, {}),
            ]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            for service_name, service_class, kwargs in services_config:
                try:
                    logger.info(f"Initializing {service_name}...")
                    service_instance = service_class(**kwargs)
                    setattr(self, service_name, service_instance)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ start
                    if hasattr(service_instance, 'start'):
                        service_instance.start()
                    
                    logger.info(f"‚úÖ Service initialized: {service_name}")
                    
                except Exception as ex:
                    logger.error(f"‚ùå Failed to initialize {service_name}: {ex}")
                    setattr(self, service_name, None)

            # üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï–î–ò–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AlarmClock (—É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
            try:
                if ALARM_CLOCK_AVAILABLE and self.alarm_service:
                    logger.info("Initializing AlarmClock service...")
                    self.alarm_clock = AlarmClock()
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º alarm_clock
                    self.alarm_clock.start()
                    
                    logger.info("‚úÖ AlarmClock initialized and started successfully")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if hasattr(self.alarm_clock, 'running') and self.alarm_clock.running:
                        logger.info("‚úÖ AlarmClock is running correctly")
                    else:
                        logger.warning("‚ö†Ô∏è AlarmClock created but not running")
                        
                else:
                    if not ALARM_CLOCK_AVAILABLE:
                        logger.warning("‚ùå AlarmClock not available (import error)")
                    if not self.alarm_service:
                        logger.warning("‚ùå AlarmClock not initialized - AlarmService missing")
                    self.alarm_clock = None
                    
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize AlarmClock: {e}")
                import traceback
                logger.error(f"AlarmClock traceback: {traceback.format_exc()}")
                self.alarm_clock = None

            # üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: AutoThemeService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ü–û–°–õ–ï sensor_service –∏ theme_manager
            try:
                logger.info("Initializing auto_theme_service...")
                if self.sensor_service and self.theme_manager:
                    self.auto_theme_service = AutoThemeService(
                        sensor_service=self.sensor_service,
                        theme_manager=self.theme_manager
                    )
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
                    if hasattr(self.auto_theme_service, 'start'):
                        self.auto_theme_service.start()
                    
                    logger.info("‚úÖ Service initialized: auto_theme_service")
                else:
                    logger.error("‚ùå Cannot initialize auto_theme_service: missing dependencies")
                    logger.error(f"sensor_service available: {self.sensor_service is not None}")
                    logger.error(f"theme_manager available: {self.theme_manager is not None}")
                    self.auto_theme_service = None
                    
            except Exception as ex:
                logger.error(f"‚ùå Failed to initialize auto_theme_service: {ex}")
                self.auto_theme_service = None

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            self._setup_auto_theme()
            self._setup_volume_service()
            
            # –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            self._diagnose_services_state()
            
            logger.info("‚úÖ All services initialized")
            
        except Exception as e:
            logger.error(f"Critical error initializing services: {e}")
            import traceback
            logger.error(f"Services initialization traceback: {traceback.format_exc()}")

    def _diagnose_services_state(self):
        """–ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        logger.info("üîß === SERVICES DIAGNOSTIC ===")
        
        services_to_check = [
            'audio_service', 'alarm_service', 'alarm_clock', 'notification_service',
            'weather_service', 'sensor_service', 'auto_theme_service', 'volume_service'
        ]
        
        for service_name in services_to_check:
            service = getattr(self, service_name, None)
            if service:
                status = "‚úÖ Available"
                if hasattr(service, 'running'):
                    status += f" (running: {service.running})"
                logger.info(f"[{service_name:20}] {status}")
            else:
                logger.warning(f"[{service_name:20}] ‚ùå Not available")

    def _setup_auto_theme(self):
        """üö® –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if self.auto_theme_service and hasattr(self.auto_theme_service, 'start'):
                # –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ _initialize_services
                logger.debug("AutoTheme service already started")
            else:
                logger.warning("AutoTheme service not available or missing start method")
        except Exception as e:
            logger.error(f"Error setting up auto theme: {e}")

    def _setup_volume_service(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é"""
        try:
            if self.volume_service:
                logger.debug("Volume service initialized")
            else:
                logger.warning("Volume service not available")
        except Exception as e:
            logger.error(f"Error setting up volume service: {e}")

    def _setup_events(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            from app.event_bus import event_bus
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç–µ–º—ã
            event_bus.subscribe("theme_changed", self._on_theme_changed)
            event_bus.subscribe("variant_changed", self._on_variant_changed)
            event_bus.subscribe("language_changed", self._on_language_changed)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ç–µ–º—ã
            event_bus.subscribe("auto_theme_triggered", self._on_auto_theme_triggered)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            event_bus.subscribe("volume_changed", self._on_volume_changed)
            
            logger.info("Event handlers setup completed")
            
        except Exception as e:
            logger.error(f"Error setting up events: {e}")

    def _finalize_initialization(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è UI"""
        try:
            self._running = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            self._verify_services()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            self._perform_initial_diagnostics()
            
            logger.info("Application initialization completed successfully")
            
        except Exception as e:
            logger.error(f"Error in finalization: {e}")

    def _verify_services(self):
        """–ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîß === SERVICES VERIFICATION ===")
        
        critical_services = ['audio_service', 'alarm_service']
        important_services = ['alarm_clock', 'auto_theme_service', 'volume_service']
        
        for service_name in critical_services:
            service = getattr(self, service_name, None)
            if not service:
                logger.error(f"‚ùå CRITICAL: {service_name} is missing!")
            else:
                logger.info(f"‚úÖ {service_name} is available")
                
        for service_name in important_services:
            service = getattr(self, service_name, None)
            if not service:
                logger.warning(f"‚ö†Ô∏è {service_name} is missing")
            else:
                logger.info(f"‚úÖ {service_name} is available")

    def _perform_initial_diagnostics(self):
        """–ù–û–í–û–ï: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ audio_service
            if self.audio_service and hasattr(self.audio_service, 'diagnose_state'):
                self.audio_service.diagnose_state()
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ alarm_clock
            if self.alarm_clock:
                logger.info(f"AlarmClock status: running={getattr(self.alarm_clock, 'running', 'unknown')}")
                if hasattr(self.alarm_clock, '_alarm_active'):
                    logger.info(f"AlarmClock alarm_active: {self.alarm_clock._alarm_active}")
            
        except Exception as e:
            logger.error(f"Error in initial diagnostics: {e}")

    # ========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    # ========================================

    def _on_theme_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        try:
            theme = event_data.get("theme")
            variant = event_data.get("variant")
            if theme and variant:
                self.user_config.set("theme", theme)
                self.user_config.set("variant", variant)
                logger.debug(f"Theme saved to config: {theme}/{variant}")
        except Exception as e:
            logger.error(f"Error handling theme change: {e}")

    def _on_variant_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–µ–º—ã"""
        try:
            variant = event_data.get("variant")
            if variant:
                self.user_config.set("variant", variant)
                logger.debug(f"Variant saved to config: {variant}")
        except Exception as e:
            logger.error(f"Error handling variant change: {e}")

    def _on_language_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        try:
            language = event_data.get("language")
            if language and hasattr(self, 'localizer'):
                self.user_config.set("language", language)
                self.localizer.load(language)
                logger.debug(f"Language saved to config: {language}")
        except Exception as e:
            logger.error(f"Error handling language change: {e}")

    def _on_auto_theme_triggered(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        try:
            new_variant = event_data.get("variant")
            if new_variant and hasattr(self, 'theme_manager'):
                current_theme = self.user_config.get("theme", "minecraft")
                self.theme_manager.set_variant(new_variant)
                logger.debug(f"Auto-theme triggered: {current_theme}/{new_variant}")
        except Exception as e:
            logger.error(f"Error handling auto-theme trigger: {e}")

    def _on_volume_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            volume = event_data.get("volume")
            if volume is not None:
                self.user_config.set("volume", volume)
                logger.debug(f"Volume saved to config: {volume}")
        except Exception as e:
            logger.error(f"Error handling volume change: {e}")

    def on_stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("Stopping application services...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AlarmClock –ø–µ—Ä–≤—ã–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å popup –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            if hasattr(self, 'alarm_clock') and self.alarm_clock:
                try:
                    self.alarm_clock.stop()
                    logger.info("‚úÖ AlarmClock stopped")
                except Exception as e:
                    logger.error(f"Error stopping AlarmClock: {e}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            services_to_stop = [
                'auto_theme_service', 'volume_service', 'schedule_service',
                'pigs_service', 'sensor_service', 'weather_service',
                'notification_service', 'audio_service'
            ]
            
            for service_name in services_to_stop:
                if hasattr(self, service_name):
                    service = getattr(self, service_name)
                    if service and hasattr(service, 'stop'):
                        try:
                            service.stop()
                            logger.info(f"‚úÖ {service_name} stopped")
                        except Exception as e:
                            logger.error(f"Error stopping {service_name}: {e}")
            
            logger.info("Application shutdown completed")
            
        except Exception as e:
            logger.error(f"Error during application shutdown: {e}")
        
        return True

if __name__ == "__main__":
    try:
        app = BedrockApp()
        app.run()
    except Exception as e:
        logger.error(f"Critical application error: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("Application terminated")