# main.py ‚Äî –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ—Ç–µ–º–æ–π –ø–æ –¥–∞—Ç—á–∏–∫—É –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏

from kivy.config import Config
import sys
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
Config.set('graphics', 'width', '1024')
Config.set('graphics', 'height', '600')
if platform.system() == "Linux":
    Config.set('graphics', 'fullscreen', 'auto')
    Config.set('graphics', 'borderless', '1')
    Config.set('graphics', 'show_cursor', '0')
else:
    Config.set('graphics', 'fullscreen', '0')
    Config.set('graphics', 'borderless', '0')
    Config.set('graphics', 'show_cursor', '1')

from kivy.app import App
from kivy.lang import Builder
from kivy.clock import Clock

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
from pages.home import HomeScreen
from pages.alarm import AlarmScreen
from pages.schedule import ScheduleScreen
from pages.weather import WeatherScreen
from pages.pigs import PigsScreen
from pages.settings import SettingsScreen

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.localizer import localizer
from app.user_config import user_config
from app.logger import app_logger as logger

# –ò–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤
from widgets.root_widget import RootWidget
from widgets.top_menu import TopMenu

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.audio_service import audio_service
from services.alarm_service import AlarmService
from services.notifications_service import NotificationService
from services.weather_service import WeatherService
from services.sensor_service import SensorService
from services.pigs_service import PigsService
from services.schedule_service import ScheduleService
from services.auto_theme_service import AutoThemeService  # –î–û–ë–ê–í–õ–ï–ù–û

# AlarmClock –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –∑–∞—â–∏—â–∞–µ–º –∏–º–ø–æ—Ä—Ç
try:
    from services.alarm_clock import AlarmClock
    ALARM_CLOCK_AVAILABLE = True
except ImportError as e:
    logger.warning(f"AlarmClock unavailable: {e}")
    AlarmClock = None
    ALARM_CLOCK_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º theme_manager –æ—Ç–¥–µ–ª—å–Ω–æ –ü–û–°–õ–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy
from app.theme_manager import ThemeManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º KV —Ñ–∞–π–ª—ã
Builder.load_file('widgets/root_widget.kv')
Builder.load_file('widgets/top_menu.kv')
Builder.load_file('widgets/overlay_card.kv')
Builder.load_file('pages/home.kv')
Builder.load_file('pages/alarm.kv')
Builder.load_file('pages/schedule.kv')
Builder.load_file('pages/weather.kv')
Builder.load_file('pages/pigs.kv')
Builder.load_file('pages/settings.kv')

logger.info("=== Bedrock 2.0 Started ===")


class BedrockApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º theme_manager –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        self.theme_manager = ThemeManager()
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.localizer = localizer
        self.user_config = user_config
        self.audio_service = audio_service
        
        # –°–µ—Ä–≤–∏—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.alarm_service = None
        self.notification_service = None
        self.weather_service = None
        self.sensor_service = None
        self.pigs_service = None
        self.schedule_service = None
        self.alarm_clock = None
        self.auto_theme_service = None  # –î–û–ë–ê–í–õ–ï–ù–û
        
        self._services_stopped = False
        self._startup_complete = False

    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._load_user_settings()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self._initialize_services()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç
            root_widget = RootWidget()
            
            # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ startup –∑–≤—É–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI
            Clock.schedule_once(self._on_startup_complete, 1.0)
            
            return root_widget
            
        except Exception as e:
            logger.exception(f"Critical error in build(): {e}")
            return None

    def _load_user_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫
            lang = self.user_config.get("language", "en")
            self.localizer.load(lang)
            logger.info(f"Language loaded: {lang}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
            theme_name = self.user_config.get("theme", "minecraft")
            theme_variant = self.user_config.get("variant", "light")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ theme_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if hasattr(self, 'theme_manager') and self.theme_manager:
                self.theme_manager.load(theme_name, theme_variant)
                logger.info(f"Theme loaded: {theme_name}/{theme_variant}")
            else:
                logger.error("ThemeManager not initialized!")
            
        except Exception as e:
            logger.error(f"Error loading user settings: {e}")

    def _initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            services_config = [
                ('alarm_service', AlarmService, {}),
                ('notification_service', NotificationService, {}),
                ('weather_service', WeatherService, {
                    'lat': self.user_config.get('location', {}).get('latitude', 51.5566),
                    'lon': self.user_config.get('location', {}).get('longitude', -0.178)
                }),
                ('sensor_service', SensorService, {}),
                ('pigs_service', PigsService, {}),
                ('schedule_service', ScheduleService, {}),
                ('auto_theme_service', AutoThemeService, {}),  # –î–û–ë–ê–í–õ–ï–ù–û
            ]
            
            for service_name, service_class, kwargs in services_config:
                try:
                    service_instance = service_class(**kwargs)
                    setattr(self, service_name, service_instance)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ start
                    if hasattr(service_instance, 'start'):
                        service_instance.start()
                    
                    logger.info(f"Service initialized: {service_name}")
                    
                except Exception as ex:
                    logger.error(f"Failed to initialize {service_name}: {ex}")
                    setattr(self, service_name, None)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º alarm_clock –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if ALARM_CLOCK_AVAILABLE:
                try:
                    self.alarm_clock = AlarmClock()
                    self.alarm_clock.start()
                    logger.info("AlarmClock initialized and started")
                except Exception as ex:
                    logger.error(f"AlarmClock initialization failed: {ex}")
                    self.alarm_clock = None
            
            # –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã
            self._setup_auto_theme()
            
        except Exception as e:
            logger.error(f"Error initializing services: {e}")

    def _setup_auto_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º—ã"""
        try:
            if hasattr(self, 'auto_theme_service') and self.auto_theme_service:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                threshold = self.user_config.get("light_sensor_threshold", 3)
                
                # –ö–∞–ª–∏–±—Ä—É–µ–º –¥–∞—Ç—á–∏–∫
                if hasattr(self, 'sensor_service') and self.sensor_service:
                    self.auto_theme_service.calibrate_sensor(threshold)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ç–µ–º–∞
                auto_enabled = self.user_config.get("auto_theme_enabled", False)
                logger.info(f"Auto-theme setup: enabled={auto_enabled}, threshold={threshold}s")
                
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                if auto_enabled:
                    Clock.schedule_once(lambda dt: self._initial_auto_theme_check(), 3.0)
                    
        except Exception as e:
            logger.error(f"Error setting up auto-theme: {e}")

    def _initial_auto_theme_check(self):
        """–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            if hasattr(self, 'auto_theme_service') and self.auto_theme_service:
                logger.info("üåì Performing initial auto-theme check...")
                self.auto_theme_service.force_check()
        except Exception as e:
            logger.error(f"Error in initial auto-theme check: {e}")

    def _on_startup_complete(self, dt):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            if not self._startup_complete:
                self._startup_complete = True
                
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∑–∞–ø—É—Å–∫–∞
                if hasattr(self, 'audio_service') and self.audio_service and hasattr(self, 'theme_manager') and self.theme_manager:
                    try:
                        startup_sound = self.theme_manager.get_sound("startup")
                        if startup_sound:
                            self.audio_service.play(startup_sound)
                            logger.info("Startup sound played successfully")
                        else:
                            logger.warning("Startup sound file not found")
                    except Exception as e:
                        logger.error(f"Error playing startup sound: {e}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if hasattr(self, 'notification_service') and self.notification_service:
                    try:
                        username = self.user_config.get("username", "User")
                        welcome_msg = f"Welcome back, {username}! Bedrock 2.0 is ready."
                        self.notification_service.add(welcome_msg, "system")
                        logger.info("Welcome notification added")
                    except Exception as e:
                        logger.error(f"Error adding welcome notification: {e}")
                
                logger.info("=== Bedrock 2.0 Startup Complete ===")
                
        except Exception as e:
            logger.error(f"Error in startup completion: {e}")

    def on_stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self._services_stopped:
            return
        self._services_stopped = True

        logger.info("Stopping application...")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        services = [
            'alarm_service', 'notification_service', 'weather_service',
            'sensor_service', 'pigs_service', 'schedule_service', 
            'auto_theme_service'  # –î–û–ë–ê–í–õ–ï–ù–û
        ]
        
        for service_name in services:
            service = getattr(self, service_name, None)
            if service:
                try:
                    if hasattr(service, 'stop'):
                        service.stop()
                    logger.info(f"Stopped service: {service_name}")
                except Exception as ex:
                    logger.warning(f"Failed to stop {service_name}: {ex}")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ alarm_clock
        if self.alarm_clock:
            try:
                self.alarm_clock.stop()
                logger.info("AlarmClock stopped")
            except Exception as ex:
                logger.warning(f"Failed to stop AlarmClock: {ex}")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ audio_service
        if hasattr(self, 'audio_service') and self.audio_service:
            try:
                self.audio_service.stop()
                logger.info("AudioService stopped")
            except Exception as ex:
                logger.warning(f"Failed to stop AudioService: {ex}")

        logger.info("=== Bedrock 2.0 Stopped ===")

    def switch_theme(self, theme, variant):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ —Ç–µ–º—ã"""
        try:
            if hasattr(self, 'theme_manager') and self.theme_manager:
                self.theme_manager.load(theme, variant)
                logger.info(f"Theme switched to {theme}/{variant}")
            else:
                logger.error("ThemeManager not available for theme switch")
        except Exception as e:
            logger.error(f"Error switching theme: {e}")

    def switch_language(self, lang):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞"""
        try:
            if hasattr(self, 'localizer') and self.localizer:
                self.localizer.load(lang)
                logger.info(f"Language switched to {lang}")
            else:
                logger.error("Localizer not available for language switch")
        except Exception as e:
            logger.error(f"Error switching language: {e}")

    def get_theme_manager(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ theme_manager"""
        if hasattr(self, 'theme_manager') and self.theme_manager:
            return self.theme_manager
        else:
            logger.warning("ThemeManager not available, creating fallback")
            # –°–æ–∑–¥–∞–µ–º fallback theme_manager
            fallback_tm = ThemeManager()
            fallback_tm.load("minecraft", "light")
            return fallback_tm


if __name__ == '__main__':
    try:
        BedrockApp().run()
    except Exception as e:
        logger.exception(f"Critical application error: {e}")
        sys.exit(1)