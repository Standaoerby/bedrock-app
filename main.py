# main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ WeatherService –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ user_config
‚úÖ AutoThemeService –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã –ø–µ—Ä–µ–¥ UI
‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

from kivy.config import Config
import sys
import threading
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
Config.set('graphics', 'width', '1024')
Config.set('graphics', 'height', '600')
if platform.system() == "Linux":
    Config.set('graphics', 'fullscreen', 'auto')
    Config.set('graphics', 'borderless', '1')
    Config.set('graphics', 'show_cursor', '0')
else:
    Config.set('graphics', 'fullscreen', '0')
    Config.set('graphics', 'borderless', '0')
    Config.set('graphics', 'show_cursor', '1')

from kivy.app import App
from kivy.lang import Builder
from kivy.clock import Clock

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.localizer import localizer
from app.user_config import user_config
from app.logger import app_logger as logger
from app.theme_manager import ThemeManager

# –ò–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤
from widgets.root_widget import RootWidget
from widgets.top_menu import TopMenu

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
from pages.home import HomeScreen
from pages.alarm import AlarmScreen
from pages.schedule import ScheduleScreen
from pages.weather import WeatherScreen
from pages.pigs import PigsScreen
from pages.settings import SettingsScreen

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.audio_service import AudioService
from services.alarm_service import AlarmService
from services.notifications_service import NotificationService
from services.weather_service import WeatherService
from services.sensor_service import SensorService
from services.pigs_service import PigsService
from services.schedule_service import ScheduleService
from services.auto_theme_service import AutoThemeService
from services.volume_service import VolumeControlService

# AlarmClock —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
try:
    from services.alarm_clock import AlarmClock
    ALARM_CLOCK_AVAILABLE = True
except ImportError as e:
    logger.warning(f"AlarmClock not available: {e}")
    ALARM_CLOCK_AVAILABLE = False


class BedrockApp(App):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Bedrock 2.0"""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.user_config = user_config
        self.localizer = localizer
        self.theme_manager = None
        
        # –°–µ—Ä–≤–∏—Å—ã (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ)
        self.audio_service = None
        self.alarm_service = None
        self.notification_service = None
        self.weather_service = None
        self.sensor_service = None
        self.pigs_service = None
        self.schedule_service = None
        self.auto_theme_service = None
        self.volume_service = None
        self.alarm_clock = None
        
        logger.info("BedrockApp instance created")

    def build_config(self, config):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Kivy"""
        pass

    def build(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üöÄ Starting Bedrock 2.0...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è theme_manager –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã
            self._initialize_theme_manager()
            
            # 2. –ó–∞–≥—Ä—É–∑–∫–∞ KV —Ñ–∞–π–ª–æ–≤
            self._load_kv_files()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            root = RootWidget()
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è)
            self._initialize_services()
            
            logger.info("‚úÖ Bedrock 2.0 initialized successfully")
            return root
            
        except Exception as e:
            logger.error(f"‚ùå Critical error during build: {e}")
            raise

    def _initialize_theme_manager(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º—ã"""
        try:
            logger.info("üé® Initializing theme manager...")
            
            # –°–æ–∑–¥–∞–µ–º theme_manager
            self.theme_manager = ThemeManager()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            theme_name = self.user_config.get("theme", "minecraft")
            theme_variant = self.user_config.get("variant", "light")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
            if self.theme_manager.load(theme_name, theme_variant):
                logger.info(f"‚úÖ Theme loaded: {theme_name}/{theme_variant}")
            else:
                logger.warning(f"‚ö†Ô∏è Failed to load theme, using default")
                
        except Exception as e:
            logger.error(f"‚ùå Error initializing theme manager: {e}")
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π theme_manager
            self.theme_manager = ThemeManager()

    def _load_kv_files(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ KV —Ñ–∞–π–ª–æ–≤"""
        try:
            logger.info("üìÅ Loading KV files...")
            
            kv_files = [
                "widgets/root_widget.kv",
                "widgets/top_menu.kv", 
                "widgets/overlay_card.kv",  # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π OverlayCard
                "pages/home.kv",
                "pages/alarm.kv",
                "pages/schedule.kv",
                "pages/weather.kv",
                "pages/pigs.kv",
                "pages/settings.kv"
            ]
            
            for kv_file in kv_files:
                try:
                    Builder.load_file(kv_file)
                    logger.debug(f"‚úÖ Loaded KV: {kv_file}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to load KV file {kv_file}: {e}")
                    # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑-–∑–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    
        except Exception as e:
            logger.error(f"‚ùå Error loading KV files: {e}")
            raise

    def _initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üîß Initializing services...")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self._initialize_core_services()
            
            # –°–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            self._initialize_dependent_services()
            
        except Exception as e:
            logger.error(f"Error initializing services: {e}")

    def _initialize_core_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # Audio Service
            try:
                self.audio_service = AudioService()
                logger.info("‚úÖ audio_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è audio_service not available: {e}")
                self.audio_service = None
            
            # Alarm Service
            try:
                self.alarm_service = AlarmService()
                logger.info("‚úÖ alarm_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è alarm_service not available: {e}")
                self.alarm_service = None
            
            # Notification Service
            try:
                self.notification_service = NotificationService()
                logger.info("‚úÖ notification_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è notification_service not available: {e}")
                self.notification_service = None
            
            # Weather Service —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–∑ user_config -- –ü–û–ü–†–ê–í–ò–¢–¨ –ù–ê –†–ï–§–ê–ö–¢–û–†–ï
            try:
                location = self.user_config.get("location", {})
                lat = location.get("latitude", 51.5566)
                lon = location.get("longitude", -0.178)
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞
                lat = float(lat) if lat is not None else 51.5566
                lon = float(lon) if lon is not None else -0.178
                
                self.weather_service = WeatherService(lat=lat, lon=lon)
                logger.info("‚úÖ weather_service initialized")
                
            except Exception as e:
                logger.error(f"‚ùå weather_service failed: {e}")
                logger.info("üîß Continuing without weather service...")
                self.weather_service = None
            
            # Sensor Service
            try:
                self.sensor_service = SensorService()
                if hasattr(self.sensor_service, 'start'):
                    self.sensor_service.start()
                logger.info("‚úÖ sensor_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è sensor_service not available: {e}")
                self.sensor_service = None
            
            # Volume Service
            try:
                self.volume_service = VolumeControlService()
                if hasattr(self.volume_service, 'start'):
                    self.volume_service.start()
                logger.info("‚úÖ volume_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è volume_service not available: {e}")
                self.volume_service = None
            
            # Pigs Service
            try:
                self.pigs_service = PigsService()
                logger.info("‚úÖ pigs_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è pigs_service not available: {e}")
                self.pigs_service = None
            
            # Schedule Service
            try:
                self.schedule_service = ScheduleService()
                logger.info("‚úÖ schedule_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è schedule_service not available: {e}")
                self.schedule_service = None
                
        except Exception as e:
            logger.error(f"Error in core services initialization: {e}")

    def _initialize_dependent_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        try:
            logger.info("üîÑ Initializing dependent services...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: Auto Theme Service —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            try:
                if self.sensor_service is not None and self.theme_manager is not None:
                    self.auto_theme_service = AutoThemeService(
                        sensor_service=self.sensor_service,
                        theme_manager=self.theme_manager
                    )
                    if hasattr(self.auto_theme_service, 'start'):
                        self.auto_theme_service.start()
                    logger.info("‚úÖ auto_theme_service initialized")
                else:
                    logger.warning("‚ö†Ô∏è auto_theme_service not available (missing dependencies)")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è auto_theme_service not available: {e}")
                self.auto_theme_service = None
            
            # Alarm Clock (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç audio_service)
            try:
                if ALARM_CLOCK_AVAILABLE and self.audio_service is not None:
                    self.alarm_clock = AlarmClock()
                    if hasattr(self.alarm_clock, 'start'):
                        self.alarm_clock.start()
                    logger.info("‚úÖ alarm_clock initialized")
                else:
                    logger.warning("‚ö†Ô∏è alarm_clock not available")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è alarm_clock not available: {e}")
                self.alarm_clock = None
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ auto-theme
            self._setup_auto_theme()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ volume service
            self._setup_volume_service()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
            self._force_theme_refresh()
            
            logger.info("‚úÖ All services initialized successfully")
            
        except Exception as e:
            logger.error(f"Error finalizing dependent services: {e}")

    def _setup_auto_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            if self.auto_theme_service is not None:
                auto_theme_enabled = self.user_config.get("auto_theme_enabled", False)
                threshold = self.user_config.get("light_sensor_threshold", 3)
                
                if auto_theme_enabled:
                    self.auto_theme_service.set_enabled(True)
                    logger.info(f"Auto-theme enabled with threshold: {threshold}s")
                    
                    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    Clock.schedule_once(lambda dt: self._initial_auto_theme_check(), 3.0)
                    
        except Exception as e:
            logger.error(f"Error setting up auto-theme: {e}")

    def _initial_auto_theme_check(self):
        """–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            if self.auto_theme_service is not None:
                self.auto_theme_service.check_and_update_theme()
                logger.info("Initial auto-theme check completed")
        except Exception as e:
            logger.error(f"Error in initial auto-theme check: {e}")

    def _setup_volume_service(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ volume service"""
        try:
            if self.volume_service is not None:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                initial_volume = self.user_config.get("volume", 0.7)
                self.volume_service.set_volume(initial_volume)
                logger.info(f"Volume service configured with initial volume: {initial_volume}")
        except Exception as e:
            logger.error(f"Error setting up volume service: {e}")

    def _force_theme_refresh(self):
        """–ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤"""
        try:
            logger.info("üé® Forcing theme refresh for all screens...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º root widget
            if self.root and hasattr(self.root, 'refresh_theme'):
                Clock.schedule_once(lambda dt: self.root.refresh_theme(), 0.2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ screen_manager
            if self.root and hasattr(self.root, 'screen_manager'):
                sm = self.root.screen_manager
                if sm and hasattr(sm, 'screens'):
                    for screen in sm.screens:
                        if hasattr(screen, 'refresh_theme'):
                            Clock.schedule_once(lambda dt, s=screen: s.refresh_theme(), 0.3)
                            
            logger.info("‚úÖ Theme refresh scheduled for all screens")
            
        except Exception as e:
            logger.error(f"Error forcing theme refresh: {e}")

    def on_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üéâ Bedrock 2.0 started successfully!")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            self._final_diagnostics()
            
        except Exception as e:
            logger.error(f"Error in on_start: {e}")

    def _final_diagnostics(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üìä Running final diagnostics...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º theme_manager
            if self.theme_manager:
                logger.info(f"Theme Manager: {self.theme_manager.current_theme}/{self.theme_manager.current_variant}")
                logger.info(f"Theme loaded: {self.theme_manager.is_loaded()}")
            
            # –°—á–∏—Ç–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            services = [
                'audio_service', 'alarm_service', 'notification_service',
                'weather_service', 'sensor_service', 'volume_service',
                'pigs_service', 'schedule_service', 'auto_theme_service',
                'alarm_clock'
            ]
            
            initialized_count = sum(1 for service in services if getattr(self, service, None) is not None)
            logger.info(f"Services initialized: {initialized_count}/{len(services)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º root widget
            if self.root:
                logger.info("Root widget created successfully")
                if hasattr(self.root, 'screen_manager') and self.root.screen_manager:
                    screens_count = len(self.root.screen_manager.screens)
                    logger.info(f"Screens loaded: {screens_count}")
            
            logger.info("‚úÖ Diagnostics completed")
            
        except Exception as e:
            logger.error(f"Error in diagnostics: {e}")

    def on_stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("üõë Shutting down Bedrock 2.0...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            services_to_stop = [
                'auto_theme_service', 'alarm_clock', 'volume_service',
                'sensor_service', 'audio_service'
            ]
            
            for service_name in services_to_stop:
                service = getattr(self, service_name, None)
                if service and hasattr(service, 'stop'):
                    try:
                        service.stop()
                        logger.info(f"Stopped {service_name}")
                    except Exception as e:
                        logger.error(f"Error stopping {service_name}: {e}")
            
            logger.info("‚úÖ Bedrock 2.0 shutdown complete")
            
        except Exception as e:
            logger.error(f"Error during shutdown: {e}")


if __name__ == "__main__":
    try:
        app = BedrockApp()
        app.run()
    except KeyboardInterrupt:
        logger.info("Application terminated by user")
    except Exception as e:
        logger.error(f"Critical application error: {e}")
        sys.exit(1)