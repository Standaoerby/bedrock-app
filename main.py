# main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚úÖ KV —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ build() –≤–º–µ—Å—Ç–æ —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
‚úÖ –£–±—Ä–∞–Ω—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
"""

from kivy.config import Config
import sys
import threading
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kivy –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
Config.set('graphics', 'width', '1024')
Config.set('graphics', 'height', '600')
if platform.system() == "Linux":
    Config.set('graphics', 'fullscreen', 'auto')
    Config.set('graphics', 'borderless', '1')
    Config.set('graphics', 'show_cursor', '0')
else:
    Config.set('graphics', 'fullscreen', '0')
    Config.set('graphics', 'borderless', '0')
    Config.set('graphics', 'show_cursor', '1')

from kivy.app import App
from kivy.lang import Builder
from kivy.clock import Clock

# –ò–º–ø–æ—Ä—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.localizer import localizer
from app.user_config import user_config
from app.logger import app_logger as logger
from app.theme_manager import ThemeManager

# –ò–º–ø–æ—Ä—Ç—ã –≤–∏–¥–∂–µ—Ç–æ–≤
from widgets.root_widget import RootWidget
from widgets.top_menu import TopMenu

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü
from pages.home import HomeScreen
from pages.alarm import AlarmScreen
from pages.schedule import ScheduleScreen
from pages.weather import WeatherScreen
from pages.pigs import PigsScreen
from pages.settings import SettingsScreen

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.audio_service import AudioService
from services.alarm_service import AlarmService
from services.notifications_service import NotificationService
from services.weather_service import WeatherService
from services.sensor_service import SensorService
from services.pigs_service import PigsService
from services.schedule_service import ScheduleService
from services.auto_theme_service import AutoThemeService
from services.volume_service import VolumeControlService

# AlarmClock —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º
try:
    from services.alarm_clock import AlarmClock
    ALARM_CLOCK_AVAILABLE = True
except ImportError as e:
    logger.warning(f"AlarmClock unavailable: {e}")
    AlarmClock = None
    ALARM_CLOCK_AVAILABLE = False

logger.info("=== Bedrock 2.1 Started ===")


class BedrockApp(App):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.theme_manager = ThemeManager()
        self.localizer = localizer
        self.user_config = user_config
        
        # –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ _initialize_services)
        self.audio_service = None
        self.alarm_service = None
        self.notification_service = None
        self.weather_service = None
        self.sensor_service = None
        self.pigs_service = None
        self.schedule_service = None
        self.alarm_clock = None
        self.auto_theme_service = None
        self.volume_service = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self._running = False

    def build(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —Å—Ç—Ä–æ–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        logger.info("Building application...")
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º KV —Ñ–∞–π–ª—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û: –≤ build() –≤–º–µ—Å—Ç–æ —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è)
            self._load_kv_files()
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._load_user_settings()
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            self._initialize_services()
            
            # 4. –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç
            root = RootWidget()
            
            # 5. –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            self._setup_events()
            
            # 6. –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            Clock.schedule_once(lambda dt: self._finalize_initialization(), 1.0)
            
            logger.info("Application built successfully")
            return root
            
        except Exception as e:
            logger.error(f"Critical error in build(): {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise

    def _load_kv_files(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ KV —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        try:
            kv_files = [
                'widgets/root_widget.kv',
                'widgets/top_menu.kv',
                'widgets/overlay_card.kv',
                'pages/home.kv',
                'pages/alarm.kv',
                'pages/schedule.kv',
                'pages/weather.kv',
                'pages/pigs.kv',
                'pages/settings.kv'
            ]
            
            for kv_file in kv_files:
                Builder.load_file(kv_file)
                logger.debug(f"Loaded KV file: {kv_file}")
                
            logger.info("All KV files loaded successfully")
            
        except Exception as e:
            logger.error(f"Error loading KV files: {e}")
            raise
    
    def _load_user_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            theme = self.user_config.get("theme", "minecraft")
            variant = self.user_config.get("variant", "light") 
            language = self.user_config.get("language", "en")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
            if not self.theme_manager.load_theme(theme, variant):
                logger.warning(f"Failed to load theme {theme}/{variant}, using default")
                self.theme_manager.load_theme("minecraft", "light")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫
            self.localizer.load(language)
            logger.info(f"Settings loaded: theme={theme}/{variant}, language={language}")
            
        except Exception as e:
            logger.error(f"Error loading user settings: {e}")

    def _initialize_services(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("Initializing services...")
            
            # ===== –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ï–†–í–ò–°–´ (—Å—Ä–∞–∑—É) =====
            
            # Audio Service (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω)
            try:
                self.audio_service = AudioService()
                logger.info("‚úÖ audio_service initialized")
            except Exception as e:
                logger.error(f"‚ùå audio_service failed: {e}")
                self.audio_service = None
            
            # Alarm Service (–≤–∞–∂–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
            try:
                self.alarm_service = AlarmService()
                logger.info("‚úÖ alarm_service initialized")
            except Exception as e:
                logger.error(f"‚ùå alarm_service failed: {e}")
                self.alarm_service = None
            
            # Notification Service (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            try:
                self.notification_service = NotificationService()
                logger.info("‚úÖ notification_service initialized")
            except Exception as e:
                logger.error(f"‚ùå notification_service failed: {e}")
                self.notification_service = None
            
            # Schedule Service (–±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)
            try:
                self.schedule_service = ScheduleService()
                logger.info("‚úÖ schedule_service initialized")
            except Exception as e:
                logger.error(f"‚ùå schedule_service failed: {e}")
                self.schedule_service = None
            
            # ===== –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —Ñ–æ–Ω–µ
            Clock.schedule_once(lambda dt: self._initialize_deferred_services(), 2.0)
            
            logger.info("Critical services initialized, deferred services scheduled")
            
        except Exception as e:
            logger.error(f"Error initializing services: {e}")

    def _initialize_deferred_services(self):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("üîÑ Starting deferred service initialization...")
            
            # Weather Service
            try:
                self.weather_service = WeatherService()
                logger.info("‚úÖ weather_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è weather_service not available: {e}")
                self.weather_service = None
            
            # Sensor Service
            try:
                self.sensor_service = SensorService()
                if hasattr(self.sensor_service, 'start'):
                    self.sensor_service.start()
                logger.info("‚úÖ sensor_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è sensor_service not available: {e}")
                self.sensor_service = None
            
            # Volume Service
            try:
                self.volume_service = VolumeControlService()
                if hasattr(self.volume_service, 'start'):
                    self.volume_service.start()
                logger.info("‚úÖ volume_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è volume_service not available: {e}")
                self.volume_service = None
            
            # Pigs Service
            try:
                self.pigs_service = PigsService()
                logger.info("‚úÖ pigs_service initialized")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è pigs_service not available: {e}")
                self.pigs_service = None
            
            # Finalize dependencies
            Clock.schedule_once(lambda dt: self._finalize_service_dependencies(), 1.0)
            
        except Exception as e:
            logger.error(f"Error in deferred service initialization: {e}")

    def _finalize_service_dependencies(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        try:
            logger.info("üîÑ Finalizing service dependencies...")
            
            # Auto Theme Service (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç sensor_service)
            try:
                if self.sensor_service:
                    self.auto_theme_service = AutoThemeService()
                    if hasattr(self.auto_theme_service, 'start'):
                        self.auto_theme_service.start()
                    logger.info("‚úÖ auto_theme_service initialized")
                else:
                    logger.warning("‚ö†Ô∏è auto_theme_service not available (no sensor service)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è auto_theme_service not available: {e}")
            
            # Alarm Clock (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç audio_service –∏ alarm_service)
            try:
                if ALARM_CLOCK_AVAILABLE and self.audio_service:
                    self.alarm_clock = AlarmClock()
                    if hasattr(self.alarm_clock, 'start'):
                        self.alarm_clock.start()
                    logger.info("‚úÖ alarm_clock initialized")
                else:
                    logger.warning("‚ö†Ô∏è alarm_clock not available")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è alarm_clock not available: {e}")
            
            # Setup auto-theme
            self._setup_auto_theme()
            
            # Setup volume
            self._setup_volume_service()
            
            logger.info("‚úÖ All services initialized and configured")
            
        except Exception as e:
            logger.error(f"Error finalizing service dependencies: {e}")

    def _setup_auto_theme(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            if hasattr(self, 'auto_theme_service') and self.auto_theme_service:
                auto_theme_enabled = self.user_config.get("auto_theme", False)
                threshold = self.user_config.get("light_threshold", 3)
                
                if auto_theme_enabled:
                    self.auto_theme_service.enable()
                    logger.info(f"[Auto-theme setup] enabled=True, threshold={threshold}s")
                    
                    # –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    Clock.schedule_once(lambda dt: self._initial_auto_theme_check(), 3.0)
                    
        except Exception as e:
            logger.error(f"Error setting up auto-theme: {e}")

    def _initial_auto_theme_check(self):
        """–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            if hasattr(self, 'auto_theme_service') and self.auto_theme_service:
                self.auto_theme_service.check_and_update_theme()
                logger.info("Initial auto-theme check completed")
        except Exception as e:
            logger.error(f"Error in initial auto-theme check: {e}")

    def _setup_volume_service(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            if hasattr(self, 'volume_service') and self.volume_service:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                saved_volume = self.user_config.get("volume", 50)
                self.volume_service.set_volume(saved_volume)
                
                status = self.volume_service.get_status()
                logger.info(f"Volume service setup complete, volume: {saved_volume}%")
                
        except Exception as e:
            logger.error(f"Error setting up volume service: {e}")

    def _setup_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        try:
            from app.event_bus import event_bus
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            event_bus.subscribe("auto_theme_trigger", self._on_auto_theme_trigger)
            event_bus.subscribe("volume_changed", self._on_volume_changed)
            
            logger.info("Event handlers setup completed")
            
        except Exception as e:
            logger.error(f"Error setting up events: {e}")

    def _finalize_initialization(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info("Finalizing application initialization...")
            self._running = True
            
            # –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            logger.info("Application initialization completed")
            
        except Exception as e:
            logger.error(f"Error in finalization: {e}")

    # ======================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    # ======================================

    def _on_auto_theme_trigger(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ç–µ–º—ã"""
        try:
            action = event_data.get("action")
            logger.info(f"Auto-theme triggered: {action}")
        except Exception as e:
            logger.error(f"Error handling auto-theme trigger: {e}")

    def _on_volume_changed(self, event_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            volume = event_data.get("volume")
            if volume is not None:
                self.user_config.set("volume", volume)
                logger.debug(f"Volume saved to config: {volume}")
        except Exception as e:
            logger.error(f"Error handling volume change: {e}")

    def on_stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("Application stopping...")
        self._running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
        services_to_stop = [
            'alarm_clock', 'auto_theme_service', 'volume_service', 
            'sensor_service', 'weather_service', 'pigs_service'
        ]
        
        for service_name in services_to_stop:
            service = getattr(self, service_name, None)
            if service and hasattr(service, 'stop'):
                try:
                    service.stop()
                    logger.info(f"Stopped {service_name}")
                except Exception as e:
                    logger.error(f"Error stopping {service_name}: {e}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        if self.audio_service and hasattr(self.audio_service, 'stop'):
            try:
                self.audio_service.stop()
                logger.info("Stopped audio_service")
            except Exception as e:
                logger.error(f"Error stopping audio_service: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            self.user_config.save()
            logger.info("User config saved")
        except Exception as e:
            logger.error(f"Error saving config: {e}")
        
        logger.info("Application stopped")
        return True


if __name__ == "__main__":
    try:
        app = BedrockApp()
        app.run()
    except Exception as e:
        logger.error(f"Critical application error: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("Application terminated")